
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004584  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00004584  00004618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080019e  0080019e  00004756  2**0
                  ALLOC
  3 .stab         000027fc  00000000  00000000  00004758  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b3c  00000000  00000000  00006f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00007a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00007c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00007e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000a4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000b9ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000cc74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000ce54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000d152  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dafc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <main>
      8a:	0c 94 c0 22 	jmp	0x4580	; 0x4580 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 22 	jmp	0x4512	; 0x4512 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e9       	ldi	r26, 0x95	; 149
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 22 	jmp	0x452a	; 0x452a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 22 	jmp	0x452a	; 0x452a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 22 	jmp	0x4512	; 0x4512 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e9       	ldi	r22, 0x95	; 149
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 95 22 	jmp	0x452a	; 0x452a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 95 22 	jmp	0x452a	; 0x452a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 95 22 	jmp	0x452a	; 0x452a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 95 22 	jmp	0x452a	; 0x452a <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 99 22 	jmp	0x4532	; 0x4532 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 b5 22 	jmp	0x456a	; 0x456a <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e3 56       	subi	r30, 0x63	; 99
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <ADC_INIT>:
#include"ADC_Registers.h"
#include"ADC.h"
#include"ADC_config.h"

void ADC_INIT(void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	/*Enable ADC*/
	ADC_Enabled();
     e96:	0e 94 88 08 	call	0x1110	; 0x1110 <ADC_Enabled>
		SET_BIT(ADMUX_REG,REFS0);
		SET_BIT(ADMUX_REG,REFS1);
	}
	else if(ADC_VREF == ADC_EXTRNAL_VREF)
	{
		CLR_BIT(ADMUX_REG,REFS0);
     e9a:	a7 e2       	ldi	r26, 0x27	; 39
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e7 e2       	ldi	r30, 0x27	; 39
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7b       	andi	r24, 0xBF	; 191
     ea6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,REFS1);
     ea8:	a7 e2       	ldi	r26, 0x27	; 39
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e7 e2       	ldi	r30, 0x27	; 39
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8f 77       	andi	r24, 0x7F	; 127
     eb4:	8c 93       	st	X, r24
	{
		SET_BIT(ADMUX_REG,ADLAR);
	}
	else if(ADC_ADJUST == ADC_RIGHT)
	{
		CLR_BIT(ADMUX_REG,ADLAR);
     eb6:	a7 e2       	ldi	r26, 0x27	; 39
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e7 e2       	ldi	r30, 0x27	; 39
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8f 7d       	andi	r24, 0xDF	; 223
     ec2:	8c 93       	st	X, r24
	}
	/*Select ADC Prescaler*/
	if(ADC_PRESCALER == DivisionFactorBy128)
	{
		SET_BIT(ADCSRA_REG,ADPS2);
     ec4:	a6 e2       	ldi	r26, 0x26	; 38
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	84 60       	ori	r24, 0x04	; 4
     ed0:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_REG,ADPS1);
     ed2:	a6 e2       	ldi	r26, 0x26	; 38
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e6 e2       	ldi	r30, 0x26	; 38
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	82 60       	ori	r24, 0x02	; 2
     ede:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_REG,ADPS0);
     ee0:	a6 e2       	ldi	r26, 0x26	; 38
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e6 e2       	ldi	r30, 0x26	; 38
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	81 60       	ori	r24, 0x01	; 1
     eec:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA_REG,ADPS2);
		CLR_BIT(ADCSRA_REG,ADPS1);
		CLR_BIT(ADCSRA_REG,ADPS0);
	}

}
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <ADC_Read>:

u16 ADC_Read(u8 PinId)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <ADC_Read+0x6>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01

	PinId = PinId & 0b00000111;
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	87 70       	andi	r24, 0x07	; 7
     f06:	89 83       	std	Y+1, r24	; 0x01
	/*Select ADC Channel*/
	switch(PinId)
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	3b 83       	std	Y+3, r19	; 0x03
     f10:	2a 83       	std	Y+2, r18	; 0x02
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	9b 81       	ldd	r25, Y+3	; 0x03
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <ADC_Read+0x2a>
     f1c:	70 c0       	rjmp	.+224    	; 0xffe <ADC_Read+0x10a>
     f1e:	2a 81       	ldd	r18, Y+2	; 0x02
     f20:	3b 81       	ldd	r19, Y+3	; 0x03
     f22:	24 30       	cpi	r18, 0x04	; 4
     f24:	31 05       	cpc	r19, r1
     f26:	84 f4       	brge	.+32     	; 0xf48 <ADC_Read+0x54>
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	9b 81       	ldd	r25, Y+3	; 0x03
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	d1 f1       	breq	.+116    	; 0xfa6 <ADC_Read+0xb2>
     f32:	2a 81       	ldd	r18, Y+2	; 0x02
     f34:	3b 81       	ldd	r19, Y+3	; 0x03
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	0c f0       	brlt	.+2      	; 0xf3e <ADC_Read+0x4a>
     f3c:	4a c0       	rjmp	.+148    	; 0xfd2 <ADC_Read+0xde>
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	9b 81       	ldd	r25, Y+3	; 0x03
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	d1 f0       	breq	.+52     	; 0xf7a <ADC_Read+0x86>
     f46:	c8 c0       	rjmp	.+400    	; 0x10d8 <ADC_Read+0x1e4>
     f48:	2a 81       	ldd	r18, Y+2	; 0x02
     f4a:	3b 81       	ldd	r19, Y+3	; 0x03
     f4c:	25 30       	cpi	r18, 0x05	; 5
     f4e:	31 05       	cpc	r19, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <ADC_Read+0x60>
     f52:	81 c0       	rjmp	.+258    	; 0x1056 <ADC_Read+0x162>
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	9b 81       	ldd	r25, Y+3	; 0x03
     f58:	85 30       	cpi	r24, 0x05	; 5
     f5a:	91 05       	cpc	r25, r1
     f5c:	0c f4       	brge	.+2      	; 0xf60 <ADC_Read+0x6c>
     f5e:	65 c0       	rjmp	.+202    	; 0x102a <ADC_Read+0x136>
     f60:	2a 81       	ldd	r18, Y+2	; 0x02
     f62:	3b 81       	ldd	r19, Y+3	; 0x03
     f64:	26 30       	cpi	r18, 0x06	; 6
     f66:	31 05       	cpc	r19, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <ADC_Read+0x78>
     f6a:	8b c0       	rjmp	.+278    	; 0x1082 <ADC_Read+0x18e>
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	9b 81       	ldd	r25, Y+3	; 0x03
     f70:	87 30       	cpi	r24, 0x07	; 7
     f72:	91 05       	cpc	r25, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <ADC_Read+0x84>
     f76:	9b c0       	rjmp	.+310    	; 0x10ae <ADC_Read+0x1ba>
     f78:	af c0       	rjmp	.+350    	; 0x10d8 <ADC_Read+0x1e4>
	{
		case A0:CLR_BIT(ADMUX_REG,MUX0);CLR_BIT(ADMUX_REG,MUX1);CLR_BIT(ADMUX_REG,MUX2);break;//000
     f7a:	a7 e2       	ldi	r26, 0x27	; 39
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e7 e2       	ldi	r30, 0x27	; 39
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8e 7f       	andi	r24, 0xFE	; 254
     f86:	8c 93       	st	X, r24
     f88:	a7 e2       	ldi	r26, 0x27	; 39
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e7 e2       	ldi	r30, 0x27	; 39
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8d 7f       	andi	r24, 0xFD	; 253
     f94:	8c 93       	st	X, r24
     f96:	a7 e2       	ldi	r26, 0x27	; 39
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e7 e2       	ldi	r30, 0x27	; 39
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8b 7f       	andi	r24, 0xFB	; 251
     fa2:	8c 93       	st	X, r24
     fa4:	99 c0       	rjmp	.+306    	; 0x10d8 <ADC_Read+0x1e4>
		case A1:SET_BIT(ADMUX_REG,MUX0);CLR_BIT(ADMUX_REG,MUX1);CLR_BIT(ADMUX_REG,MUX2);break;//001
     fa6:	a7 e2       	ldi	r26, 0x27	; 39
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e7 e2       	ldi	r30, 0x27	; 39
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	81 60       	ori	r24, 0x01	; 1
     fb2:	8c 93       	st	X, r24
     fb4:	a7 e2       	ldi	r26, 0x27	; 39
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e7 e2       	ldi	r30, 0x27	; 39
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8d 7f       	andi	r24, 0xFD	; 253
     fc0:	8c 93       	st	X, r24
     fc2:	a7 e2       	ldi	r26, 0x27	; 39
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e7 e2       	ldi	r30, 0x27	; 39
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8b 7f       	andi	r24, 0xFB	; 251
     fce:	8c 93       	st	X, r24
     fd0:	83 c0       	rjmp	.+262    	; 0x10d8 <ADC_Read+0x1e4>
		case A2:CLR_BIT(ADMUX_REG,MUX0);SET_BIT(ADMUX_REG,MUX1);CLR_BIT(ADMUX_REG,MUX2);break;//010
     fd2:	a7 e2       	ldi	r26, 0x27	; 39
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e7 e2       	ldi	r30, 0x27	; 39
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8e 7f       	andi	r24, 0xFE	; 254
     fde:	8c 93       	st	X, r24
     fe0:	a7 e2       	ldi	r26, 0x27	; 39
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e7 e2       	ldi	r30, 0x27	; 39
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	82 60       	ori	r24, 0x02	; 2
     fec:	8c 93       	st	X, r24
     fee:	a7 e2       	ldi	r26, 0x27	; 39
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e7 e2       	ldi	r30, 0x27	; 39
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8b 7f       	andi	r24, 0xFB	; 251
     ffa:	8c 93       	st	X, r24
     ffc:	6d c0       	rjmp	.+218    	; 0x10d8 <ADC_Read+0x1e4>
		case A3:SET_BIT(ADMUX_REG,MUX0);SET_BIT(ADMUX_REG,MUX1);CLR_BIT(ADMUX_REG,MUX2);break;//011
     ffe:	a7 e2       	ldi	r26, 0x27	; 39
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e7 e2       	ldi	r30, 0x27	; 39
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	81 60       	ori	r24, 0x01	; 1
    100a:	8c 93       	st	X, r24
    100c:	a7 e2       	ldi	r26, 0x27	; 39
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e7 e2       	ldi	r30, 0x27	; 39
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	82 60       	ori	r24, 0x02	; 2
    1018:	8c 93       	st	X, r24
    101a:	a7 e2       	ldi	r26, 0x27	; 39
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e7 e2       	ldi	r30, 0x27	; 39
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8b 7f       	andi	r24, 0xFB	; 251
    1026:	8c 93       	st	X, r24
    1028:	57 c0       	rjmp	.+174    	; 0x10d8 <ADC_Read+0x1e4>
		case A4:CLR_BIT(ADMUX_REG,MUX0);CLR_BIT(ADMUX_REG,MUX1);SET_BIT(ADMUX_REG,MUX2);break;//100
    102a:	a7 e2       	ldi	r26, 0x27	; 39
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e7 e2       	ldi	r30, 0x27	; 39
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8e 7f       	andi	r24, 0xFE	; 254
    1036:	8c 93       	st	X, r24
    1038:	a7 e2       	ldi	r26, 0x27	; 39
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e7 e2       	ldi	r30, 0x27	; 39
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8d 7f       	andi	r24, 0xFD	; 253
    1044:	8c 93       	st	X, r24
    1046:	a7 e2       	ldi	r26, 0x27	; 39
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e7 e2       	ldi	r30, 0x27	; 39
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	84 60       	ori	r24, 0x04	; 4
    1052:	8c 93       	st	X, r24
    1054:	41 c0       	rjmp	.+130    	; 0x10d8 <ADC_Read+0x1e4>
		case A5:SET_BIT(ADMUX_REG,MUX0);CLR_BIT(ADMUX_REG,MUX1);SET_BIT(ADMUX_REG,MUX2);break;//101
    1056:	a7 e2       	ldi	r26, 0x27	; 39
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e7 e2       	ldi	r30, 0x27	; 39
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	8c 93       	st	X, r24
    1064:	a7 e2       	ldi	r26, 0x27	; 39
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e7 e2       	ldi	r30, 0x27	; 39
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8d 7f       	andi	r24, 0xFD	; 253
    1070:	8c 93       	st	X, r24
    1072:	a7 e2       	ldi	r26, 0x27	; 39
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e7 e2       	ldi	r30, 0x27	; 39
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	84 60       	ori	r24, 0x04	; 4
    107e:	8c 93       	st	X, r24
    1080:	2b c0       	rjmp	.+86     	; 0x10d8 <ADC_Read+0x1e4>
		case A6:CLR_BIT(ADMUX_REG,MUX0);SET_BIT(ADMUX_REG,MUX1);SET_BIT(ADMUX_REG,MUX2);break;//110
    1082:	a7 e2       	ldi	r26, 0x27	; 39
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e7 e2       	ldi	r30, 0x27	; 39
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8e 7f       	andi	r24, 0xFE	; 254
    108e:	8c 93       	st	X, r24
    1090:	a7 e2       	ldi	r26, 0x27	; 39
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e7 e2       	ldi	r30, 0x27	; 39
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	82 60       	ori	r24, 0x02	; 2
    109c:	8c 93       	st	X, r24
    109e:	a7 e2       	ldi	r26, 0x27	; 39
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e7 e2       	ldi	r30, 0x27	; 39
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	84 60       	ori	r24, 0x04	; 4
    10aa:	8c 93       	st	X, r24
    10ac:	15 c0       	rjmp	.+42     	; 0x10d8 <ADC_Read+0x1e4>
		case A7:SET_BIT(ADMUX_REG,MUX0);SET_BIT(ADMUX_REG,MUX1);SET_BIT(ADMUX_REG,MUX2);break;//111
    10ae:	a7 e2       	ldi	r26, 0x27	; 39
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e7 e2       	ldi	r30, 0x27	; 39
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	8c 93       	st	X, r24
    10bc:	a7 e2       	ldi	r26, 0x27	; 39
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e7 e2       	ldi	r30, 0x27	; 39
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	82 60       	ori	r24, 0x02	; 2
    10c8:	8c 93       	st	X, r24
    10ca:	a7 e2       	ldi	r26, 0x27	; 39
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e7 e2       	ldi	r30, 0x27	; 39
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	84 60       	ori	r24, 0x04	; 4
    10d6:	8c 93       	st	X, r24
	}
	/*Start Conversion*/
	SET_BIT(ADCSRA_REG,ADSC);
    10d8:	a6 e2       	ldi	r26, 0x26	; 38
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e6 e2       	ldi	r30, 0x26	; 38
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 64       	ori	r24, 0x40	; 64
    10e4:	8c 93       	st	X, r24
	/*Wait until the flag bit is switched to 1 (Conversion Complete)*/
	while(GET_BIT(ADCSRA_REG,ADIF) == 0);
    10e6:	e6 e2       	ldi	r30, 0x26	; 38
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	82 95       	swap	r24
    10ee:	8f 70       	andi	r24, 0x0F	; 15
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	81 70       	andi	r24, 0x01	; 1
    10f6:	90 70       	andi	r25, 0x00	; 0
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	a9 f3       	breq	.-22     	; 0x10e6 <ADC_Read+0x1f2>
	/*Return 16 bits in ADCDATA Register */
	return ADCDATA_REG;
    10fc:	e4 e2       	ldi	r30, 0x24	; 36
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	91 81       	ldd	r25, Z+1	; 0x01
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <ADC_Enabled>:

void ADC_Enabled(void)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA_REG,ADEN);
    1118:	a6 e2       	ldi	r26, 0x26	; 38
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e6 e2       	ldi	r30, 0x26	; 38
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	80 68       	ori	r24, 0x80	; 128
    1124:	8c 93       	st	X, r24
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <ADC_Disabled>:

void ADC_Disabled(void)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_REG,ADEN);
    1134:	a6 e2       	ldi	r26, 0x26	; 38
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e6 e2       	ldi	r30, 0x26	; 38
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8f 77       	andi	r24, 0x7F	; 127
    1140:	8c 93       	st	X, r24
}
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <SetPinValue>:
#include"LIB/set_math.h"
#include"DIO.h"
#include"DIO_Registers.h"

void SetPinValue(u8 PinId,u8 PortId,u8 PinValue)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	27 97       	sbiw	r28, 0x07	; 7
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6a 83       	std	Y+2, r22	; 0x02
    1160:	4b 83       	std	Y+3, r20	; 0x03
	if(PinId <= PIN7 && PortId <= PORTD)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	88 30       	cpi	r24, 0x08	; 8
    1166:	08 f0       	brcs	.+2      	; 0x116a <SetPinValue+0x22>
    1168:	ee c0       	rjmp	.+476    	; 0x1346 <SetPinValue+0x1fe>
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	84 30       	cpi	r24, 0x04	; 4
    116e:	08 f0       	brcs	.+2      	; 0x1172 <SetPinValue+0x2a>
    1170:	ea c0       	rjmp	.+468    	; 0x1346 <SetPinValue+0x1fe>
	{
		if(PinValue == HIGH)
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	09 f0       	breq	.+2      	; 0x117a <SetPinValue+0x32>
    1178:	6f c0       	rjmp	.+222    	; 0x1258 <SetPinValue+0x110>
		{
			switch(PortId)
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	3f 83       	std	Y+7, r19	; 0x07
    1182:	2e 83       	std	Y+6, r18	; 0x06
    1184:	8e 81       	ldd	r24, Y+6	; 0x06
    1186:	9f 81       	ldd	r25, Y+7	; 0x07
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	91 05       	cpc	r25, r1
    118c:	49 f1       	breq	.+82     	; 0x11e0 <SetPinValue+0x98>
    118e:	2e 81       	ldd	r18, Y+6	; 0x06
    1190:	3f 81       	ldd	r19, Y+7	; 0x07
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	2c f4       	brge	.+10     	; 0x11a2 <SetPinValue+0x5a>
    1198:	8e 81       	ldd	r24, Y+6	; 0x06
    119a:	9f 81       	ldd	r25, Y+7	; 0x07
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	61 f0       	breq	.+24     	; 0x11b8 <SetPinValue+0x70>
    11a0:	d2 c0       	rjmp	.+420    	; 0x1346 <SetPinValue+0x1fe>
    11a2:	2e 81       	ldd	r18, Y+6	; 0x06
    11a4:	3f 81       	ldd	r19, Y+7	; 0x07
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	71 f1       	breq	.+92     	; 0x1208 <SetPinValue+0xc0>
    11ac:	8e 81       	ldd	r24, Y+6	; 0x06
    11ae:	9f 81       	ldd	r25, Y+7	; 0x07
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	91 05       	cpc	r25, r1
    11b4:	e9 f1       	breq	.+122    	; 0x1230 <SetPinValue+0xe8>
    11b6:	c7 c0       	rjmp	.+398    	; 0x1346 <SetPinValue+0x1fe>
			{
			case PORTA:	SET_BIT(PORTA_REG,PinId);break;
    11b8:	ab e3       	ldi	r26, 0x3B	; 59
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	eb e3       	ldi	r30, 0x3B	; 59
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <SetPinValue+0x8e>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <SetPinValue+0x8a>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	b3 c0       	rjmp	.+358    	; 0x1346 <SetPinValue+0x1fe>
			case PORTB:	SET_BIT(PORTB_REG,PinId);break;
    11e0:	a8 e3       	ldi	r26, 0x38	; 56
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e8 e3       	ldi	r30, 0x38	; 56
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <SetPinValue+0xb6>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <SetPinValue+0xb2>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	9f c0       	rjmp	.+318    	; 0x1346 <SetPinValue+0x1fe>
			case PORTC:	SET_BIT(PORTC_REG,PinId);break;
    1208:	a5 e3       	ldi	r26, 0x35	; 53
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e5 e3       	ldi	r30, 0x35	; 53
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <SetPinValue+0xde>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <SetPinValue+0xda>
    122a:	84 2b       	or	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	8b c0       	rjmp	.+278    	; 0x1346 <SetPinValue+0x1fe>
			case PORTD:	SET_BIT(PORTD_REG,PinId);break;
    1230:	a2 e3       	ldi	r26, 0x32	; 50
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e2 e3       	ldi	r30, 0x32	; 50
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <SetPinValue+0x106>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <SetPinValue+0x102>
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	77 c0       	rjmp	.+238    	; 0x1346 <SetPinValue+0x1fe>
			}
		}
		else if(PinValue == LOW)
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	88 23       	and	r24, r24
    125c:	09 f0       	breq	.+2      	; 0x1260 <SetPinValue+0x118>
    125e:	73 c0       	rjmp	.+230    	; 0x1346 <SetPinValue+0x1fe>
		{
			switch(PortId)
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	3d 83       	std	Y+5, r19	; 0x05
    1268:	2c 83       	std	Y+4, r18	; 0x04
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	91 05       	cpc	r25, r1
    1272:	59 f1       	breq	.+86     	; 0x12ca <SetPinValue+0x182>
    1274:	2c 81       	ldd	r18, Y+4	; 0x04
    1276:	3d 81       	ldd	r19, Y+5	; 0x05
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	2c f4       	brge	.+10     	; 0x1288 <SetPinValue+0x140>
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	69 f0       	breq	.+26     	; 0x12a0 <SetPinValue+0x158>
    1286:	5f c0       	rjmp	.+190    	; 0x1346 <SetPinValue+0x1fe>
    1288:	2c 81       	ldd	r18, Y+4	; 0x04
    128a:	3d 81       	ldd	r19, Y+5	; 0x05
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	89 f1       	breq	.+98     	; 0x12f4 <SetPinValue+0x1ac>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	91 05       	cpc	r25, r1
    129a:	09 f4       	brne	.+2      	; 0x129e <SetPinValue+0x156>
    129c:	40 c0       	rjmp	.+128    	; 0x131e <SetPinValue+0x1d6>
    129e:	53 c0       	rjmp	.+166    	; 0x1346 <SetPinValue+0x1fe>
			{
			case PORTA:	CLR_BIT(PORTA_REG,PinId);break;
    12a0:	ab e3       	ldi	r26, 0x3B	; 59
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	eb e3       	ldi	r30, 0x3B	; 59
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <SetPinValue+0x176>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <SetPinValue+0x172>
    12c2:	80 95       	com	r24
    12c4:	84 23       	and	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	3e c0       	rjmp	.+124    	; 0x1346 <SetPinValue+0x1fe>
			case PORTB:	CLR_BIT(PORTB_REG,PinId);break;
    12ca:	a8 e3       	ldi	r26, 0x38	; 56
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e8 e3       	ldi	r30, 0x38	; 56
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <SetPinValue+0x1a0>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <SetPinValue+0x19c>
    12ec:	80 95       	com	r24
    12ee:	84 23       	and	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	29 c0       	rjmp	.+82     	; 0x1346 <SetPinValue+0x1fe>
			case PORTC:	CLR_BIT(PORTC_REG,PinId);break;
    12f4:	a5 e3       	ldi	r26, 0x35	; 53
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e5 e3       	ldi	r30, 0x35	; 53
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <SetPinValue+0x1ca>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <SetPinValue+0x1c6>
    1316:	80 95       	com	r24
    1318:	84 23       	and	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <SetPinValue+0x1fe>
			case PORTD:	CLR_BIT(PORTD_REG,PinId);break;
    131e:	a2 e3       	ldi	r26, 0x32	; 50
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e2 e3       	ldi	r30, 0x32	; 50
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <SetPinValue+0x1f4>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <SetPinValue+0x1f0>
    1340:	80 95       	com	r24
    1342:	84 23       	and	r24, r20
    1344:	8c 93       	st	X, r24

	else
	{
		//report error massage
	}
}
    1346:	27 96       	adiw	r28, 0x07	; 7
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <SetPinMode>:

void SetPinMode(u8 PinId,u8 PortId,u8 PinMode)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	27 97       	sbiw	r28, 0x07	; 7
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	6a 83       	std	Y+2, r22	; 0x02
    1370:	4b 83       	std	Y+3, r20	; 0x03
	if(PinId <= PIN7 && PortId <= PORTD)
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	88 30       	cpi	r24, 0x08	; 8
    1376:	08 f0       	brcs	.+2      	; 0x137a <SetPinMode+0x22>
    1378:	ee c0       	rjmp	.+476    	; 0x1556 <SetPinMode+0x1fe>
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	08 f0       	brcs	.+2      	; 0x1382 <SetPinMode+0x2a>
    1380:	ea c0       	rjmp	.+468    	; 0x1556 <SetPinMode+0x1fe>
	{
		if(PinMode == OUTPUT)
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	09 f0       	breq	.+2      	; 0x138a <SetPinMode+0x32>
    1388:	6f c0       	rjmp	.+222    	; 0x1468 <SetPinMode+0x110>
		{
			switch(PortId)
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3f 83       	std	Y+7, r19	; 0x07
    1392:	2e 83       	std	Y+6, r18	; 0x06
    1394:	8e 81       	ldd	r24, Y+6	; 0x06
    1396:	9f 81       	ldd	r25, Y+7	; 0x07
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	91 05       	cpc	r25, r1
    139c:	49 f1       	breq	.+82     	; 0x13f0 <SetPinMode+0x98>
    139e:	2e 81       	ldd	r18, Y+6	; 0x06
    13a0:	3f 81       	ldd	r19, Y+7	; 0x07
    13a2:	22 30       	cpi	r18, 0x02	; 2
    13a4:	31 05       	cpc	r19, r1
    13a6:	2c f4       	brge	.+10     	; 0x13b2 <SetPinMode+0x5a>
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	61 f0       	breq	.+24     	; 0x13c8 <SetPinMode+0x70>
    13b0:	d2 c0       	rjmp	.+420    	; 0x1556 <SetPinMode+0x1fe>
    13b2:	2e 81       	ldd	r18, Y+6	; 0x06
    13b4:	3f 81       	ldd	r19, Y+7	; 0x07
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	71 f1       	breq	.+92     	; 0x1418 <SetPinMode+0xc0>
    13bc:	8e 81       	ldd	r24, Y+6	; 0x06
    13be:	9f 81       	ldd	r25, Y+7	; 0x07
    13c0:	83 30       	cpi	r24, 0x03	; 3
    13c2:	91 05       	cpc	r25, r1
    13c4:	e9 f1       	breq	.+122    	; 0x1440 <SetPinMode+0xe8>
    13c6:	c7 c0       	rjmp	.+398    	; 0x1556 <SetPinMode+0x1fe>
			{
			case PORTA:	SET_BIT(DDRA_REG,PinId);break;
    13c8:	aa e3       	ldi	r26, 0x3A	; 58
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ea e3       	ldi	r30, 0x3A	; 58
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <SetPinMode+0x8e>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <SetPinMode+0x8a>
    13ea:	84 2b       	or	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	b3 c0       	rjmp	.+358    	; 0x1556 <SetPinMode+0x1fe>
			case PORTB:	SET_BIT(DDRB_REG,PinId);break;
    13f0:	a7 e3       	ldi	r26, 0x37	; 55
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e7 e3       	ldi	r30, 0x37	; 55
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <SetPinMode+0xb6>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <SetPinMode+0xb2>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	9f c0       	rjmp	.+318    	; 0x1556 <SetPinMode+0x1fe>
			case PORTC:	SET_BIT(DDRC_REG,PinId);break;
    1418:	a4 e3       	ldi	r26, 0x34	; 52
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e4 e3       	ldi	r30, 0x34	; 52
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <SetPinMode+0xde>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <SetPinMode+0xda>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	8b c0       	rjmp	.+278    	; 0x1556 <SetPinMode+0x1fe>
			case PORTD:	SET_BIT(DDRD_REG,PinId);break;
    1440:	a1 e3       	ldi	r26, 0x31	; 49
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e1 e3       	ldi	r30, 0x31	; 49
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <SetPinMode+0x106>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <SetPinMode+0x102>
    1462:	84 2b       	or	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	77 c0       	rjmp	.+238    	; 0x1556 <SetPinMode+0x1fe>
			}
		}
		else if(PinMode == INPUT)
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	88 23       	and	r24, r24
    146c:	09 f0       	breq	.+2      	; 0x1470 <SetPinMode+0x118>
    146e:	73 c0       	rjmp	.+230    	; 0x1556 <SetPinMode+0x1fe>
		{
			switch(PortId)
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3d 83       	std	Y+5, r19	; 0x05
    1478:	2c 83       	std	Y+4, r18	; 0x04
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	59 f1       	breq	.+86     	; 0x14da <SetPinMode+0x182>
    1484:	2c 81       	ldd	r18, Y+4	; 0x04
    1486:	3d 81       	ldd	r19, Y+5	; 0x05
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	2c f4       	brge	.+10     	; 0x1498 <SetPinMode+0x140>
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	69 f0       	breq	.+26     	; 0x14b0 <SetPinMode+0x158>
    1496:	5f c0       	rjmp	.+190    	; 0x1556 <SetPinMode+0x1fe>
    1498:	2c 81       	ldd	r18, Y+4	; 0x04
    149a:	3d 81       	ldd	r19, Y+5	; 0x05
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	89 f1       	breq	.+98     	; 0x1504 <SetPinMode+0x1ac>
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <SetPinMode+0x156>
    14ac:	40 c0       	rjmp	.+128    	; 0x152e <SetPinMode+0x1d6>
    14ae:	53 c0       	rjmp	.+166    	; 0x1556 <SetPinMode+0x1fe>
			{
			case PORTA:	CLR_BIT(DDRA_REG,PinId);break;
    14b0:	aa e3       	ldi	r26, 0x3A	; 58
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	ea e3       	ldi	r30, 0x3A	; 58
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <SetPinMode+0x176>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <SetPinMode+0x172>
    14d2:	80 95       	com	r24
    14d4:	84 23       	and	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	3e c0       	rjmp	.+124    	; 0x1556 <SetPinMode+0x1fe>
			case PORTB:	CLR_BIT(DDRB_REG,PinId);break;
    14da:	a7 e3       	ldi	r26, 0x37	; 55
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e7 e3       	ldi	r30, 0x37	; 55
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <SetPinMode+0x1a0>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <SetPinMode+0x19c>
    14fc:	80 95       	com	r24
    14fe:	84 23       	and	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	29 c0       	rjmp	.+82     	; 0x1556 <SetPinMode+0x1fe>
			case PORTC:	CLR_BIT(DDRC_REG,PinId);break;
    1504:	a4 e3       	ldi	r26, 0x34	; 52
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e4 e3       	ldi	r30, 0x34	; 52
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <SetPinMode+0x1ca>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <SetPinMode+0x1c6>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <SetPinMode+0x1fe>
			case PORTD:	CLR_BIT(DDRD_REG,PinId);break;
    152e:	a1 e3       	ldi	r26, 0x31	; 49
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e1 e3       	ldi	r30, 0x31	; 49
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <SetPinMode+0x1f4>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <SetPinMode+0x1f0>
    1550:	80 95       	com	r24
    1552:	84 23       	and	r24, r20
    1554:	8c 93       	st	X, r24
	}
		else
		{
			//report error massage
		}
}
    1556:	27 96       	adiw	r28, 0x07	; 7
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <SetPortValue>:


void SetPortValue(u8 PortId,u8 PortValue)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	28 97       	sbiw	r28, 0x08	; 8
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId <= PORTD)
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	84 30       	cpi	r24, 0x04	; 4
    1584:	08 f0       	brcs	.+2      	; 0x1588 <SetPortValue+0x20>
    1586:	9a c0       	rjmp	.+308    	; 0x16bc <SetPortValue+0x154>
	{
		if(PortValue == HIGH)
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	99 f5       	brne	.+102    	; 0x15f4 <SetPortValue+0x8c>
		{
			switch(PortId)
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	38 87       	std	Y+8, r19	; 0x08
    1596:	2f 83       	std	Y+7, r18	; 0x07
    1598:	8f 81       	ldd	r24, Y+7	; 0x07
    159a:	98 85       	ldd	r25, Y+8	; 0x08
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	d1 f0       	breq	.+52     	; 0x15d6 <SetPortValue+0x6e>
    15a2:	2f 81       	ldd	r18, Y+7	; 0x07
    15a4:	38 85       	ldd	r19, Y+8	; 0x08
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <SetPortValue+0x4e>
    15ac:	8f 81       	ldd	r24, Y+7	; 0x07
    15ae:	98 85       	ldd	r25, Y+8	; 0x08
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	61 f0       	breq	.+24     	; 0x15cc <SetPortValue+0x64>
    15b4:	83 c0       	rjmp	.+262    	; 0x16bc <SetPortValue+0x154>
    15b6:	2f 81       	ldd	r18, Y+7	; 0x07
    15b8:	38 85       	ldd	r19, Y+8	; 0x08
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	81 f0       	breq	.+32     	; 0x15e0 <SetPortValue+0x78>
    15c0:	8f 81       	ldd	r24, Y+7	; 0x07
    15c2:	98 85       	ldd	r25, Y+8	; 0x08
    15c4:	83 30       	cpi	r24, 0x03	; 3
    15c6:	91 05       	cpc	r25, r1
    15c8:	81 f0       	breq	.+32     	; 0x15ea <SetPortValue+0x82>
    15ca:	78 c0       	rjmp	.+240    	; 0x16bc <SetPortValue+0x154>
			{
			case PORTA:	SET_REG(PORTA_REG);break;
    15cc:	eb e3       	ldi	r30, 0x3B	; 59
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	80 83       	st	Z, r24
    15d4:	73 c0       	rjmp	.+230    	; 0x16bc <SetPortValue+0x154>
			case PORTB:	SET_REG(PORTB_REG);break;
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	8f ef       	ldi	r24, 0xFF	; 255
    15dc:	80 83       	st	Z, r24
    15de:	6e c0       	rjmp	.+220    	; 0x16bc <SetPortValue+0x154>
			case PORTC:	SET_REG(PORTC_REG);break;
    15e0:	e5 e3       	ldi	r30, 0x35	; 53
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8f ef       	ldi	r24, 0xFF	; 255
    15e6:	80 83       	st	Z, r24
    15e8:	69 c0       	rjmp	.+210    	; 0x16bc <SetPortValue+0x154>
			case PORTD: SET_REG(PORTD_REG);break;
    15ea:	e2 e3       	ldi	r30, 0x32	; 50
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	80 83       	st	Z, r24
    15f2:	64 c0       	rjmp	.+200    	; 0x16bc <SetPortValue+0x154>
			}
		}
		else if(PortValue == LOW)
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	88 23       	and	r24, r24
    15f8:	79 f5       	brne	.+94     	; 0x1658 <SetPortValue+0xf0>
		{
			switch(PortId)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3e 83       	std	Y+6, r19	; 0x06
    1602:	2d 83       	std	Y+5, r18	; 0x05
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	9e 81       	ldd	r25, Y+6	; 0x06
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	c9 f0       	breq	.+50     	; 0x1640 <SetPortValue+0xd8>
    160e:	2d 81       	ldd	r18, Y+5	; 0x05
    1610:	3e 81       	ldd	r19, Y+6	; 0x06
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	2c f4       	brge	.+10     	; 0x1622 <SetPortValue+0xba>
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	61 f0       	breq	.+24     	; 0x1638 <SetPortValue+0xd0>
    1620:	4d c0       	rjmp	.+154    	; 0x16bc <SetPortValue+0x154>
    1622:	2d 81       	ldd	r18, Y+5	; 0x05
    1624:	3e 81       	ldd	r19, Y+6	; 0x06
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	71 f0       	breq	.+28     	; 0x1648 <SetPortValue+0xe0>
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	91 05       	cpc	r25, r1
    1634:	69 f0       	breq	.+26     	; 0x1650 <SetPortValue+0xe8>
    1636:	42 c0       	rjmp	.+132    	; 0x16bc <SetPortValue+0x154>
			{
			case PORTA:	CLR_REG(PORTA_REG);break;
    1638:	eb e3       	ldi	r30, 0x3B	; 59
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	10 82       	st	Z, r1
    163e:	3e c0       	rjmp	.+124    	; 0x16bc <SetPortValue+0x154>
			case PORTB:	CLR_REG(PORTB_REG);break;
    1640:	e8 e3       	ldi	r30, 0x38	; 56
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	10 82       	st	Z, r1
    1646:	3a c0       	rjmp	.+116    	; 0x16bc <SetPortValue+0x154>
			case PORTC:	CLR_REG(PORTC_REG);break;
    1648:	e5 e3       	ldi	r30, 0x35	; 53
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	10 82       	st	Z, r1
    164e:	36 c0       	rjmp	.+108    	; 0x16bc <SetPortValue+0x154>
			case PORTD: CLR_REG(PORTD_REG);break;
    1650:	e2 e3       	ldi	r30, 0x32	; 50
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	10 82       	st	Z, r1
    1656:	32 c0       	rjmp	.+100    	; 0x16bc <SetPortValue+0x154>
			}
		}
		else
		{
			switch(PortId)
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	3c 83       	std	Y+4, r19	; 0x04
    1660:	2b 83       	std	Y+3, r18	; 0x03
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	d1 f0       	breq	.+52     	; 0x16a0 <SetPortValue+0x138>
    166c:	2b 81       	ldd	r18, Y+3	; 0x03
    166e:	3c 81       	ldd	r19, Y+4	; 0x04
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	2c f4       	brge	.+10     	; 0x1680 <SetPortValue+0x118>
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	61 f0       	breq	.+24     	; 0x1696 <SetPortValue+0x12e>
    167e:	1e c0       	rjmp	.+60     	; 0x16bc <SetPortValue+0x154>
    1680:	2b 81       	ldd	r18, Y+3	; 0x03
    1682:	3c 81       	ldd	r19, Y+4	; 0x04
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	81 f0       	breq	.+32     	; 0x16aa <SetPortValue+0x142>
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	91 05       	cpc	r25, r1
    1692:	81 f0       	breq	.+32     	; 0x16b4 <SetPortValue+0x14c>
    1694:	13 c0       	rjmp	.+38     	; 0x16bc <SetPortValue+0x154>
			{
				case PORTA:	ASSIGN_REG(PORTA_REG,PortValue);break;
    1696:	eb e3       	ldi	r30, 0x3B	; 59
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	80 83       	st	Z, r24
    169e:	0e c0       	rjmp	.+28     	; 0x16bc <SetPortValue+0x154>
				case PORTB:	ASSIGN_REG(PORTB_REG,PortValue);break;
    16a0:	e8 e3       	ldi	r30, 0x38	; 56
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	80 83       	st	Z, r24
    16a8:	09 c0       	rjmp	.+18     	; 0x16bc <SetPortValue+0x154>
				case PORTC:	ASSIGN_REG(PORTC_REG,PortValue);break;
    16aa:	e5 e3       	ldi	r30, 0x35	; 53
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	80 83       	st	Z, r24
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <SetPortValue+0x154>
				case PORTD: ASSIGN_REG(PORTD_REG,PortValue);break;
    16b4:	e2 e3       	ldi	r30, 0x32	; 50
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	80 83       	st	Z, r24
	}
	else
	{
		//report error massage
	}
}
    16bc:	28 96       	adiw	r28, 0x08	; 8
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <SetPortMode>:

void SetPortMode(u8 PortId,u8 PortMode)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	28 97       	sbiw	r28, 0x08	; 8
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId <= PORTD)
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	84 30       	cpi	r24, 0x04	; 4
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <SetPortMode+0x20>
    16ec:	9a c0       	rjmp	.+308    	; 0x1822 <SetPortMode+0x154>
	{
		if(PortMode == OUTPUT)
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	99 f5       	brne	.+102    	; 0x175a <SetPortMode+0x8c>
		{
			switch(PortId)
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	38 87       	std	Y+8, r19	; 0x08
    16fc:	2f 83       	std	Y+7, r18	; 0x07
    16fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1700:	98 85       	ldd	r25, Y+8	; 0x08
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
    1706:	d1 f0       	breq	.+52     	; 0x173c <SetPortMode+0x6e>
    1708:	2f 81       	ldd	r18, Y+7	; 0x07
    170a:	38 85       	ldd	r19, Y+8	; 0x08
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	2c f4       	brge	.+10     	; 0x171c <SetPortMode+0x4e>
    1712:	8f 81       	ldd	r24, Y+7	; 0x07
    1714:	98 85       	ldd	r25, Y+8	; 0x08
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	61 f0       	breq	.+24     	; 0x1732 <SetPortMode+0x64>
    171a:	83 c0       	rjmp	.+262    	; 0x1822 <SetPortMode+0x154>
    171c:	2f 81       	ldd	r18, Y+7	; 0x07
    171e:	38 85       	ldd	r19, Y+8	; 0x08
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	81 f0       	breq	.+32     	; 0x1746 <SetPortMode+0x78>
    1726:	8f 81       	ldd	r24, Y+7	; 0x07
    1728:	98 85       	ldd	r25, Y+8	; 0x08
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	81 f0       	breq	.+32     	; 0x1750 <SetPortMode+0x82>
    1730:	78 c0       	rjmp	.+240    	; 0x1822 <SetPortMode+0x154>
			{
			case PORTA:	SET_REG(DDRA_REG);break;
    1732:	ea e3       	ldi	r30, 0x3A	; 58
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	8f ef       	ldi	r24, 0xFF	; 255
    1738:	80 83       	st	Z, r24
    173a:	73 c0       	rjmp	.+230    	; 0x1822 <SetPortMode+0x154>
			case PORTB:	SET_REG(DDRB_REG);break;
    173c:	e7 e3       	ldi	r30, 0x37	; 55
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	8f ef       	ldi	r24, 0xFF	; 255
    1742:	80 83       	st	Z, r24
    1744:	6e c0       	rjmp	.+220    	; 0x1822 <SetPortMode+0x154>
			case PORTC:	SET_REG(DDRC_REG);break;
    1746:	e4 e3       	ldi	r30, 0x34	; 52
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	8f ef       	ldi	r24, 0xFF	; 255
    174c:	80 83       	st	Z, r24
    174e:	69 c0       	rjmp	.+210    	; 0x1822 <SetPortMode+0x154>
			case PORTD: SET_REG(DDRD_REG);break;
    1750:	e1 e3       	ldi	r30, 0x31	; 49
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8f ef       	ldi	r24, 0xFF	; 255
    1756:	80 83       	st	Z, r24
    1758:	64 c0       	rjmp	.+200    	; 0x1822 <SetPortMode+0x154>
			}
		}
		else if(PortMode == INPUT)
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	88 23       	and	r24, r24
    175e:	79 f5       	brne	.+94     	; 0x17be <SetPortMode+0xf0>
		{
			switch(PortId)
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	3e 83       	std	Y+6, r19	; 0x06
    1768:	2d 83       	std	Y+5, r18	; 0x05
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	91 05       	cpc	r25, r1
    1772:	c9 f0       	breq	.+50     	; 0x17a6 <SetPortMode+0xd8>
    1774:	2d 81       	ldd	r18, Y+5	; 0x05
    1776:	3e 81       	ldd	r19, Y+6	; 0x06
    1778:	22 30       	cpi	r18, 0x02	; 2
    177a:	31 05       	cpc	r19, r1
    177c:	2c f4       	brge	.+10     	; 0x1788 <SetPortMode+0xba>
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	61 f0       	breq	.+24     	; 0x179e <SetPortMode+0xd0>
    1786:	4d c0       	rjmp	.+154    	; 0x1822 <SetPortMode+0x154>
    1788:	2d 81       	ldd	r18, Y+5	; 0x05
    178a:	3e 81       	ldd	r19, Y+6	; 0x06
    178c:	22 30       	cpi	r18, 0x02	; 2
    178e:	31 05       	cpc	r19, r1
    1790:	71 f0       	breq	.+28     	; 0x17ae <SetPortMode+0xe0>
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	9e 81       	ldd	r25, Y+6	; 0x06
    1796:	83 30       	cpi	r24, 0x03	; 3
    1798:	91 05       	cpc	r25, r1
    179a:	69 f0       	breq	.+26     	; 0x17b6 <SetPortMode+0xe8>
    179c:	42 c0       	rjmp	.+132    	; 0x1822 <SetPortMode+0x154>
			{
			case PORTA:	CLR_REG(DDRA_REG);break;
    179e:	ea e3       	ldi	r30, 0x3A	; 58
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	10 82       	st	Z, r1
    17a4:	3e c0       	rjmp	.+124    	; 0x1822 <SetPortMode+0x154>
			case PORTB:	CLR_REG(DDRB_REG);break;
    17a6:	e7 e3       	ldi	r30, 0x37	; 55
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	10 82       	st	Z, r1
    17ac:	3a c0       	rjmp	.+116    	; 0x1822 <SetPortMode+0x154>
			case PORTC:	CLR_REG(DDRC_REG);break;
    17ae:	e4 e3       	ldi	r30, 0x34	; 52
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	10 82       	st	Z, r1
    17b4:	36 c0       	rjmp	.+108    	; 0x1822 <SetPortMode+0x154>
			case PORTD: CLR_REG(DDRD_REG);break;
    17b6:	e1 e3       	ldi	r30, 0x31	; 49
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	10 82       	st	Z, r1
    17bc:	32 c0       	rjmp	.+100    	; 0x1822 <SetPortMode+0x154>
			}
		}
		else
		{
			switch(PortId)
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3c 83       	std	Y+4, r19	; 0x04
    17c6:	2b 83       	std	Y+3, r18	; 0x03
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	91 05       	cpc	r25, r1
    17d0:	d1 f0       	breq	.+52     	; 0x1806 <SetPortMode+0x138>
    17d2:	2b 81       	ldd	r18, Y+3	; 0x03
    17d4:	3c 81       	ldd	r19, Y+4	; 0x04
    17d6:	22 30       	cpi	r18, 0x02	; 2
    17d8:	31 05       	cpc	r19, r1
    17da:	2c f4       	brge	.+10     	; 0x17e6 <SetPortMode+0x118>
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	61 f0       	breq	.+24     	; 0x17fc <SetPortMode+0x12e>
    17e4:	1e c0       	rjmp	.+60     	; 0x1822 <SetPortMode+0x154>
    17e6:	2b 81       	ldd	r18, Y+3	; 0x03
    17e8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ea:	22 30       	cpi	r18, 0x02	; 2
    17ec:	31 05       	cpc	r19, r1
    17ee:	81 f0       	breq	.+32     	; 0x1810 <SetPortMode+0x142>
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	91 05       	cpc	r25, r1
    17f8:	81 f0       	breq	.+32     	; 0x181a <SetPortMode+0x14c>
    17fa:	13 c0       	rjmp	.+38     	; 0x1822 <SetPortMode+0x154>
			{
				case PORTA:	ASSIGN_REG(DDRA_REG,PortMode);break;
    17fc:	ea e3       	ldi	r30, 0x3A	; 58
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	80 83       	st	Z, r24
    1804:	0e c0       	rjmp	.+28     	; 0x1822 <SetPortMode+0x154>
				case PORTB:	ASSIGN_REG(DDRA_REG,PortMode);break;
    1806:	ea e3       	ldi	r30, 0x3A	; 58
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	80 83       	st	Z, r24
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <SetPortMode+0x154>
				case PORTC:	ASSIGN_REG(DDRA_REG,PortMode);break;
    1810:	ea e3       	ldi	r30, 0x3A	; 58
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	80 83       	st	Z, r24
    1818:	04 c0       	rjmp	.+8      	; 0x1822 <SetPortMode+0x154>
				case PORTD: ASSIGN_REG(DDRA_REG,PortMode);break;
    181a:	ea e3       	ldi	r30, 0x3A	; 58
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	80 83       	st	Z, r24
	}
	else
	{
		//report error massage
	}
}
    1822:	28 96       	adiw	r28, 0x08	; 8
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <GetPinValue>:

u8 GetPinValue(u8 PinId,u8 PortId)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <GetPinValue+0x6>
    183a:	00 d0       	rcall	.+0      	; 0x183c <GetPinValue+0x8>
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	8a 83       	std	Y+2, r24	; 0x02
    1844:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	if(PinId <= PIN7 && PortId <= PORTD)
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	88 30       	cpi	r24, 0x08	; 8
    184a:	08 f0       	brcs	.+2      	; 0x184e <GetPinValue+0x1a>
    184c:	6b c0       	rjmp	.+214    	; 0x1924 <GetPinValue+0xf0>
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	84 30       	cpi	r24, 0x04	; 4
    1852:	08 f0       	brcs	.+2      	; 0x1856 <GetPinValue+0x22>
    1854:	67 c0       	rjmp	.+206    	; 0x1924 <GetPinValue+0xf0>
	{
		switch(PortId)
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	3d 83       	std	Y+5, r19	; 0x05
    185e:	2c 83       	std	Y+4, r18	; 0x04
    1860:	4c 81       	ldd	r20, Y+4	; 0x04
    1862:	5d 81       	ldd	r21, Y+5	; 0x05
    1864:	41 30       	cpi	r20, 0x01	; 1
    1866:	51 05       	cpc	r21, r1
    1868:	41 f1       	breq	.+80     	; 0x18ba <GetPinValue+0x86>
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	82 30       	cpi	r24, 0x02	; 2
    1870:	91 05       	cpc	r25, r1
    1872:	34 f4       	brge	.+12     	; 0x1880 <GetPinValue+0x4c>
    1874:	2c 81       	ldd	r18, Y+4	; 0x04
    1876:	3d 81       	ldd	r19, Y+5	; 0x05
    1878:	21 15       	cp	r18, r1
    187a:	31 05       	cpc	r19, r1
    187c:	61 f0       	breq	.+24     	; 0x1896 <GetPinValue+0x62>
    187e:	52 c0       	rjmp	.+164    	; 0x1924 <GetPinValue+0xf0>
    1880:	4c 81       	ldd	r20, Y+4	; 0x04
    1882:	5d 81       	ldd	r21, Y+5	; 0x05
    1884:	42 30       	cpi	r20, 0x02	; 2
    1886:	51 05       	cpc	r21, r1
    1888:	51 f1       	breq	.+84     	; 0x18de <GetPinValue+0xaa>
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	9d 81       	ldd	r25, Y+5	; 0x05
    188e:	83 30       	cpi	r24, 0x03	; 3
    1890:	91 05       	cpc	r25, r1
    1892:	b9 f1       	breq	.+110    	; 0x1902 <GetPinValue+0xce>
    1894:	47 c0       	rjmp	.+142    	; 0x1924 <GetPinValue+0xf0>
		{
		case PORTA:	value = GET_BIT(PINA_REG,PinId);break;
    1896:	e9 e3       	ldi	r30, 0x39	; 57
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a9 01       	movw	r20, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <GetPinValue+0x7a>
    18aa:	55 95       	asr	r21
    18ac:	47 95       	ror	r20
    18ae:	8a 95       	dec	r24
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <GetPinValue+0x76>
    18b2:	ca 01       	movw	r24, r20
    18b4:	81 70       	andi	r24, 0x01	; 1
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	35 c0       	rjmp	.+106    	; 0x1924 <GetPinValue+0xf0>
		case PORTB:	value = GET_BIT(PINB_REG,PinId);break;
    18ba:	e6 e3       	ldi	r30, 0x36	; 54
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a9 01       	movw	r20, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <GetPinValue+0x9e>
    18ce:	55 95       	asr	r21
    18d0:	47 95       	ror	r20
    18d2:	8a 95       	dec	r24
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <GetPinValue+0x9a>
    18d6:	ca 01       	movw	r24, r20
    18d8:	81 70       	andi	r24, 0x01	; 1
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	23 c0       	rjmp	.+70     	; 0x1924 <GetPinValue+0xf0>
		case PORTC: value = GET_BIT(PINC_REG,PinId);break;
    18de:	e3 e3       	ldi	r30, 0x33	; 51
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a9 01       	movw	r20, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GetPinValue+0xc2>
    18f2:	55 95       	asr	r21
    18f4:	47 95       	ror	r20
    18f6:	8a 95       	dec	r24
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GetPinValue+0xbe>
    18fa:	ca 01       	movw	r24, r20
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	11 c0       	rjmp	.+34     	; 0x1924 <GetPinValue+0xf0>
		case PORTD: value = GET_BIT(PIND_REG,PinId);break;
    1902:	e0 e3       	ldi	r30, 0x30	; 48
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	a9 01       	movw	r20, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <GetPinValue+0xe6>
    1916:	55 95       	asr	r21
    1918:	47 95       	ror	r20
    191a:	8a 95       	dec	r24
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <GetPinValue+0xe2>
    191e:	ca 01       	movw	r24, r20
    1920:	81 70       	andi	r24, 0x01	; 1
    1922:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//report error massage
	}
	return value;
    1924:	89 81       	ldd	r24, Y+1	; 0x01
}
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <LCD_Init>:
#include"DIO.h"
#include"LCD.h"

u8 x = 0;
void LCD_Init(void)
{
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	c6 54       	subi	r28, 0x46	; 70
    1944:	d0 40       	sbci	r29, 0x00	; 0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	fe 01       	movw	r30, r28
    1952:	ed 5b       	subi	r30, 0xBD	; 189
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 ef       	ldi	r26, 0xF0	; 240
    195c:	b1 e4       	ldi	r27, 0x41	; 65
    195e:	80 83       	st	Z, r24
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	a2 83       	std	Z+2, r26	; 0x02
    1964:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1966:	8e 01       	movw	r16, r28
    1968:	01 5c       	subi	r16, 0xC1	; 193
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	fe 01       	movw	r30, r28
    196e:	ed 5b       	subi	r30, 0xBD	; 189
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4a ef       	ldi	r20, 0xFA	; 250
    1980:	54 e4       	ldi	r21, 0x44	; 68
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	f8 01       	movw	r30, r16
    198c:	80 83       	st	Z, r24
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	a2 83       	std	Z+2, r26	; 0x02
    1992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1994:	fe 01       	movw	r30, r28
    1996:	ff 96       	adiw	r30, 0x3f	; 63
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e8       	ldi	r20, 0x80	; 128
    19a6:	5f e3       	ldi	r21, 0x3F	; 63
    19a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ac:	88 23       	and	r24, r24
    19ae:	2c f4       	brge	.+10     	; 0x19ba <LCD_Init+0x84>
		__ticks = 1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9e af       	std	Y+62, r25	; 0x3e
    19b6:	8d af       	std	Y+61, r24	; 0x3d
    19b8:	46 c0       	rjmp	.+140    	; 0x1a46 <LCD_Init+0x110>
	else if (__tmp > 65535)
    19ba:	fe 01       	movw	r30, r28
    19bc:	ff 96       	adiw	r30, 0x3f	; 63
    19be:	60 81       	ld	r22, Z
    19c0:	71 81       	ldd	r23, Z+1	; 0x01
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	3f ef       	ldi	r19, 0xFF	; 255
    19ca:	4f e7       	ldi	r20, 0x7F	; 127
    19cc:	57 e4       	ldi	r21, 0x47	; 71
    19ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	64 f5       	brge	.+88     	; 0x1a2e <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d6:	fe 01       	movw	r30, r28
    19d8:	ed 5b       	subi	r30, 0xBD	; 189
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e2       	ldi	r20, 0x20	; 32
    19ea:	51 e4       	ldi	r21, 0x41	; 65
    19ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	bc 01       	movw	r22, r24
    19f6:	cd 01       	movw	r24, r26
    19f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	9e af       	std	Y+62, r25	; 0x3e
    1a02:	8d af       	std	Y+61, r24	; 0x3d
    1a04:	0f c0       	rjmp	.+30     	; 0x1a24 <LCD_Init+0xee>
    1a06:	88 ec       	ldi	r24, 0xC8	; 200
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9c af       	std	Y+60, r25	; 0x3c
    1a0c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a10:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_Init+0xdc>
    1a16:	9c af       	std	Y+60, r25	; 0x3c
    1a18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	9e af       	std	Y+62, r25	; 0x3e
    1a22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a26:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	69 f7       	brne	.-38     	; 0x1a06 <LCD_Init+0xd0>
    1a2c:	16 c0       	rjmp	.+44     	; 0x1a5a <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2e:	fe 01       	movw	r30, r28
    1a30:	ff 96       	adiw	r30, 0x3f	; 63
    1a32:	60 81       	ld	r22, Z
    1a34:	71 81       	ldd	r23, Z+1	; 0x01
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e af       	std	Y+62, r25	; 0x3e
    1a44:	8d af       	std	Y+61, r24	; 0x3d
    1a46:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a48:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a4a:	9a af       	std	Y+58, r25	; 0x3a
    1a4c:	89 af       	std	Y+57, r24	; 0x39
    1a4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a50:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_Init+0x11c>
    1a56:	9a af       	std	Y+58, r25	; 0x3a
    1a58:	89 af       	std	Y+57, r24	; 0x39
	/*delay 30 ms to ensure That LCD Initialized and power on*/
	_delay_ms(30);
	/*Return Home*/

	/*Function SET (8bit/2-line/5x7 dot character)*/
	LCD_Function_Set();
    1a5a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_Function_Set>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a0 e8       	ldi	r26, 0x80	; 128
    1a64:	bf e3       	ldi	r27, 0x3F	; 63
    1a66:	8d ab       	std	Y+53, r24	; 0x35
    1a68:	9e ab       	std	Y+54, r25	; 0x36
    1a6a:	af ab       	std	Y+55, r26	; 0x37
    1a6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a70:	7e a9       	ldd	r23, Y+54	; 0x36
    1a72:	8f a9       	ldd	r24, Y+55	; 0x37
    1a74:	98 ad       	ldd	r25, Y+56	; 0x38
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4a ef       	ldi	r20, 0xFA	; 250
    1a7c:	54 e4       	ldi	r21, 0x44	; 68
    1a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	89 ab       	std	Y+49, r24	; 0x31
    1a88:	9a ab       	std	Y+50, r25	; 0x32
    1a8a:	ab ab       	std	Y+51, r26	; 0x33
    1a8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a90:	7a a9       	ldd	r23, Y+50	; 0x32
    1a92:	8b a9       	ldd	r24, Y+51	; 0x33
    1a94:	9c a9       	ldd	r25, Y+52	; 0x34
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e8       	ldi	r20, 0x80	; 128
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <LCD_Init+0x17a>
		__ticks = 1;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	98 ab       	std	Y+48, r25	; 0x30
    1aac:	8f a7       	std	Y+47, r24	; 0x2f
    1aae:	3f c0       	rjmp	.+126    	; 0x1b2e <LCD_Init+0x1f8>
	else if (__tmp > 65535)
    1ab0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	3f ef       	ldi	r19, 0xFF	; 255
    1abc:	4f e7       	ldi	r20, 0x7F	; 127
    1abe:	57 e4       	ldi	r21, 0x47	; 71
    1ac0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac4:	18 16       	cp	r1, r24
    1ac6:	4c f5       	brge	.+82     	; 0x1b1a <LCD_Init+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aca:	7e a9       	ldd	r23, Y+54	; 0x36
    1acc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ace:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e2       	ldi	r20, 0x20	; 32
    1ad6:	51 e4       	ldi	r21, 0x41	; 65
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	98 ab       	std	Y+48, r25	; 0x30
    1aee:	8f a7       	std	Y+47, r24	; 0x2f
    1af0:	0f c0       	rjmp	.+30     	; 0x1b10 <LCD_Init+0x1da>
    1af2:	88 ec       	ldi	r24, 0xC8	; 200
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9e a7       	std	Y+46, r25	; 0x2e
    1af8:	8d a7       	std	Y+45, r24	; 0x2d
    1afa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1afc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <LCD_Init+0x1c8>
    1b02:	9e a7       	std	Y+46, r25	; 0x2e
    1b04:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b08:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	98 ab       	std	Y+48, r25	; 0x30
    1b0e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b10:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b12:	98 a9       	ldd	r25, Y+48	; 0x30
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	69 f7       	brne	.-38     	; 0x1af2 <LCD_Init+0x1bc>
    1b18:	14 c0       	rjmp	.+40     	; 0x1b42 <LCD_Init+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b20:	9c a9       	ldd	r25, Y+52	; 0x34
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	98 ab       	std	Y+48, r25	; 0x30
    1b2c:	8f a7       	std	Y+47, r24	; 0x2f
    1b2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b30:	98 a9       	ldd	r25, Y+48	; 0x30
    1b32:	9c a7       	std	Y+44, r25	; 0x2c
    1b34:	8b a7       	std	Y+43, r24	; 0x2b
    1b36:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b38:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <LCD_Init+0x204>
    1b3e:	9c a7       	std	Y+44, r25	; 0x2c
    1b40:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/*Display ON/OFF Control*/
	LCD_Display_Control(ON,ON,ON);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_Display_Control>
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e8       	ldi	r26, 0x80	; 128
    1b52:	bf e3       	ldi	r27, 0x3F	; 63
    1b54:	8f a3       	std	Y+39, r24	; 0x27
    1b56:	98 a7       	std	Y+40, r25	; 0x28
    1b58:	a9 a7       	std	Y+41, r26	; 0x29
    1b5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b60:	89 a5       	ldd	r24, Y+41	; 0x29
    1b62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a ef       	ldi	r20, 0xFA	; 250
    1b6a:	54 e4       	ldi	r21, 0x44	; 68
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8b a3       	std	Y+35, r24	; 0x23
    1b76:	9c a3       	std	Y+36, r25	; 0x24
    1b78:	ad a3       	std	Y+37, r26	; 0x25
    1b7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b80:	8d a1       	ldd	r24, Y+37	; 0x25
    1b82:	9e a1       	ldd	r25, Y+38	; 0x26
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <LCD_Init+0x268>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9a a3       	std	Y+34, r25	; 0x22
    1b9a:	89 a3       	std	Y+33, r24	; 0x21
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <LCD_Init+0x2e6>
	else if (__tmp > 65535)
    1b9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	4c f5       	brge	.+82     	; 0x1c08 <LCD_Init+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bba:	89 a5       	ldd	r24, Y+41	; 0x29
    1bbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e2       	ldi	r20, 0x20	; 32
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9a a3       	std	Y+34, r25	; 0x22
    1bdc:	89 a3       	std	Y+33, r24	; 0x21
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <LCD_Init+0x2c8>
    1be0:	88 ec       	ldi	r24, 0xC8	; 200
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	98 a3       	std	Y+32, r25	; 0x20
    1be6:	8f 8f       	std	Y+31, r24	; 0x1f
    1be8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bea:	98 a1       	ldd	r25, Y+32	; 0x20
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_Init+0x2b6>
    1bf0:	98 a3       	std	Y+32, r25	; 0x20
    1bf2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	9a a3       	std	Y+34, r25	; 0x22
    1bfc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1c00:	9a a1       	ldd	r25, Y+34	; 0x22
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	69 f7       	brne	.-38     	; 0x1be0 <LCD_Init+0x2aa>
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <LCD_Init+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9a a3       	std	Y+34, r25	; 0x22
    1c1a:	89 a3       	std	Y+33, r24	; 0x21
    1c1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c20:	9e 8f       	std	Y+30, r25	; 0x1e
    1c22:	8d 8f       	std	Y+29, r24	; 0x1d
    1c24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_Init+0x2f2>
    1c2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c2e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Clear Screen*/
	LCD_Clear_Screen();
    1c30:	0e 94 c8 19 	call	0x3390	; 0x3390 <LCD_Clear_Screen>
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 e0       	ldi	r26, 0x00	; 0
    1c3a:	b0 e4       	ldi	r27, 0x40	; 64
    1c3c:	89 8f       	std	Y+25, r24	; 0x19
    1c3e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c40:	ab 8f       	std	Y+27, r26	; 0x1b
    1c42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c44:	69 8d       	ldd	r22, Y+25	; 0x19
    1c46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	4a ef       	ldi	r20, 0xFA	; 250
    1c52:	54 e4       	ldi	r21, 0x44	; 68
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	8d 8b       	std	Y+21, r24	; 0x15
    1c5e:	9e 8b       	std	Y+22, r25	; 0x16
    1c60:	af 8b       	std	Y+23, r26	; 0x17
    1c62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c64:	6d 89       	ldd	r22, Y+21	; 0x15
    1c66:	7e 89       	ldd	r23, Y+22	; 0x16
    1c68:	8f 89       	ldd	r24, Y+23	; 0x17
    1c6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c78:	88 23       	and	r24, r24
    1c7a:	2c f4       	brge	.+10     	; 0x1c86 <LCD_Init+0x350>
		__ticks = 1;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9c 8b       	std	Y+20, r25	; 0x14
    1c82:	8b 8b       	std	Y+19, r24	; 0x13
    1c84:	3f c0       	rjmp	.+126    	; 0x1d04 <LCD_Init+0x3ce>
	else if (__tmp > 65535)
    1c86:	6d 89       	ldd	r22, Y+21	; 0x15
    1c88:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	3f ef       	ldi	r19, 0xFF	; 255
    1c92:	4f e7       	ldi	r20, 0x7F	; 127
    1c94:	57 e4       	ldi	r21, 0x47	; 71
    1c96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c9a:	18 16       	cp	r1, r24
    1c9c:	4c f5       	brge	.+82     	; 0x1cf0 <LCD_Init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e2       	ldi	r20, 0x20	; 32
    1cac:	51 e4       	ldi	r21, 0x41	; 65
    1cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	cd 01       	movw	r24, r26
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9c 8b       	std	Y+20, r25	; 0x14
    1cc4:	8b 8b       	std	Y+19, r24	; 0x13
    1cc6:	0f c0       	rjmp	.+30     	; 0x1ce6 <LCD_Init+0x3b0>
    1cc8:	88 ec       	ldi	r24, 0xC8	; 200
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9a 8b       	std	Y+18, r25	; 0x12
    1cce:	89 8b       	std	Y+17, r24	; 0x11
    1cd0:	89 89       	ldd	r24, Y+17	; 0x11
    1cd2:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <LCD_Init+0x39e>
    1cd8:	9a 8b       	std	Y+18, r25	; 0x12
    1cda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cde:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	9c 8b       	std	Y+20, r25	; 0x14
    1ce4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	69 f7       	brne	.-38     	; 0x1cc8 <LCD_Init+0x392>
    1cee:	14 c0       	rjmp	.+40     	; 0x1d18 <LCD_Init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	9c 8b       	std	Y+20, r25	; 0x14
    1d02:	8b 8b       	std	Y+19, r24	; 0x13
    1d04:	8b 89       	ldd	r24, Y+19	; 0x13
    1d06:	9c 89       	ldd	r25, Y+20	; 0x14
    1d08:	98 8b       	std	Y+16, r25	; 0x10
    1d0a:	8f 87       	std	Y+15, r24	; 0x0f
    1d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0e:	98 89       	ldd	r25, Y+16	; 0x10
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_Init+0x3da>
    1d14:	98 8b       	std	Y+16, r25	; 0x10
    1d16:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/*Entry Mode SET*/
	LCD_EntryMode();
    1d18:	0e 94 d5 19 	call	0x33aa	; 0x33aa <LCD_EntryMode>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a0 e8       	ldi	r26, 0x80	; 128
    1d22:	bf e3       	ldi	r27, 0x3F	; 63
    1d24:	8b 87       	std	Y+11, r24	; 0x0b
    1d26:	9c 87       	std	Y+12, r25	; 0x0c
    1d28:	ad 87       	std	Y+13, r26	; 0x0d
    1d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	4a ef       	ldi	r20, 0xFA	; 250
    1d3a:	54 e4       	ldi	r21, 0x44	; 68
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	8f 83       	std	Y+7, r24	; 0x07
    1d46:	98 87       	std	Y+8, r25	; 0x08
    1d48:	a9 87       	std	Y+9, r26	; 0x09
    1d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4e:	78 85       	ldd	r23, Y+8	; 0x08
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e8       	ldi	r20, 0x80	; 128
    1d5a:	5f e3       	ldi	r21, 0x3F	; 63
    1d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d60:	88 23       	and	r24, r24
    1d62:	2c f4       	brge	.+10     	; 0x1d6e <LCD_Init+0x438>
		__ticks = 1;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	3f c0       	rjmp	.+126    	; 0x1dec <LCD_Init+0x4b6>
	else if (__tmp > 65535)
    1d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d70:	78 85       	ldd	r23, Y+8	; 0x08
    1d72:	89 85       	ldd	r24, Y+9	; 0x09
    1d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	3f ef       	ldi	r19, 0xFF	; 255
    1d7a:	4f e7       	ldi	r20, 0x7F	; 127
    1d7c:	57 e4       	ldi	r21, 0x47	; 71
    1d7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d82:	18 16       	cp	r1, r24
    1d84:	4c f5       	brge	.+82     	; 0x1dd8 <LCD_Init+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e2       	ldi	r20, 0x20	; 32
    1d94:	51 e4       	ldi	r21, 0x41	; 65
    1d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	0f c0       	rjmp	.+30     	; 0x1dce <LCD_Init+0x498>
    1db0:	88 ec       	ldi	r24, 0xC8	; 200
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9c 83       	std	Y+4, r25	; 0x04
    1db6:	8b 83       	std	Y+3, r24	; 0x03
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_Init+0x486>
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	69 f7       	brne	.-38     	; 0x1db0 <LCD_Init+0x47a>
    1dd6:	14 c0       	rjmp	.+40     	; 0x1e00 <LCD_Init+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dda:	78 85       	ldd	r23, Y+8	; 0x08
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	8d 83       	std	Y+5, r24	; 0x05
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <LCD_Init+0x4c2>
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	x = 1;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	80 93 9e 01 	sts	0x019E, r24

}
    1e06:	ca 5b       	subi	r28, 0xBA	; 186
    1e08:	df 4f       	sbci	r29, 0xFF	; 255
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	08 95       	ret

00001e1e <LCD_Write_Cmd>:
void LCD_Write_Cmd(u8 cmd)
{
    1e1e:	0f 93       	push	r16
    1e20:	1f 93       	push	r17
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	cf 56       	subi	r28, 0x6F	; 111
    1e2c:	d0 40       	sbci	r29, 0x00	; 0
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e1 59       	subi	r30, 0x91	; 145
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 83       	st	Z, r24
	/*Set RS Pin to LOW*/
	SetPinValue(RS,Control_Port,LOW);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	63 e0       	ldi	r22, 0x03	; 3
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
	/*Set RW Pin to LOW*/
	SetPinValue(RW,Control_Port,LOW);
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	63 e0       	ldi	r22, 0x03	; 3
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>

	/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
	SetPinValue(PIN4,Data_Port,GET_BIT(cmd,4));
    1e54:	fe 01       	movw	r30, r28
    1e56:	e1 59       	subi	r30, 0x91	; 145
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	82 95       	swap	r24
    1e5e:	8f 70       	andi	r24, 0x0F	; 15
    1e60:	98 2f       	mov	r25, r24
    1e62:	91 70       	andi	r25, 0x01	; 1
    1e64:	84 e0       	ldi	r24, 0x04	; 4
    1e66:	62 e0       	ldi	r22, 0x02	; 2
    1e68:	49 2f       	mov	r20, r25
    1e6a:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
	SetPinValue(PIN5,Data_Port,GET_BIT(cmd,5));
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e1 59       	subi	r30, 0x91	; 145
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	82 95       	swap	r24
    1e78:	86 95       	lsr	r24
    1e7a:	87 70       	andi	r24, 0x07	; 7
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	91 70       	andi	r25, 0x01	; 1
    1e80:	85 e0       	ldi	r24, 0x05	; 5
    1e82:	62 e0       	ldi	r22, 0x02	; 2
    1e84:	49 2f       	mov	r20, r25
    1e86:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
	SetPinValue(PIN6,Data_Port,GET_BIT(cmd,6));
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e1 59       	subi	r30, 0x91	; 145
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	82 95       	swap	r24
    1e94:	86 95       	lsr	r24
    1e96:	86 95       	lsr	r24
    1e98:	83 70       	andi	r24, 0x03	; 3
    1e9a:	98 2f       	mov	r25, r24
    1e9c:	91 70       	andi	r25, 0x01	; 1
    1e9e:	86 e0       	ldi	r24, 0x06	; 6
    1ea0:	62 e0       	ldi	r22, 0x02	; 2
    1ea2:	49 2f       	mov	r20, r25
    1ea4:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
	SetPinValue(PIN7,Data_Port,GET_BIT(cmd,7));
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e1 59       	subi	r30, 0x91	; 145
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 81       	ld	r24, Z
    1eb0:	98 2f       	mov	r25, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	99 27       	eor	r25, r25
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	87 e0       	ldi	r24, 0x07	; 7
    1eba:	62 e0       	ldi	r22, 0x02	; 2
    1ebc:	49 2f       	mov	r20, r25
    1ebe:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>

	/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
	SetPinValue(E,Control_Port,HIGH);
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	63 e0       	ldi	r22, 0x03	; 3
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e5 59       	subi	r30, 0x95	; 149
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a0 e8       	ldi	r26, 0x80	; 128
    1ed8:	bf e3       	ldi	r27, 0x3F	; 63
    1eda:	80 83       	st	Z, r24
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	a2 83       	std	Z+2, r26	; 0x02
    1ee0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ee2:	8e 01       	movw	r16, r28
    1ee4:	09 59       	subi	r16, 0x99	; 153
    1ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e5 59       	subi	r30, 0x95	; 149
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	2b ea       	ldi	r18, 0xAB	; 171
    1ef8:	3a ea       	ldi	r19, 0xAA	; 170
    1efa:	4a e2       	ldi	r20, 0x2A	; 42
    1efc:	50 e4       	ldi	r21, 0x40	; 64
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	f8 01       	movw	r30, r16
    1f08:	80 83       	st	Z, r24
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	a2 83       	std	Z+2, r26	; 0x02
    1f0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f10:	fe 01       	movw	r30, r28
    1f12:	e9 59       	subi	r30, 0x99	; 153
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	34 f4       	brge	.+12     	; 0x1f3a <LCD_Write_Cmd+0x11c>
		__ticks = 1;
    1f2e:	fe 01       	movw	r30, r28
    1f30:	ea 59       	subi	r30, 0x9A	; 154
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 83       	st	Z, r24
    1f38:	e0 c0       	rjmp	.+448    	; 0x20fa <LCD_Write_Cmd+0x2dc>
	else if (__tmp > 255)
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e9 59       	subi	r30, 0x99	; 153
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4f e7       	ldi	r20, 0x7F	; 127
    1f4e:	53 e4       	ldi	r21, 0x43	; 67
    1f50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f54:	18 16       	cp	r1, r24
    1f56:	0c f0       	brlt	.+2      	; 0x1f5a <LCD_Write_Cmd+0x13c>
    1f58:	c0 c0       	rjmp	.+384    	; 0x20da <LCD_Write_Cmd+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e5 59       	subi	r30, 0x95	; 149
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a e7       	ldi	r20, 0x7A	; 122
    1f6e:	54 e4       	ldi	r21, 0x44	; 68
    1f70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ee 59       	subi	r30, 0x9E	; 158
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 83       	st	Z, r24
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	a2 83       	std	Z+2, r26	; 0x02
    1f84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f86:	8e 01       	movw	r16, r28
    1f88:	02 5a       	subi	r16, 0xA2	; 162
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ee 59       	subi	r30, 0x9E	; 158
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	4a ef       	ldi	r20, 0xFA	; 250
    1fa0:	54 e4       	ldi	r21, 0x44	; 68
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	f8 01       	movw	r30, r16
    1fac:	80 83       	st	Z, r24
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	a2 83       	std	Z+2, r26	; 0x02
    1fb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e2 5a       	subi	r30, 0xA2	; 162
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	60 81       	ld	r22, Z
    1fbc:	71 81       	ldd	r23, Z+1	; 0x01
    1fbe:	82 81       	ldd	r24, Z+2	; 0x02
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	44 f4       	brge	.+16     	; 0x1fe2 <LCD_Write_Cmd+0x1c4>
		__ticks = 1;
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e4 5a       	subi	r30, 0xA4	; 164
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
    1fe0:	64 c0       	rjmp	.+200    	; 0x20aa <LCD_Write_Cmd+0x28c>
	else if (__tmp > 65535)
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e2 5a       	subi	r30, 0xA2	; 162
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	0c f0       	brlt	.+2      	; 0x2002 <LCD_Write_Cmd+0x1e4>
    2000:	43 c0       	rjmp	.+134    	; 0x2088 <LCD_Write_Cmd+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2002:	fe 01       	movw	r30, r28
    2004:	ee 59       	subi	r30, 0x9E	; 158
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8e 01       	movw	r16, r28
    2022:	04 5a       	subi	r16, 0xA4	; 164
    2024:	1f 4f       	sbci	r17, 0xFF	; 255
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	f8 01       	movw	r30, r16
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
    2038:	1f c0       	rjmp	.+62     	; 0x2078 <LCD_Write_Cmd+0x25a>
    203a:	fe 01       	movw	r30, r28
    203c:	e6 5a       	subi	r30, 0xA6	; 166
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	80 83       	st	Z, r24
    2048:	fe 01       	movw	r30, r28
    204a:	e6 5a       	subi	r30, 0xA6	; 166
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_Write_Cmd+0x234>
    2056:	fe 01       	movw	r30, r28
    2058:	e6 5a       	subi	r30, 0xA6	; 166
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	de 01       	movw	r26, r28
    2062:	a4 5a       	subi	r26, 0xA4	; 164
    2064:	bf 4f       	sbci	r27, 0xFF	; 255
    2066:	fe 01       	movw	r30, r28
    2068:	e4 5a       	subi	r30, 0xA4	; 164
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	91 81       	ldd	r25, Z+1	; 0x01
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	11 96       	adiw	r26, 0x01	; 1
    2074:	9c 93       	st	X, r25
    2076:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	fe 01       	movw	r30, r28
    207a:	e4 5a       	subi	r30, 0xA4	; 164
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	d1 f6       	brne	.-76     	; 0x203a <LCD_Write_Cmd+0x21c>
    2086:	4b c0       	rjmp	.+150    	; 0x211e <LCD_Write_Cmd+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	8e 01       	movw	r16, r28
    208a:	04 5a       	subi	r16, 0xA4	; 164
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	fe 01       	movw	r30, r28
    2090:	e2 5a       	subi	r30, 0xA2	; 162
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	f8 01       	movw	r30, r16
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
    20aa:	de 01       	movw	r26, r28
    20ac:	a8 5a       	subi	r26, 0xA8	; 168
    20ae:	bf 4f       	sbci	r27, 0xFF	; 255
    20b0:	fe 01       	movw	r30, r28
    20b2:	e4 5a       	subi	r30, 0xA4	; 164
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	11 96       	adiw	r26, 0x01	; 1
    20bc:	9c 93       	st	X, r25
    20be:	8e 93       	st	-X, r24
    20c0:	fe 01       	movw	r30, r28
    20c2:	e8 5a       	subi	r30, 0xA8	; 168
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_Write_Cmd+0x2ac>
    20ce:	fe 01       	movw	r30, r28
    20d0:	e8 5a       	subi	r30, 0xA8	; 168
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
    20d8:	22 c0       	rjmp	.+68     	; 0x211e <LCD_Write_Cmd+0x300>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20da:	8e 01       	movw	r16, r28
    20dc:	0a 59       	subi	r16, 0x9A	; 154
    20de:	1f 4f       	sbci	r17, 0xFF	; 255
    20e0:	fe 01       	movw	r30, r28
    20e2:	e9 59       	subi	r30, 0x99	; 153
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	f8 01       	movw	r30, r16
    20f8:	80 83       	st	Z, r24
    20fa:	de 01       	movw	r26, r28
    20fc:	a9 5a       	subi	r26, 0xA9	; 169
    20fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2100:	fe 01       	movw	r30, r28
    2102:	ea 59       	subi	r30, 0x9A	; 154
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 81       	ld	r24, Z
    2108:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    210a:	fe 01       	movw	r30, r28
    210c:	e9 5a       	subi	r30, 0xA9	; 169
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 81       	ld	r24, Z
    2112:	8a 95       	dec	r24
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LCD_Write_Cmd+0x2f4>
    2116:	fe 01       	movw	r30, r28
    2118:	e9 5a       	subi	r30, 0xA9	; 169
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 83       	st	Z, r24
	_delay_us(1);
	SetPinValue(E,Control_Port,LOW);
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	63 e0       	ldi	r22, 0x03	; 3
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
    2128:	fe 01       	movw	r30, r28
    212a:	ed 5a       	subi	r30, 0xAD	; 173
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e8       	ldi	r26, 0x80	; 128
    2134:	bf e3       	ldi	r27, 0x3F	; 63
    2136:	80 83       	st	Z, r24
    2138:	91 83       	std	Z+1, r25	; 0x01
    213a:	a2 83       	std	Z+2, r26	; 0x02
    213c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    213e:	8e 01       	movw	r16, r28
    2140:	01 5b       	subi	r16, 0xB1	; 177
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	fe 01       	movw	r30, r28
    2146:	ed 5a       	subi	r30, 0xAD	; 173
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	2b ea       	ldi	r18, 0xAB	; 171
    2154:	3a ea       	ldi	r19, 0xAA	; 170
    2156:	4a e2       	ldi	r20, 0x2A	; 42
    2158:	50 e4       	ldi	r21, 0x40	; 64
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	f8 01       	movw	r30, r16
    2164:	80 83       	st	Z, r24
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	a2 83       	std	Z+2, r26	; 0x02
    216a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    216c:	fe 01       	movw	r30, r28
    216e:	e1 5b       	subi	r30, 0xB1	; 177
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	60 81       	ld	r22, Z
    2174:	71 81       	ldd	r23, Z+1	; 0x01
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e8       	ldi	r20, 0x80	; 128
    2180:	5f e3       	ldi	r21, 0x3F	; 63
    2182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2186:	88 23       	and	r24, r24
    2188:	34 f4       	brge	.+12     	; 0x2196 <LCD_Write_Cmd+0x378>
		__ticks = 1;
    218a:	fe 01       	movw	r30, r28
    218c:	e2 5b       	subi	r30, 0xB2	; 178
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	80 83       	st	Z, r24
    2194:	e0 c0       	rjmp	.+448    	; 0x2356 <LCD_Write_Cmd+0x538>
	else if (__tmp > 255)
    2196:	fe 01       	movw	r30, r28
    2198:	e1 5b       	subi	r30, 0xB1	; 177
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	53 e4       	ldi	r21, 0x43	; 67
    21ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	0c f0       	brlt	.+2      	; 0x21b6 <LCD_Write_Cmd+0x398>
    21b4:	c0 c0       	rjmp	.+384    	; 0x2336 <LCD_Write_Cmd+0x518>
	{
		_delay_ms(__us / 1000.0);
    21b6:	fe 01       	movw	r30, r28
    21b8:	ed 5a       	subi	r30, 0xAD	; 173
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	60 81       	ld	r22, Z
    21be:	71 81       	ldd	r23, Z+1	; 0x01
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a e7       	ldi	r20, 0x7A	; 122
    21ca:	54 e4       	ldi	r21, 0x44	; 68
    21cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	fe 01       	movw	r30, r28
    21d6:	e6 5b       	subi	r30, 0xB6	; 182
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 83       	st	Z, r24
    21dc:	91 83       	std	Z+1, r25	; 0x01
    21de:	a2 83       	std	Z+2, r26	; 0x02
    21e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e2:	8e 01       	movw	r16, r28
    21e4:	0a 5b       	subi	r16, 0xBA	; 186
    21e6:	1f 4f       	sbci	r17, 0xFF	; 255
    21e8:	fe 01       	movw	r30, r28
    21ea:	e6 5b       	subi	r30, 0xB6	; 182
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	4a ef       	ldi	r20, 0xFA	; 250
    21fc:	54 e4       	ldi	r21, 0x44	; 68
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	f8 01       	movw	r30, r16
    2208:	80 83       	st	Z, r24
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	a2 83       	std	Z+2, r26	; 0x02
    220e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2210:	fe 01       	movw	r30, r28
    2212:	ea 5b       	subi	r30, 0xBA	; 186
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	60 81       	ld	r22, Z
    2218:	71 81       	ldd	r23, Z+1	; 0x01
    221a:	82 81       	ldd	r24, Z+2	; 0x02
    221c:	93 81       	ldd	r25, Z+3	; 0x03
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	44 f4       	brge	.+16     	; 0x223e <LCD_Write_Cmd+0x420>
		__ticks = 1;
    222e:	fe 01       	movw	r30, r28
    2230:	ec 5b       	subi	r30, 0xBC	; 188
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	80 83       	st	Z, r24
    223c:	64 c0       	rjmp	.+200    	; 0x2306 <LCD_Write_Cmd+0x4e8>
	else if (__tmp > 65535)
    223e:	fe 01       	movw	r30, r28
    2240:	ea 5b       	subi	r30, 0xBA	; 186
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	3f ef       	ldi	r19, 0xFF	; 255
    2250:	4f e7       	ldi	r20, 0x7F	; 127
    2252:	57 e4       	ldi	r21, 0x47	; 71
    2254:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2258:	18 16       	cp	r1, r24
    225a:	0c f0       	brlt	.+2      	; 0x225e <LCD_Write_Cmd+0x440>
    225c:	43 c0       	rjmp	.+134    	; 0x22e4 <LCD_Write_Cmd+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	fe 01       	movw	r30, r28
    2260:	e6 5b       	subi	r30, 0xB6	; 182
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	60 81       	ld	r22, Z
    2266:	71 81       	ldd	r23, Z+1	; 0x01
    2268:	82 81       	ldd	r24, Z+2	; 0x02
    226a:	93 81       	ldd	r25, Z+3	; 0x03
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e2       	ldi	r20, 0x20	; 32
    2272:	51 e4       	ldi	r21, 0x41	; 65
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	8e 01       	movw	r16, r28
    227e:	0c 5b       	subi	r16, 0xBC	; 188
    2280:	1f 4f       	sbci	r17, 0xFF	; 255
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	f8 01       	movw	r30, r16
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
    2294:	1f c0       	rjmp	.+62     	; 0x22d4 <LCD_Write_Cmd+0x4b6>
    2296:	fe 01       	movw	r30, r28
    2298:	ee 5b       	subi	r30, 0xBE	; 190
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	88 ec       	ldi	r24, 0xC8	; 200
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22a4:	fe 01       	movw	r30, r28
    22a6:	ee 5b       	subi	r30, 0xBE	; 190
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <LCD_Write_Cmd+0x490>
    22b2:	fe 01       	movw	r30, r28
    22b4:	ee 5b       	subi	r30, 0xBE	; 190
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	de 01       	movw	r26, r28
    22be:	ac 5b       	subi	r26, 0xBC	; 188
    22c0:	bf 4f       	sbci	r27, 0xFF	; 255
    22c2:	fe 01       	movw	r30, r28
    22c4:	ec 5b       	subi	r30, 0xBC	; 188
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	11 96       	adiw	r26, 0x01	; 1
    22d0:	9c 93       	st	X, r25
    22d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	fe 01       	movw	r30, r28
    22d6:	ec 5b       	subi	r30, 0xBC	; 188
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 81       	ld	r24, Z
    22dc:	91 81       	ldd	r25, Z+1	; 0x01
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	d1 f6       	brne	.-76     	; 0x2296 <LCD_Write_Cmd+0x478>
    22e2:	42 c0       	rjmp	.+132    	; 0x2368 <LCD_Write_Cmd+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	8e 01       	movw	r16, r28
    22e6:	0c 5b       	subi	r16, 0xBC	; 188
    22e8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ea:	fe 01       	movw	r30, r28
    22ec:	ea 5b       	subi	r30, 0xBA	; 186
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	60 81       	ld	r22, Z
    22f2:	71 81       	ldd	r23, Z+1	; 0x01
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	93 81       	ldd	r25, Z+3	; 0x03
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	f8 01       	movw	r30, r16
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
    2306:	de 01       	movw	r26, r28
    2308:	a0 5c       	subi	r26, 0xC0	; 192
    230a:	bf 4f       	sbci	r27, 0xFF	; 255
    230c:	fe 01       	movw	r30, r28
    230e:	ec 5b       	subi	r30, 0xBC	; 188
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	11 96       	adiw	r26, 0x01	; 1
    2318:	9c 93       	st	X, r25
    231a:	8e 93       	st	-X, r24
    231c:	fe 01       	movw	r30, r28
    231e:	e0 5c       	subi	r30, 0xC0	; 192
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	80 81       	ld	r24, Z
    2324:	91 81       	ldd	r25, Z+1	; 0x01
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <LCD_Write_Cmd+0x508>
    232a:	fe 01       	movw	r30, r28
    232c:	e0 5c       	subi	r30, 0xC0	; 192
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	80 83       	st	Z, r24
    2334:	19 c0       	rjmp	.+50     	; 0x2368 <LCD_Write_Cmd+0x54a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2336:	8e 01       	movw	r16, r28
    2338:	02 5b       	subi	r16, 0xB2	; 178
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    233c:	fe 01       	movw	r30, r28
    233e:	e1 5b       	subi	r30, 0xB1	; 177
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	f8 01       	movw	r30, r16
    2354:	80 83       	st	Z, r24
    2356:	fe 01       	movw	r30, r28
    2358:	e2 5b       	subi	r30, 0xB2	; 178
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 81       	ld	r24, Z
    235e:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2360:	8f ad       	ldd	r24, Y+63	; 0x3f
    2362:	8a 95       	dec	r24
    2364:	f1 f7       	brne	.-4      	; 0x2362 <LCD_Write_Cmd+0x544>
    2366:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	if(x)
    2368:	80 91 9e 01 	lds	r24, 0x019E
    236c:	88 23       	and	r24, r24
    236e:	09 f4       	brne	.+2      	; 0x2372 <LCD_Write_Cmd+0x554>
    2370:	b8 c1       	rjmp	.+880    	; 0x26e2 <LCD_Write_Cmd+0x8c4>
	{
		/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
		SetPinValue(PIN4,Data_Port,GET_BIT(cmd,0));
    2372:	fe 01       	movw	r30, r28
    2374:	e1 59       	subi	r30, 0x91	; 145
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 81       	ld	r24, Z
    237a:	98 2f       	mov	r25, r24
    237c:	91 70       	andi	r25, 0x01	; 1
    237e:	84 e0       	ldi	r24, 0x04	; 4
    2380:	62 e0       	ldi	r22, 0x02	; 2
    2382:	49 2f       	mov	r20, r25
    2384:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
		SetPinValue(PIN5,Data_Port,GET_BIT(cmd,1));
    2388:	fe 01       	movw	r30, r28
    238a:	e1 59       	subi	r30, 0x91	; 145
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	86 95       	lsr	r24
    2392:	98 2f       	mov	r25, r24
    2394:	91 70       	andi	r25, 0x01	; 1
    2396:	85 e0       	ldi	r24, 0x05	; 5
    2398:	62 e0       	ldi	r22, 0x02	; 2
    239a:	49 2f       	mov	r20, r25
    239c:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
		SetPinValue(PIN6,Data_Port,GET_BIT(cmd,2));
    23a0:	fe 01       	movw	r30, r28
    23a2:	e1 59       	subi	r30, 0x91	; 145
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	80 81       	ld	r24, Z
    23a8:	86 95       	lsr	r24
    23aa:	86 95       	lsr	r24
    23ac:	98 2f       	mov	r25, r24
    23ae:	91 70       	andi	r25, 0x01	; 1
    23b0:	86 e0       	ldi	r24, 0x06	; 6
    23b2:	62 e0       	ldi	r22, 0x02	; 2
    23b4:	49 2f       	mov	r20, r25
    23b6:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
		SetPinValue(PIN7,Data_Port,GET_BIT(cmd,3));
    23ba:	fe 01       	movw	r30, r28
    23bc:	e1 59       	subi	r30, 0x91	; 145
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	80 81       	ld	r24, Z
    23c2:	86 95       	lsr	r24
    23c4:	86 95       	lsr	r24
    23c6:	86 95       	lsr	r24
    23c8:	98 2f       	mov	r25, r24
    23ca:	91 70       	andi	r25, 0x01	; 1
    23cc:	87 e0       	ldi	r24, 0x07	; 7
    23ce:	62 e0       	ldi	r22, 0x02	; 2
    23d0:	49 2f       	mov	r20, r25
    23d2:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>

		/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
		SetPinValue(E,Control_Port,HIGH);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	63 e0       	ldi	r22, 0x03	; 3
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	a0 e8       	ldi	r26, 0x80	; 128
    23e6:	bf e3       	ldi	r27, 0x3F	; 63
    23e8:	8b af       	std	Y+59, r24	; 0x3b
    23ea:	9c af       	std	Y+60, r25	; 0x3c
    23ec:	ad af       	std	Y+61, r26	; 0x3d
    23ee:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23f0:	6b ad       	ldd	r22, Y+59	; 0x3b
    23f2:	7c ad       	ldd	r23, Y+60	; 0x3c
    23f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    23f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    23f8:	2b ea       	ldi	r18, 0xAB	; 171
    23fa:	3a ea       	ldi	r19, 0xAA	; 170
    23fc:	4a e2       	ldi	r20, 0x2A	; 42
    23fe:	50 e4       	ldi	r21, 0x40	; 64
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	8f ab       	std	Y+55, r24	; 0x37
    240a:	98 af       	std	Y+56, r25	; 0x38
    240c:	a9 af       	std	Y+57, r26	; 0x39
    240e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2410:	6f a9       	ldd	r22, Y+55	; 0x37
    2412:	78 ad       	ldd	r23, Y+56	; 0x38
    2414:	89 ad       	ldd	r24, Y+57	; 0x39
    2416:	9a ad       	ldd	r25, Y+58	; 0x3a
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e8       	ldi	r20, 0x80	; 128
    241e:	5f e3       	ldi	r21, 0x3F	; 63
    2420:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2424:	88 23       	and	r24, r24
    2426:	1c f4       	brge	.+6      	; 0x242e <LCD_Write_Cmd+0x610>
		__ticks = 1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	8e ab       	std	Y+54, r24	; 0x36
    242c:	91 c0       	rjmp	.+290    	; 0x2550 <LCD_Write_Cmd+0x732>
	else if (__tmp > 255)
    242e:	6f a9       	ldd	r22, Y+55	; 0x37
    2430:	78 ad       	ldd	r23, Y+56	; 0x38
    2432:	89 ad       	ldd	r24, Y+57	; 0x39
    2434:	9a ad       	ldd	r25, Y+58	; 0x3a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	4f e7       	ldi	r20, 0x7F	; 127
    243c:	53 e4       	ldi	r21, 0x43	; 67
    243e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2442:	18 16       	cp	r1, r24
    2444:	0c f0       	brlt	.+2      	; 0x2448 <LCD_Write_Cmd+0x62a>
    2446:	7b c0       	rjmp	.+246    	; 0x253e <LCD_Write_Cmd+0x720>
	{
		_delay_ms(__us / 1000.0);
    2448:	6b ad       	ldd	r22, Y+59	; 0x3b
    244a:	7c ad       	ldd	r23, Y+60	; 0x3c
    244c:	8d ad       	ldd	r24, Y+61	; 0x3d
    244e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a e7       	ldi	r20, 0x7A	; 122
    2456:	54 e4       	ldi	r21, 0x44	; 68
    2458:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8a ab       	std	Y+50, r24	; 0x32
    2462:	9b ab       	std	Y+51, r25	; 0x33
    2464:	ac ab       	std	Y+52, r26	; 0x34
    2466:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2468:	6a a9       	ldd	r22, Y+50	; 0x32
    246a:	7b a9       	ldd	r23, Y+51	; 0x33
    246c:	8c a9       	ldd	r24, Y+52	; 0x34
    246e:	9d a9       	ldd	r25, Y+53	; 0x35
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4a ef       	ldi	r20, 0xFA	; 250
    2476:	54 e4       	ldi	r21, 0x44	; 68
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	8e a7       	std	Y+46, r24	; 0x2e
    2482:	9f a7       	std	Y+47, r25	; 0x2f
    2484:	a8 ab       	std	Y+48, r26	; 0x30
    2486:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2488:	6e a5       	ldd	r22, Y+46	; 0x2e
    248a:	7f a5       	ldd	r23, Y+47	; 0x2f
    248c:	88 a9       	ldd	r24, Y+48	; 0x30
    248e:	99 a9       	ldd	r25, Y+49	; 0x31
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e8       	ldi	r20, 0x80	; 128
    2496:	5f e3       	ldi	r21, 0x3F	; 63
    2498:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    249c:	88 23       	and	r24, r24
    249e:	2c f4       	brge	.+10     	; 0x24aa <LCD_Write_Cmd+0x68c>
		__ticks = 1;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	9d a7       	std	Y+45, r25	; 0x2d
    24a6:	8c a7       	std	Y+44, r24	; 0x2c
    24a8:	3f c0       	rjmp	.+126    	; 0x2528 <LCD_Write_Cmd+0x70a>
	else if (__tmp > 65535)
    24aa:	6e a5       	ldd	r22, Y+46	; 0x2e
    24ac:	7f a5       	ldd	r23, Y+47	; 0x2f
    24ae:	88 a9       	ldd	r24, Y+48	; 0x30
    24b0:	99 a9       	ldd	r25, Y+49	; 0x31
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	3f ef       	ldi	r19, 0xFF	; 255
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	57 e4       	ldi	r21, 0x47	; 71
    24ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	4c f5       	brge	.+82     	; 0x2514 <LCD_Write_Cmd+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c2:	6a a9       	ldd	r22, Y+50	; 0x32
    24c4:	7b a9       	ldd	r23, Y+51	; 0x33
    24c6:	8c a9       	ldd	r24, Y+52	; 0x34
    24c8:	9d a9       	ldd	r25, Y+53	; 0x35
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e2       	ldi	r20, 0x20	; 32
    24d0:	51 e4       	ldi	r21, 0x41	; 65
    24d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9d a7       	std	Y+45, r25	; 0x2d
    24e8:	8c a7       	std	Y+44, r24	; 0x2c
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <LCD_Write_Cmd+0x6ec>
    24ec:	88 ec       	ldi	r24, 0xC8	; 200
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9b a7       	std	Y+43, r25	; 0x2b
    24f2:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24f4:	8a a5       	ldd	r24, Y+42	; 0x2a
    24f6:	9b a5       	ldd	r25, Y+43	; 0x2b
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_Write_Cmd+0x6da>
    24fc:	9b a7       	std	Y+43, r25	; 0x2b
    24fe:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2500:	8c a5       	ldd	r24, Y+44	; 0x2c
    2502:	9d a5       	ldd	r25, Y+45	; 0x2d
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	9d a7       	std	Y+45, r25	; 0x2d
    2508:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250a:	8c a5       	ldd	r24, Y+44	; 0x2c
    250c:	9d a5       	ldd	r25, Y+45	; 0x2d
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	69 f7       	brne	.-38     	; 0x24ec <LCD_Write_Cmd+0x6ce>
    2512:	24 c0       	rjmp	.+72     	; 0x255c <LCD_Write_Cmd+0x73e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2514:	6e a5       	ldd	r22, Y+46	; 0x2e
    2516:	7f a5       	ldd	r23, Y+47	; 0x2f
    2518:	88 a9       	ldd	r24, Y+48	; 0x30
    251a:	99 a9       	ldd	r25, Y+49	; 0x31
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9d a7       	std	Y+45, r25	; 0x2d
    2526:	8c a7       	std	Y+44, r24	; 0x2c
    2528:	8c a5       	ldd	r24, Y+44	; 0x2c
    252a:	9d a5       	ldd	r25, Y+45	; 0x2d
    252c:	99 a7       	std	Y+41, r25	; 0x29
    252e:	88 a7       	std	Y+40, r24	; 0x28
    2530:	88 a5       	ldd	r24, Y+40	; 0x28
    2532:	99 a5       	ldd	r25, Y+41	; 0x29
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_Write_Cmd+0x716>
    2538:	99 a7       	std	Y+41, r25	; 0x29
    253a:	88 a7       	std	Y+40, r24	; 0x28
    253c:	0f c0       	rjmp	.+30     	; 0x255c <LCD_Write_Cmd+0x73e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    253e:	6f a9       	ldd	r22, Y+55	; 0x37
    2540:	78 ad       	ldd	r23, Y+56	; 0x38
    2542:	89 ad       	ldd	r24, Y+57	; 0x39
    2544:	9a ad       	ldd	r25, Y+58	; 0x3a
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	8e ab       	std	Y+54, r24	; 0x36
    2550:	8e a9       	ldd	r24, Y+54	; 0x36
    2552:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2554:	8f a1       	ldd	r24, Y+39	; 0x27
    2556:	8a 95       	dec	r24
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_Write_Cmd+0x738>
    255a:	8f a3       	std	Y+39, r24	; 0x27
		_delay_us(1);
		SetPinValue(E,Control_Port,LOW);
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	63 e0       	ldi	r22, 0x03	; 3
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a0 e8       	ldi	r26, 0x80	; 128
    256c:	bf e3       	ldi	r27, 0x3F	; 63
    256e:	8b a3       	std	Y+35, r24	; 0x23
    2570:	9c a3       	std	Y+36, r25	; 0x24
    2572:	ad a3       	std	Y+37, r26	; 0x25
    2574:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2576:	6b a1       	ldd	r22, Y+35	; 0x23
    2578:	7c a1       	ldd	r23, Y+36	; 0x24
    257a:	8d a1       	ldd	r24, Y+37	; 0x25
    257c:	9e a1       	ldd	r25, Y+38	; 0x26
    257e:	2b ea       	ldi	r18, 0xAB	; 171
    2580:	3a ea       	ldi	r19, 0xAA	; 170
    2582:	4a e2       	ldi	r20, 0x2A	; 42
    2584:	50 e4       	ldi	r21, 0x40	; 64
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	8f 8f       	std	Y+31, r24	; 0x1f
    2590:	98 a3       	std	Y+32, r25	; 0x20
    2592:	a9 a3       	std	Y+33, r26	; 0x21
    2594:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2596:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2598:	78 a1       	ldd	r23, Y+32	; 0x20
    259a:	89 a1       	ldd	r24, Y+33	; 0x21
    259c:	9a a1       	ldd	r25, Y+34	; 0x22
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e8       	ldi	r20, 0x80	; 128
    25a4:	5f e3       	ldi	r21, 0x3F	; 63
    25a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25aa:	88 23       	and	r24, r24
    25ac:	1c f4       	brge	.+6      	; 0x25b4 <LCD_Write_Cmd+0x796>
		__ticks = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	8e 8f       	std	Y+30, r24	; 0x1e
    25b2:	91 c0       	rjmp	.+290    	; 0x26d6 <LCD_Write_Cmd+0x8b8>
	else if (__tmp > 255)
    25b4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25b6:	78 a1       	ldd	r23, Y+32	; 0x20
    25b8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ba:	9a a1       	ldd	r25, Y+34	; 0x22
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	53 e4       	ldi	r21, 0x43	; 67
    25c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	0c f0       	brlt	.+2      	; 0x25ce <LCD_Write_Cmd+0x7b0>
    25cc:	7b c0       	rjmp	.+246    	; 0x26c4 <LCD_Write_Cmd+0x8a6>
	{
		_delay_ms(__us / 1000.0);
    25ce:	6b a1       	ldd	r22, Y+35	; 0x23
    25d0:	7c a1       	ldd	r23, Y+36	; 0x24
    25d2:	8d a1       	ldd	r24, Y+37	; 0x25
    25d4:	9e a1       	ldd	r25, Y+38	; 0x26
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4a e7       	ldi	r20, 0x7A	; 122
    25dc:	54 e4       	ldi	r21, 0x44	; 68
    25de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8a 8f       	std	Y+26, r24	; 0x1a
    25e8:	9b 8f       	std	Y+27, r25	; 0x1b
    25ea:	ac 8f       	std	Y+28, r26	; 0x1c
    25ec:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25f0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    25f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4a ef       	ldi	r20, 0xFA	; 250
    25fc:	54 e4       	ldi	r21, 0x44	; 68
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	8e 8b       	std	Y+22, r24	; 0x16
    2608:	9f 8b       	std	Y+23, r25	; 0x17
    260a:	a8 8f       	std	Y+24, r26	; 0x18
    260c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    260e:	6e 89       	ldd	r22, Y+22	; 0x16
    2610:	7f 89       	ldd	r23, Y+23	; 0x17
    2612:	88 8d       	ldd	r24, Y+24	; 0x18
    2614:	99 8d       	ldd	r25, Y+25	; 0x19
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2622:	88 23       	and	r24, r24
    2624:	2c f4       	brge	.+10     	; 0x2630 <LCD_Write_Cmd+0x812>
		__ticks = 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9d 8b       	std	Y+21, r25	; 0x15
    262c:	8c 8b       	std	Y+20, r24	; 0x14
    262e:	3f c0       	rjmp	.+126    	; 0x26ae <LCD_Write_Cmd+0x890>
	else if (__tmp > 65535)
    2630:	6e 89       	ldd	r22, Y+22	; 0x16
    2632:	7f 89       	ldd	r23, Y+23	; 0x17
    2634:	88 8d       	ldd	r24, Y+24	; 0x18
    2636:	99 8d       	ldd	r25, Y+25	; 0x19
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	3f ef       	ldi	r19, 0xFF	; 255
    263c:	4f e7       	ldi	r20, 0x7F	; 127
    263e:	57 e4       	ldi	r21, 0x47	; 71
    2640:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2644:	18 16       	cp	r1, r24
    2646:	4c f5       	brge	.+82     	; 0x269a <LCD_Write_Cmd+0x87c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	6a 8d       	ldd	r22, Y+26	; 0x1a
    264a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    264c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    264e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9d 8b       	std	Y+21, r25	; 0x15
    266e:	8c 8b       	std	Y+20, r24	; 0x14
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <LCD_Write_Cmd+0x872>
    2672:	88 ec       	ldi	r24, 0xC8	; 200
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9b 8b       	std	Y+19, r25	; 0x13
    2678:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    267a:	8a 89       	ldd	r24, Y+18	; 0x12
    267c:	9b 89       	ldd	r25, Y+19	; 0x13
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <LCD_Write_Cmd+0x860>
    2682:	9b 8b       	std	Y+19, r25	; 0x13
    2684:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	8c 89       	ldd	r24, Y+20	; 0x14
    2688:	9d 89       	ldd	r25, Y+21	; 0x15
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	9d 8b       	std	Y+21, r25	; 0x15
    268e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2690:	8c 89       	ldd	r24, Y+20	; 0x14
    2692:	9d 89       	ldd	r25, Y+21	; 0x15
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	69 f7       	brne	.-38     	; 0x2672 <LCD_Write_Cmd+0x854>
    2698:	24 c0       	rjmp	.+72     	; 0x26e2 <LCD_Write_Cmd+0x8c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269a:	6e 89       	ldd	r22, Y+22	; 0x16
    269c:	7f 89       	ldd	r23, Y+23	; 0x17
    269e:	88 8d       	ldd	r24, Y+24	; 0x18
    26a0:	99 8d       	ldd	r25, Y+25	; 0x19
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9d 8b       	std	Y+21, r25	; 0x15
    26ac:	8c 8b       	std	Y+20, r24	; 0x14
    26ae:	8c 89       	ldd	r24, Y+20	; 0x14
    26b0:	9d 89       	ldd	r25, Y+21	; 0x15
    26b2:	99 8b       	std	Y+17, r25	; 0x11
    26b4:	88 8b       	std	Y+16, r24	; 0x10
    26b6:	88 89       	ldd	r24, Y+16	; 0x10
    26b8:	99 89       	ldd	r25, Y+17	; 0x11
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <LCD_Write_Cmd+0x89c>
    26be:	99 8b       	std	Y+17, r25	; 0x11
    26c0:	88 8b       	std	Y+16, r24	; 0x10
    26c2:	0f c0       	rjmp	.+30     	; 0x26e2 <LCD_Write_Cmd+0x8c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26c4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26c6:	78 a1       	ldd	r23, Y+32	; 0x20
    26c8:	89 a1       	ldd	r24, Y+33	; 0x21
    26ca:	9a a1       	ldd	r25, Y+34	; 0x22
    26cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	8e 8f       	std	Y+30, r24	; 0x1e
    26d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26d8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26da:	8f 85       	ldd	r24, Y+15	; 0x0f
    26dc:	8a 95       	dec	r24
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_Write_Cmd+0x8be>
    26e0:	8f 87       	std	Y+15, r24	; 0x0f
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a0 e0       	ldi	r26, 0x00	; 0
    26e8:	b0 e4       	ldi	r27, 0x40	; 64
    26ea:	8b 87       	std	Y+11, r24	; 0x0b
    26ec:	9c 87       	std	Y+12, r25	; 0x0c
    26ee:	ad 87       	std	Y+13, r26	; 0x0d
    26f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a ef       	ldi	r20, 0xFA	; 250
    2700:	54 e4       	ldi	r21, 0x44	; 68
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8f 83       	std	Y+7, r24	; 0x07
    270c:	98 87       	std	Y+8, r25	; 0x08
    270e:	a9 87       	std	Y+9, r26	; 0x09
    2710:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2712:	6f 81       	ldd	r22, Y+7	; 0x07
    2714:	78 85       	ldd	r23, Y+8	; 0x08
    2716:	89 85       	ldd	r24, Y+9	; 0x09
    2718:	9a 85       	ldd	r25, Y+10	; 0x0a
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <LCD_Write_Cmd+0x916>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9e 83       	std	Y+6, r25	; 0x06
    2730:	8d 83       	std	Y+5, r24	; 0x05
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <LCD_Write_Cmd+0x994>
	else if (__tmp > 65535)
    2734:	6f 81       	ldd	r22, Y+7	; 0x07
    2736:	78 85       	ldd	r23, Y+8	; 0x08
    2738:	89 85       	ldd	r24, Y+9	; 0x09
    273a:	9a 85       	ldd	r25, Y+10	; 0x0a
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <LCD_Write_Cmd+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	6b 85       	ldd	r22, Y+11	; 0x0b
    274e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2750:	8d 85       	ldd	r24, Y+13	; 0x0d
    2752:	9e 85       	ldd	r25, Y+14	; 0x0e
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9e 83       	std	Y+6, r25	; 0x06
    2772:	8d 83       	std	Y+5, r24	; 0x05
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <LCD_Write_Cmd+0x976>
    2776:	88 ec       	ldi	r24, 0xC8	; 200
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <LCD_Write_Cmd+0x964>
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	9e 81       	ldd	r25, Y+6	; 0x06
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <LCD_Write_Cmd+0x958>
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <LCD_Write_Cmd+0x9a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6f 81       	ldd	r22, Y+7	; 0x07
    27a0:	78 85       	ldd	r23, Y+8	; 0x08
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	9e 81       	ldd	r25, Y+6	; 0x06
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <LCD_Write_Cmd+0x9a0>
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
	}

	//wait 2 ms after every instruction
	_delay_ms(2);
}
    27c6:	c1 59       	subi	r28, 0x91	; 145
    27c8:	df 4f       	sbci	r29, 0xFF	; 255
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	08 95       	ret

000027de <LCD_Write_Char>:


void LCD_Write_Char(u8 chr)
{
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	c9 57       	subi	r28, 0x79	; 121
    27ec:	d0 40       	sbci	r29, 0x00	; 0
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	fe 01       	movw	r30, r28
    27fa:	e7 58       	subi	r30, 0x87	; 135
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 83       	st	Z, r24
	/*Set RS Pin to HIGH*/
	SetPinValue(RS,Control_Port,HIGH);
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	63 e0       	ldi	r22, 0x03	; 3
    2804:	41 e0       	ldi	r20, 0x01	; 1
    2806:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
	/*Set RW Pin to LOW*/
	SetPinValue(RW,Control_Port,LOW);
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	63 e0       	ldi	r22, 0x03	; 3
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>

	/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
	SetPinValue(PIN4,Data_Port,GET_BIT(chr,4));
    2814:	fe 01       	movw	r30, r28
    2816:	e7 58       	subi	r30, 0x87	; 135
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 81       	ld	r24, Z
    281c:	82 95       	swap	r24
    281e:	8f 70       	andi	r24, 0x0F	; 15
    2820:	98 2f       	mov	r25, r24
    2822:	91 70       	andi	r25, 0x01	; 1
    2824:	84 e0       	ldi	r24, 0x04	; 4
    2826:	62 e0       	ldi	r22, 0x02	; 2
    2828:	49 2f       	mov	r20, r25
    282a:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
	SetPinValue(PIN5,Data_Port,GET_BIT(chr,5));
    282e:	fe 01       	movw	r30, r28
    2830:	e7 58       	subi	r30, 0x87	; 135
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	80 81       	ld	r24, Z
    2836:	82 95       	swap	r24
    2838:	86 95       	lsr	r24
    283a:	87 70       	andi	r24, 0x07	; 7
    283c:	98 2f       	mov	r25, r24
    283e:	91 70       	andi	r25, 0x01	; 1
    2840:	85 e0       	ldi	r24, 0x05	; 5
    2842:	62 e0       	ldi	r22, 0x02	; 2
    2844:	49 2f       	mov	r20, r25
    2846:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
	SetPinValue(PIN6,Data_Port,GET_BIT(chr,6));
    284a:	fe 01       	movw	r30, r28
    284c:	e7 58       	subi	r30, 0x87	; 135
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 81       	ld	r24, Z
    2852:	82 95       	swap	r24
    2854:	86 95       	lsr	r24
    2856:	86 95       	lsr	r24
    2858:	83 70       	andi	r24, 0x03	; 3
    285a:	98 2f       	mov	r25, r24
    285c:	91 70       	andi	r25, 0x01	; 1
    285e:	86 e0       	ldi	r24, 0x06	; 6
    2860:	62 e0       	ldi	r22, 0x02	; 2
    2862:	49 2f       	mov	r20, r25
    2864:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
	SetPinValue(PIN7,Data_Port,GET_BIT(chr,7));
    2868:	fe 01       	movw	r30, r28
    286a:	e7 58       	subi	r30, 0x87	; 135
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	98 2f       	mov	r25, r24
    2872:	99 1f       	adc	r25, r25
    2874:	99 27       	eor	r25, r25
    2876:	99 1f       	adc	r25, r25
    2878:	87 e0       	ldi	r24, 0x07	; 7
    287a:	62 e0       	ldi	r22, 0x02	; 2
    287c:	49 2f       	mov	r20, r25
    287e:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>

	/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
	SetPinValue(E,Control_Port,HIGH);
    2882:	82 e0       	ldi	r24, 0x02	; 2
    2884:	63 e0       	ldi	r22, 0x03	; 3
    2886:	41 e0       	ldi	r20, 0x01	; 1
    2888:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
    288c:	fe 01       	movw	r30, r28
    288e:	eb 58       	subi	r30, 0x8B	; 139
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	a0 e8       	ldi	r26, 0x80	; 128
    2898:	bf e3       	ldi	r27, 0x3F	; 63
    289a:	80 83       	st	Z, r24
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	a2 83       	std	Z+2, r26	; 0x02
    28a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28a2:	8e 01       	movw	r16, r28
    28a4:	0f 58       	subi	r16, 0x8F	; 143
    28a6:	1f 4f       	sbci	r17, 0xFF	; 255
    28a8:	fe 01       	movw	r30, r28
    28aa:	eb 58       	subi	r30, 0x8B	; 139
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	60 81       	ld	r22, Z
    28b0:	71 81       	ldd	r23, Z+1	; 0x01
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	2b ea       	ldi	r18, 0xAB	; 171
    28b8:	3a ea       	ldi	r19, 0xAA	; 170
    28ba:	4a e2       	ldi	r20, 0x2A	; 42
    28bc:	50 e4       	ldi	r21, 0x40	; 64
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	f8 01       	movw	r30, r16
    28c8:	80 83       	st	Z, r24
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	a2 83       	std	Z+2, r26	; 0x02
    28ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28d0:	fe 01       	movw	r30, r28
    28d2:	ef 58       	subi	r30, 0x8F	; 143
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	60 81       	ld	r22, Z
    28d8:	71 81       	ldd	r23, Z+1	; 0x01
    28da:	82 81       	ldd	r24, Z+2	; 0x02
    28dc:	93 81       	ldd	r25, Z+3	; 0x03
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e8       	ldi	r20, 0x80	; 128
    28e4:	5f e3       	ldi	r21, 0x3F	; 63
    28e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ea:	88 23       	and	r24, r24
    28ec:	34 f4       	brge	.+12     	; 0x28fa <LCD_Write_Char+0x11c>
		__ticks = 1;
    28ee:	fe 01       	movw	r30, r28
    28f0:	e0 59       	subi	r30, 0x90	; 144
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	80 83       	st	Z, r24
    28f8:	e0 c0       	rjmp	.+448    	; 0x2aba <LCD_Write_Char+0x2dc>
	else if (__tmp > 255)
    28fa:	fe 01       	movw	r30, r28
    28fc:	ef 58       	subi	r30, 0x8F	; 143
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	4f e7       	ldi	r20, 0x7F	; 127
    290e:	53 e4       	ldi	r21, 0x43	; 67
    2910:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2914:	18 16       	cp	r1, r24
    2916:	0c f0       	brlt	.+2      	; 0x291a <LCD_Write_Char+0x13c>
    2918:	c0 c0       	rjmp	.+384    	; 0x2a9a <LCD_Write_Char+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    291a:	fe 01       	movw	r30, r28
    291c:	eb 58       	subi	r30, 0x8B	; 139
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	60 81       	ld	r22, Z
    2922:	71 81       	ldd	r23, Z+1	; 0x01
    2924:	82 81       	ldd	r24, Z+2	; 0x02
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	4a e7       	ldi	r20, 0x7A	; 122
    292e:	54 e4       	ldi	r21, 0x44	; 68
    2930:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	fe 01       	movw	r30, r28
    293a:	e4 59       	subi	r30, 0x94	; 148
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	80 83       	st	Z, r24
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	a2 83       	std	Z+2, r26	; 0x02
    2944:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2946:	8e 01       	movw	r16, r28
    2948:	08 59       	subi	r16, 0x98	; 152
    294a:	1f 4f       	sbci	r17, 0xFF	; 255
    294c:	fe 01       	movw	r30, r28
    294e:	e4 59       	subi	r30, 0x94	; 148
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	4a ef       	ldi	r20, 0xFA	; 250
    2960:	54 e4       	ldi	r21, 0x44	; 68
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	f8 01       	movw	r30, r16
    296c:	80 83       	st	Z, r24
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	a2 83       	std	Z+2, r26	; 0x02
    2972:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2974:	fe 01       	movw	r30, r28
    2976:	e8 59       	subi	r30, 0x98	; 152
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e8       	ldi	r20, 0x80	; 128
    2988:	5f e3       	ldi	r21, 0x3F	; 63
    298a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    298e:	88 23       	and	r24, r24
    2990:	44 f4       	brge	.+16     	; 0x29a2 <LCD_Write_Char+0x1c4>
		__ticks = 1;
    2992:	fe 01       	movw	r30, r28
    2994:	ea 59       	subi	r30, 0x9A	; 154
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	64 c0       	rjmp	.+200    	; 0x2a6a <LCD_Write_Char+0x28c>
	else if (__tmp > 65535)
    29a2:	fe 01       	movw	r30, r28
    29a4:	e8 59       	subi	r30, 0x98	; 152
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	3f ef       	ldi	r19, 0xFF	; 255
    29b4:	4f e7       	ldi	r20, 0x7F	; 127
    29b6:	57 e4       	ldi	r21, 0x47	; 71
    29b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29bc:	18 16       	cp	r1, r24
    29be:	0c f0       	brlt	.+2      	; 0x29c2 <LCD_Write_Char+0x1e4>
    29c0:	43 c0       	rjmp	.+134    	; 0x2a48 <LCD_Write_Char+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c2:	fe 01       	movw	r30, r28
    29c4:	e4 59       	subi	r30, 0x94	; 148
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	60 81       	ld	r22, Z
    29ca:	71 81       	ldd	r23, Z+1	; 0x01
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e2       	ldi	r20, 0x20	; 32
    29d6:	51 e4       	ldi	r21, 0x41	; 65
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	8e 01       	movw	r16, r28
    29e2:	0a 59       	subi	r16, 0x9A	; 154
    29e4:	1f 4f       	sbci	r17, 0xFF	; 255
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	f8 01       	movw	r30, r16
    29f4:	91 83       	std	Z+1, r25	; 0x01
    29f6:	80 83       	st	Z, r24
    29f8:	1f c0       	rjmp	.+62     	; 0x2a38 <LCD_Write_Char+0x25a>
    29fa:	fe 01       	movw	r30, r28
    29fc:	ec 59       	subi	r30, 0x9C	; 156
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	88 ec       	ldi	r24, 0xC8	; 200
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ec 59       	subi	r30, 0x9C	; 156
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_Write_Char+0x234>
    2a16:	fe 01       	movw	r30, r28
    2a18:	ec 59       	subi	r30, 0x9C	; 156
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	91 83       	std	Z+1, r25	; 0x01
    2a1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	de 01       	movw	r26, r28
    2a22:	aa 59       	subi	r26, 0x9A	; 154
    2a24:	bf 4f       	sbci	r27, 0xFF	; 255
    2a26:	fe 01       	movw	r30, r28
    2a28:	ea 59       	subi	r30, 0x9A	; 154
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	91 81       	ldd	r25, Z+1	; 0x01
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	11 96       	adiw	r26, 0x01	; 1
    2a34:	9c 93       	st	X, r25
    2a36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a38:	fe 01       	movw	r30, r28
    2a3a:	ea 59       	subi	r30, 0x9A	; 154
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 81       	ld	r24, Z
    2a40:	91 81       	ldd	r25, Z+1	; 0x01
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	d1 f6       	brne	.-76     	; 0x29fa <LCD_Write_Char+0x21c>
    2a46:	4b c0       	rjmp	.+150    	; 0x2ade <LCD_Write_Char+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a48:	8e 01       	movw	r16, r28
    2a4a:	0a 59       	subi	r16, 0x9A	; 154
    2a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e8 59       	subi	r30, 0x98	; 152
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	f8 01       	movw	r30, r16
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	80 83       	st	Z, r24
    2a6a:	de 01       	movw	r26, r28
    2a6c:	ae 59       	subi	r26, 0x9E	; 158
    2a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a70:	fe 01       	movw	r30, r28
    2a72:	ea 59       	subi	r30, 0x9A	; 154
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	11 96       	adiw	r26, 0x01	; 1
    2a7c:	9c 93       	st	X, r25
    2a7e:	8e 93       	st	-X, r24
    2a80:	fe 01       	movw	r30, r28
    2a82:	ee 59       	subi	r30, 0x9E	; 158
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 81       	ld	r24, Z
    2a88:	91 81       	ldd	r25, Z+1	; 0x01
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <LCD_Write_Char+0x2ac>
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ee 59       	subi	r30, 0x9E	; 158
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	80 83       	st	Z, r24
    2a98:	22 c0       	rjmp	.+68     	; 0x2ade <LCD_Write_Char+0x300>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	00 59       	subi	r16, 0x90	; 144
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ef 58       	subi	r30, 0x8F	; 143
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	80 83       	st	Z, r24
    2aba:	de 01       	movw	r26, r28
    2abc:	af 59       	subi	r26, 0x9F	; 159
    2abe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e0 59       	subi	r30, 0x90	; 144
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2aca:	fe 01       	movw	r30, r28
    2acc:	ef 59       	subi	r30, 0x9F	; 159
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	8a 95       	dec	r24
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <LCD_Write_Char+0x2f4>
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	ef 59       	subi	r30, 0x9F	; 159
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	80 83       	st	Z, r24
	_delay_us(1);
	SetPinValue(E,Control_Port,LOW);
    2ade:	82 e0       	ldi	r24, 0x02	; 2
    2ae0:	63 e0       	ldi	r22, 0x03	; 3
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e3 5a       	subi	r30, 0xA3	; 163
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	a0 e8       	ldi	r26, 0x80	; 128
    2af4:	bf e3       	ldi	r27, 0x3F	; 63
    2af6:	80 83       	st	Z, r24
    2af8:	91 83       	std	Z+1, r25	; 0x01
    2afa:	a2 83       	std	Z+2, r26	; 0x02
    2afc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2afe:	8e 01       	movw	r16, r28
    2b00:	07 5a       	subi	r16, 0xA7	; 167
    2b02:	1f 4f       	sbci	r17, 0xFF	; 255
    2b04:	fe 01       	movw	r30, r28
    2b06:	e3 5a       	subi	r30, 0xA3	; 163
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	60 81       	ld	r22, Z
    2b0c:	71 81       	ldd	r23, Z+1	; 0x01
    2b0e:	82 81       	ldd	r24, Z+2	; 0x02
    2b10:	93 81       	ldd	r25, Z+3	; 0x03
    2b12:	2b ea       	ldi	r18, 0xAB	; 171
    2b14:	3a ea       	ldi	r19, 0xAA	; 170
    2b16:	4a e2       	ldi	r20, 0x2A	; 42
    2b18:	50 e4       	ldi	r21, 0x40	; 64
    2b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	f8 01       	movw	r30, r16
    2b24:	80 83       	st	Z, r24
    2b26:	91 83       	std	Z+1, r25	; 0x01
    2b28:	a2 83       	std	Z+2, r26	; 0x02
    2b2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e7 5a       	subi	r30, 0xA7	; 167
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	60 81       	ld	r22, Z
    2b34:	71 81       	ldd	r23, Z+1	; 0x01
    2b36:	82 81       	ldd	r24, Z+2	; 0x02
    2b38:	93 81       	ldd	r25, Z+3	; 0x03
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e8       	ldi	r20, 0x80	; 128
    2b40:	5f e3       	ldi	r21, 0x3F	; 63
    2b42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b46:	88 23       	and	r24, r24
    2b48:	34 f4       	brge	.+12     	; 0x2b56 <LCD_Write_Char+0x378>
		__ticks = 1;
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e8 5a       	subi	r30, 0xA8	; 168
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	80 83       	st	Z, r24
    2b54:	e0 c0       	rjmp	.+448    	; 0x2d16 <LCD_Write_Char+0x538>
	else if (__tmp > 255)
    2b56:	fe 01       	movw	r30, r28
    2b58:	e7 5a       	subi	r30, 0xA7	; 167
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	60 81       	ld	r22, Z
    2b5e:	71 81       	ldd	r23, Z+1	; 0x01
    2b60:	82 81       	ldd	r24, Z+2	; 0x02
    2b62:	93 81       	ldd	r25, Z+3	; 0x03
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4f e7       	ldi	r20, 0x7F	; 127
    2b6a:	53 e4       	ldi	r21, 0x43	; 67
    2b6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b70:	18 16       	cp	r1, r24
    2b72:	0c f0       	brlt	.+2      	; 0x2b76 <LCD_Write_Char+0x398>
    2b74:	c0 c0       	rjmp	.+384    	; 0x2cf6 <LCD_Write_Char+0x518>
	{
		_delay_ms(__us / 1000.0);
    2b76:	fe 01       	movw	r30, r28
    2b78:	e3 5a       	subi	r30, 0xA3	; 163
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	4a e7       	ldi	r20, 0x7A	; 122
    2b8a:	54 e4       	ldi	r21, 0x44	; 68
    2b8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	fe 01       	movw	r30, r28
    2b96:	ec 5a       	subi	r30, 0xAC	; 172
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 83       	st	Z, r24
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	a2 83       	std	Z+2, r26	; 0x02
    2ba0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba2:	8e 01       	movw	r16, r28
    2ba4:	00 5b       	subi	r16, 0xB0	; 176
    2ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ec 5a       	subi	r30, 0xAC	; 172
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	60 81       	ld	r22, Z
    2bb0:	71 81       	ldd	r23, Z+1	; 0x01
    2bb2:	82 81       	ldd	r24, Z+2	; 0x02
    2bb4:	93 81       	ldd	r25, Z+3	; 0x03
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	4a ef       	ldi	r20, 0xFA	; 250
    2bbc:	54 e4       	ldi	r21, 0x44	; 68
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	f8 01       	movw	r30, r16
    2bc8:	80 83       	st	Z, r24
    2bca:	91 83       	std	Z+1, r25	; 0x01
    2bcc:	a2 83       	std	Z+2, r26	; 0x02
    2bce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e0 5b       	subi	r30, 0xB0	; 176
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e8       	ldi	r20, 0x80	; 128
    2be4:	5f e3       	ldi	r21, 0x3F	; 63
    2be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bea:	88 23       	and	r24, r24
    2bec:	44 f4       	brge	.+16     	; 0x2bfe <LCD_Write_Char+0x420>
		__ticks = 1;
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e2 5b       	subi	r30, 0xB2	; 178
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	80 83       	st	Z, r24
    2bfc:	64 c0       	rjmp	.+200    	; 0x2cc6 <LCD_Write_Char+0x4e8>
	else if (__tmp > 65535)
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e0 5b       	subi	r30, 0xB0	; 176
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	60 81       	ld	r22, Z
    2c06:	71 81       	ldd	r23, Z+1	; 0x01
    2c08:	82 81       	ldd	r24, Z+2	; 0x02
    2c0a:	93 81       	ldd	r25, Z+3	; 0x03
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	3f ef       	ldi	r19, 0xFF	; 255
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	57 e4       	ldi	r21, 0x47	; 71
    2c14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	0c f0       	brlt	.+2      	; 0x2c1e <LCD_Write_Char+0x440>
    2c1c:	43 c0       	rjmp	.+134    	; 0x2ca4 <LCD_Write_Char+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1e:	fe 01       	movw	r30, r28
    2c20:	ec 5a       	subi	r30, 0xAC	; 172
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	8e 01       	movw	r16, r28
    2c3e:	02 5b       	subi	r16, 0xB2	; 178
    2c40:	1f 4f       	sbci	r17, 0xFF	; 255
    2c42:	bc 01       	movw	r22, r24
    2c44:	cd 01       	movw	r24, r26
    2c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	f8 01       	movw	r30, r16
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	80 83       	st	Z, r24
    2c54:	1f c0       	rjmp	.+62     	; 0x2c94 <LCD_Write_Char+0x4b6>
    2c56:	fe 01       	movw	r30, r28
    2c58:	e4 5b       	subi	r30, 0xB4	; 180
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	88 ec       	ldi	r24, 0xC8	; 200
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c64:	fe 01       	movw	r30, r28
    2c66:	e4 5b       	subi	r30, 0xB4	; 180
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	80 81       	ld	r24, Z
    2c6c:	91 81       	ldd	r25, Z+1	; 0x01
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <LCD_Write_Char+0x490>
    2c72:	fe 01       	movw	r30, r28
    2c74:	e4 5b       	subi	r30, 0xB4	; 180
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7c:	de 01       	movw	r26, r28
    2c7e:	a2 5b       	subi	r26, 0xB2	; 178
    2c80:	bf 4f       	sbci	r27, 0xFF	; 255
    2c82:	fe 01       	movw	r30, r28
    2c84:	e2 5b       	subi	r30, 0xB2	; 178
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 81       	ld	r24, Z
    2c8a:	91 81       	ldd	r25, Z+1	; 0x01
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	11 96       	adiw	r26, 0x01	; 1
    2c90:	9c 93       	st	X, r25
    2c92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c94:	fe 01       	movw	r30, r28
    2c96:	e2 5b       	subi	r30, 0xB2	; 178
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	91 81       	ldd	r25, Z+1	; 0x01
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	d1 f6       	brne	.-76     	; 0x2c56 <LCD_Write_Char+0x478>
    2ca2:	4b c0       	rjmp	.+150    	; 0x2d3a <LCD_Write_Char+0x55c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca4:	8e 01       	movw	r16, r28
    2ca6:	02 5b       	subi	r16, 0xB2	; 178
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	e0 5b       	subi	r30, 0xB0	; 176
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	f8 01       	movw	r30, r16
    2cc2:	91 83       	std	Z+1, r25	; 0x01
    2cc4:	80 83       	st	Z, r24
    2cc6:	de 01       	movw	r26, r28
    2cc8:	a6 5b       	subi	r26, 0xB6	; 182
    2cca:	bf 4f       	sbci	r27, 0xFF	; 255
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e2 5b       	subi	r30, 0xB2	; 178
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	11 96       	adiw	r26, 0x01	; 1
    2cd8:	9c 93       	st	X, r25
    2cda:	8e 93       	st	-X, r24
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e6 5b       	subi	r30, 0xB6	; 182
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <LCD_Write_Char+0x508>
    2cea:	fe 01       	movw	r30, r28
    2cec:	e6 5b       	subi	r30, 0xB6	; 182
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
    2cf4:	22 c0       	rjmp	.+68     	; 0x2d3a <LCD_Write_Char+0x55c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cf6:	8e 01       	movw	r16, r28
    2cf8:	08 5a       	subi	r16, 0xA8	; 168
    2cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	e7 5a       	subi	r30, 0xA7	; 167
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	60 81       	ld	r22, Z
    2d04:	71 81       	ldd	r23, Z+1	; 0x01
    2d06:	82 81       	ldd	r24, Z+2	; 0x02
    2d08:	93 81       	ldd	r25, Z+3	; 0x03
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	f8 01       	movw	r30, r16
    2d14:	80 83       	st	Z, r24
    2d16:	de 01       	movw	r26, r28
    2d18:	a7 5b       	subi	r26, 0xB7	; 183
    2d1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e8 5a       	subi	r30, 0xA8	; 168
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	80 81       	ld	r24, Z
    2d24:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d26:	fe 01       	movw	r30, r28
    2d28:	e7 5b       	subi	r30, 0xB7	; 183
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	8a 95       	dec	r24
    2d30:	f1 f7       	brne	.-4      	; 0x2d2e <LCD_Write_Char+0x550>
    2d32:	fe 01       	movw	r30, r28
    2d34:	e7 5b       	subi	r30, 0xB7	; 183
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 83       	st	Z, r24
	_delay_us(1);

	/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
	SetPinValue(PIN4,Data_Port,GET_BIT(chr,0));
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e7 58       	subi	r30, 0x87	; 135
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	98 2f       	mov	r25, r24
    2d44:	91 70       	andi	r25, 0x01	; 1
    2d46:	84 e0       	ldi	r24, 0x04	; 4
    2d48:	62 e0       	ldi	r22, 0x02	; 2
    2d4a:	49 2f       	mov	r20, r25
    2d4c:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
	SetPinValue(PIN5,Data_Port,GET_BIT(chr,1));
    2d50:	fe 01       	movw	r30, r28
    2d52:	e7 58       	subi	r30, 0x87	; 135
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	86 95       	lsr	r24
    2d5a:	98 2f       	mov	r25, r24
    2d5c:	91 70       	andi	r25, 0x01	; 1
    2d5e:	85 e0       	ldi	r24, 0x05	; 5
    2d60:	62 e0       	ldi	r22, 0x02	; 2
    2d62:	49 2f       	mov	r20, r25
    2d64:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
	SetPinValue(PIN6,Data_Port,GET_BIT(chr,2));
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e7 58       	subi	r30, 0x87	; 135
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 81       	ld	r24, Z
    2d70:	86 95       	lsr	r24
    2d72:	86 95       	lsr	r24
    2d74:	98 2f       	mov	r25, r24
    2d76:	91 70       	andi	r25, 0x01	; 1
    2d78:	86 e0       	ldi	r24, 0x06	; 6
    2d7a:	62 e0       	ldi	r22, 0x02	; 2
    2d7c:	49 2f       	mov	r20, r25
    2d7e:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
	SetPinValue(PIN7,Data_Port,GET_BIT(chr,3));
    2d82:	fe 01       	movw	r30, r28
    2d84:	e7 58       	subi	r30, 0x87	; 135
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	80 81       	ld	r24, Z
    2d8a:	86 95       	lsr	r24
    2d8c:	86 95       	lsr	r24
    2d8e:	86 95       	lsr	r24
    2d90:	98 2f       	mov	r25, r24
    2d92:	91 70       	andi	r25, 0x01	; 1
    2d94:	87 e0       	ldi	r24, 0x07	; 7
    2d96:	62 e0       	ldi	r22, 0x02	; 2
    2d98:	49 2f       	mov	r20, r25
    2d9a:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>

	/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
	SetPinValue(E,Control_Port,HIGH);
    2d9e:	82 e0       	ldi	r24, 0x02	; 2
    2da0:	63 e0       	ldi	r22, 0x03	; 3
    2da2:	41 e0       	ldi	r20, 0x01	; 1
    2da4:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
    2da8:	fe 01       	movw	r30, r28
    2daa:	eb 5b       	subi	r30, 0xBB	; 187
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	a0 e8       	ldi	r26, 0x80	; 128
    2db4:	bf e3       	ldi	r27, 0x3F	; 63
    2db6:	80 83       	st	Z, r24
    2db8:	91 83       	std	Z+1, r25	; 0x01
    2dba:	a2 83       	std	Z+2, r26	; 0x02
    2dbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2dbe:	8e 01       	movw	r16, r28
    2dc0:	0f 5b       	subi	r16, 0xBF	; 191
    2dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	eb 5b       	subi	r30, 0xBB	; 187
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	2b ea       	ldi	r18, 0xAB	; 171
    2dd4:	3a ea       	ldi	r19, 0xAA	; 170
    2dd6:	4a e2       	ldi	r20, 0x2A	; 42
    2dd8:	50 e4       	ldi	r21, 0x40	; 64
    2dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	f8 01       	movw	r30, r16
    2de4:	80 83       	st	Z, r24
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	a2 83       	std	Z+2, r26	; 0x02
    2dea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dec:	fe 01       	movw	r30, r28
    2dee:	ef 5b       	subi	r30, 0xBF	; 191
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	82 81       	ldd	r24, Z+2	; 0x02
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e06:	88 23       	and	r24, r24
    2e08:	34 f4       	brge	.+12     	; 0x2e16 <LCD_Write_Char+0x638>
		__ticks = 1;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	e0 5c       	subi	r30, 0xC0	; 192
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	80 83       	st	Z, r24
    2e14:	9d c0       	rjmp	.+314    	; 0x2f50 <LCD_Write_Char+0x772>
	else if (__tmp > 255)
    2e16:	fe 01       	movw	r30, r28
    2e18:	ef 5b       	subi	r30, 0xBF	; 191
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	60 81       	ld	r22, Z
    2e1e:	71 81       	ldd	r23, Z+1	; 0x01
    2e20:	82 81       	ldd	r24, Z+2	; 0x02
    2e22:	93 81       	ldd	r25, Z+3	; 0x03
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4f e7       	ldi	r20, 0x7F	; 127
    2e2a:	53 e4       	ldi	r21, 0x43	; 67
    2e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	0c f0       	brlt	.+2      	; 0x2e36 <LCD_Write_Char+0x658>
    2e34:	7e c0       	rjmp	.+252    	; 0x2f32 <LCD_Write_Char+0x754>
	{
		_delay_ms(__us / 1000.0);
    2e36:	fe 01       	movw	r30, r28
    2e38:	eb 5b       	subi	r30, 0xBB	; 187
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	60 81       	ld	r22, Z
    2e3e:	71 81       	ldd	r23, Z+1	; 0x01
    2e40:	82 81       	ldd	r24, Z+2	; 0x02
    2e42:	93 81       	ldd	r25, Z+3	; 0x03
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	4a e7       	ldi	r20, 0x7A	; 122
    2e4a:	54 e4       	ldi	r21, 0x44	; 68
    2e4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	8c af       	std	Y+60, r24	; 0x3c
    2e56:	9d af       	std	Y+61, r25	; 0x3d
    2e58:	ae af       	std	Y+62, r26	; 0x3e
    2e5a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e5e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e60:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e62:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a ef       	ldi	r20, 0xFA	; 250
    2e6a:	54 e4       	ldi	r21, 0x44	; 68
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	88 af       	std	Y+56, r24	; 0x38
    2e76:	99 af       	std	Y+57, r25	; 0x39
    2e78:	aa af       	std	Y+58, r26	; 0x3a
    2e7a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2e7c:	68 ad       	ldd	r22, Y+56	; 0x38
    2e7e:	79 ad       	ldd	r23, Y+57	; 0x39
    2e80:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e82:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	2c f4       	brge	.+10     	; 0x2e9e <LCD_Write_Char+0x6c0>
		__ticks = 1;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9f ab       	std	Y+55, r25	; 0x37
    2e9a:	8e ab       	std	Y+54, r24	; 0x36
    2e9c:	3f c0       	rjmp	.+126    	; 0x2f1c <LCD_Write_Char+0x73e>
	else if (__tmp > 65535)
    2e9e:	68 ad       	ldd	r22, Y+56	; 0x38
    2ea0:	79 ad       	ldd	r23, Y+57	; 0x39
    2ea2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ea4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	3f ef       	ldi	r19, 0xFF	; 255
    2eaa:	4f e7       	ldi	r20, 0x7F	; 127
    2eac:	57 e4       	ldi	r21, 0x47	; 71
    2eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eb2:	18 16       	cp	r1, r24
    2eb4:	4c f5       	brge	.+82     	; 0x2f08 <LCD_Write_Char+0x72a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb6:	6c ad       	ldd	r22, Y+60	; 0x3c
    2eb8:	7d ad       	ldd	r23, Y+61	; 0x3d
    2eba:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ebc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e2       	ldi	r20, 0x20	; 32
    2ec4:	51 e4       	ldi	r21, 0x41	; 65
    2ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9f ab       	std	Y+55, r25	; 0x37
    2edc:	8e ab       	std	Y+54, r24	; 0x36
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <LCD_Write_Char+0x720>
    2ee0:	88 ec       	ldi	r24, 0xC8	; 200
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	9d ab       	std	Y+53, r25	; 0x35
    2ee6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ee8:	8c a9       	ldd	r24, Y+52	; 0x34
    2eea:	9d a9       	ldd	r25, Y+53	; 0x35
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <LCD_Write_Char+0x70e>
    2ef0:	9d ab       	std	Y+53, r25	; 0x35
    2ef2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef4:	8e a9       	ldd	r24, Y+54	; 0x36
    2ef6:	9f a9       	ldd	r25, Y+55	; 0x37
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	9f ab       	std	Y+55, r25	; 0x37
    2efc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	8e a9       	ldd	r24, Y+54	; 0x36
    2f00:	9f a9       	ldd	r25, Y+55	; 0x37
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	69 f7       	brne	.-38     	; 0x2ee0 <LCD_Write_Char+0x702>
    2f06:	2d c0       	rjmp	.+90     	; 0x2f62 <LCD_Write_Char+0x784>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f08:	68 ad       	ldd	r22, Y+56	; 0x38
    2f0a:	79 ad       	ldd	r23, Y+57	; 0x39
    2f0c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f0e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9f ab       	std	Y+55, r25	; 0x37
    2f1a:	8e ab       	std	Y+54, r24	; 0x36
    2f1c:	8e a9       	ldd	r24, Y+54	; 0x36
    2f1e:	9f a9       	ldd	r25, Y+55	; 0x37
    2f20:	9b ab       	std	Y+51, r25	; 0x33
    2f22:	8a ab       	std	Y+50, r24	; 0x32
    2f24:	8a a9       	ldd	r24, Y+50	; 0x32
    2f26:	9b a9       	ldd	r25, Y+51	; 0x33
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <LCD_Write_Char+0x74a>
    2f2c:	9b ab       	std	Y+51, r25	; 0x33
    2f2e:	8a ab       	std	Y+50, r24	; 0x32
    2f30:	18 c0       	rjmp	.+48     	; 0x2f62 <LCD_Write_Char+0x784>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f32:	fe 01       	movw	r30, r28
    2f34:	ef 5b       	subi	r30, 0xBF	; 191
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	fe 01       	movw	r30, r28
    2f4a:	e0 5c       	subi	r30, 0xC0	; 192
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	80 83       	st	Z, r24
    2f50:	fe 01       	movw	r30, r28
    2f52:	e0 5c       	subi	r30, 0xC0	; 192
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	80 81       	ld	r24, Z
    2f58:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f5a:	89 a9       	ldd	r24, Y+49	; 0x31
    2f5c:	8a 95       	dec	r24
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <LCD_Write_Char+0x77e>
    2f60:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	SetPinValue(E,Control_Port,LOW);
    2f62:	82 e0       	ldi	r24, 0x02	; 2
    2f64:	63 e0       	ldi	r22, 0x03	; 3
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	0e 94 a4 08 	call	0x1148	; 0x1148 <SetPinValue>
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	a0 e8       	ldi	r26, 0x80	; 128
    2f72:	bf e3       	ldi	r27, 0x3F	; 63
    2f74:	8d a7       	std	Y+45, r24	; 0x2d
    2f76:	9e a7       	std	Y+46, r25	; 0x2e
    2f78:	af a7       	std	Y+47, r26	; 0x2f
    2f7a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f7c:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f7e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f80:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f82:	98 a9       	ldd	r25, Y+48	; 0x30
    2f84:	2b ea       	ldi	r18, 0xAB	; 171
    2f86:	3a ea       	ldi	r19, 0xAA	; 170
    2f88:	4a e2       	ldi	r20, 0x2A	; 42
    2f8a:	50 e4       	ldi	r21, 0x40	; 64
    2f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	89 a7       	std	Y+41, r24	; 0x29
    2f96:	9a a7       	std	Y+42, r25	; 0x2a
    2f98:	ab a7       	std	Y+43, r26	; 0x2b
    2f9a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2f9c:	69 a5       	ldd	r22, Y+41	; 0x29
    2f9e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fa0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fa2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e8       	ldi	r20, 0x80	; 128
    2faa:	5f e3       	ldi	r21, 0x3F	; 63
    2fac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb0:	88 23       	and	r24, r24
    2fb2:	1c f4       	brge	.+6      	; 0x2fba <LCD_Write_Char+0x7dc>
		__ticks = 1;
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	88 a7       	std	Y+40, r24	; 0x28
    2fb8:	91 c0       	rjmp	.+290    	; 0x30dc <LCD_Write_Char+0x8fe>
	else if (__tmp > 255)
    2fba:	69 a5       	ldd	r22, Y+41	; 0x29
    2fbc:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fc0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	4f e7       	ldi	r20, 0x7F	; 127
    2fc8:	53 e4       	ldi	r21, 0x43	; 67
    2fca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fce:	18 16       	cp	r1, r24
    2fd0:	0c f0       	brlt	.+2      	; 0x2fd4 <LCD_Write_Char+0x7f6>
    2fd2:	7b c0       	rjmp	.+246    	; 0x30ca <LCD_Write_Char+0x8ec>
	{
		_delay_ms(__us / 1000.0);
    2fd4:	6d a5       	ldd	r22, Y+45	; 0x2d
    2fd6:	7e a5       	ldd	r23, Y+46	; 0x2e
    2fd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fda:	98 a9       	ldd	r25, Y+48	; 0x30
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	4a e7       	ldi	r20, 0x7A	; 122
    2fe2:	54 e4       	ldi	r21, 0x44	; 68
    2fe4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	8c a3       	std	Y+36, r24	; 0x24
    2fee:	9d a3       	std	Y+37, r25	; 0x25
    2ff0:	ae a3       	std	Y+38, r26	; 0x26
    2ff2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff4:	6c a1       	ldd	r22, Y+36	; 0x24
    2ff6:	7d a1       	ldd	r23, Y+37	; 0x25
    2ff8:	8e a1       	ldd	r24, Y+38	; 0x26
    2ffa:	9f a1       	ldd	r25, Y+39	; 0x27
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	4a ef       	ldi	r20, 0xFA	; 250
    3002:	54 e4       	ldi	r21, 0x44	; 68
    3004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	88 a3       	std	Y+32, r24	; 0x20
    300e:	99 a3       	std	Y+33, r25	; 0x21
    3010:	aa a3       	std	Y+34, r26	; 0x22
    3012:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3014:	68 a1       	ldd	r22, Y+32	; 0x20
    3016:	79 a1       	ldd	r23, Y+33	; 0x21
    3018:	8a a1       	ldd	r24, Y+34	; 0x22
    301a:	9b a1       	ldd	r25, Y+35	; 0x23
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e8       	ldi	r20, 0x80	; 128
    3022:	5f e3       	ldi	r21, 0x3F	; 63
    3024:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3028:	88 23       	and	r24, r24
    302a:	2c f4       	brge	.+10     	; 0x3036 <LCD_Write_Char+0x858>
		__ticks = 1;
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	9f 8f       	std	Y+31, r25	; 0x1f
    3032:	8e 8f       	std	Y+30, r24	; 0x1e
    3034:	3f c0       	rjmp	.+126    	; 0x30b4 <LCD_Write_Char+0x8d6>
	else if (__tmp > 65535)
    3036:	68 a1       	ldd	r22, Y+32	; 0x20
    3038:	79 a1       	ldd	r23, Y+33	; 0x21
    303a:	8a a1       	ldd	r24, Y+34	; 0x22
    303c:	9b a1       	ldd	r25, Y+35	; 0x23
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	3f ef       	ldi	r19, 0xFF	; 255
    3042:	4f e7       	ldi	r20, 0x7F	; 127
    3044:	57 e4       	ldi	r21, 0x47	; 71
    3046:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    304a:	18 16       	cp	r1, r24
    304c:	4c f5       	brge	.+82     	; 0x30a0 <LCD_Write_Char+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304e:	6c a1       	ldd	r22, Y+36	; 0x24
    3050:	7d a1       	ldd	r23, Y+37	; 0x25
    3052:	8e a1       	ldd	r24, Y+38	; 0x26
    3054:	9f a1       	ldd	r25, Y+39	; 0x27
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e2       	ldi	r20, 0x20	; 32
    305c:	51 e4       	ldi	r21, 0x41	; 65
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9f 8f       	std	Y+31, r25	; 0x1f
    3074:	8e 8f       	std	Y+30, r24	; 0x1e
    3076:	0f c0       	rjmp	.+30     	; 0x3096 <LCD_Write_Char+0x8b8>
    3078:	88 ec       	ldi	r24, 0xC8	; 200
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	9d 8f       	std	Y+29, r25	; 0x1d
    307e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3080:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3082:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <LCD_Write_Char+0x8a6>
    3088:	9d 8f       	std	Y+29, r25	; 0x1d
    308a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    308e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	9f 8f       	std	Y+31, r25	; 0x1f
    3094:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3096:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3098:	9f 8d       	ldd	r25, Y+31	; 0x1f
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	69 f7       	brne	.-38     	; 0x3078 <LCD_Write_Char+0x89a>
    309e:	24 c0       	rjmp	.+72     	; 0x30e8 <LCD_Write_Char+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a0:	68 a1       	ldd	r22, Y+32	; 0x20
    30a2:	79 a1       	ldd	r23, Y+33	; 0x21
    30a4:	8a a1       	ldd	r24, Y+34	; 0x22
    30a6:	9b a1       	ldd	r25, Y+35	; 0x23
    30a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	9f 8f       	std	Y+31, r25	; 0x1f
    30b2:	8e 8f       	std	Y+30, r24	; 0x1e
    30b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30b8:	9b 8f       	std	Y+27, r25	; 0x1b
    30ba:	8a 8f       	std	Y+26, r24	; 0x1a
    30bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <LCD_Write_Char+0x8e2>
    30c4:	9b 8f       	std	Y+27, r25	; 0x1b
    30c6:	8a 8f       	std	Y+26, r24	; 0x1a
    30c8:	0f c0       	rjmp	.+30     	; 0x30e8 <LCD_Write_Char+0x90a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30ca:	69 a5       	ldd	r22, Y+41	; 0x29
    30cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    30ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    30d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	88 a7       	std	Y+40, r24	; 0x28
    30dc:	88 a5       	ldd	r24, Y+40	; 0x28
    30de:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30e0:	89 8d       	ldd	r24, Y+25	; 0x19
    30e2:	8a 95       	dec	r24
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <LCD_Write_Char+0x904>
    30e6:	89 8f       	std	Y+25, r24	; 0x19
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	a8 ec       	ldi	r26, 0xC8	; 200
    30ee:	b2 e4       	ldi	r27, 0x42	; 66
    30f0:	8d 8b       	std	Y+21, r24	; 0x15
    30f2:	9e 8b       	std	Y+22, r25	; 0x16
    30f4:	af 8b       	std	Y+23, r26	; 0x17
    30f6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30f8:	6d 89       	ldd	r22, Y+21	; 0x15
    30fa:	7e 89       	ldd	r23, Y+22	; 0x16
    30fc:	8f 89       	ldd	r24, Y+23	; 0x17
    30fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3100:	2b ea       	ldi	r18, 0xAB	; 171
    3102:	3a ea       	ldi	r19, 0xAA	; 170
    3104:	4a e2       	ldi	r20, 0x2A	; 42
    3106:	50 e4       	ldi	r21, 0x40	; 64
    3108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	89 8b       	std	Y+17, r24	; 0x11
    3112:	9a 8b       	std	Y+18, r25	; 0x12
    3114:	ab 8b       	std	Y+19, r26	; 0x13
    3116:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3118:	69 89       	ldd	r22, Y+17	; 0x11
    311a:	7a 89       	ldd	r23, Y+18	; 0x12
    311c:	8b 89       	ldd	r24, Y+19	; 0x13
    311e:	9c 89       	ldd	r25, Y+20	; 0x14
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e8       	ldi	r20, 0x80	; 128
    3126:	5f e3       	ldi	r21, 0x3F	; 63
    3128:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    312c:	88 23       	and	r24, r24
    312e:	1c f4       	brge	.+6      	; 0x3136 <LCD_Write_Char+0x958>
		__ticks = 1;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	88 8b       	std	Y+16, r24	; 0x10
    3134:	91 c0       	rjmp	.+290    	; 0x3258 <LCD_Write_Char+0xa7a>
	else if (__tmp > 255)
    3136:	69 89       	ldd	r22, Y+17	; 0x11
    3138:	7a 89       	ldd	r23, Y+18	; 0x12
    313a:	8b 89       	ldd	r24, Y+19	; 0x13
    313c:	9c 89       	ldd	r25, Y+20	; 0x14
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	4f e7       	ldi	r20, 0x7F	; 127
    3144:	53 e4       	ldi	r21, 0x43	; 67
    3146:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    314a:	18 16       	cp	r1, r24
    314c:	0c f0       	brlt	.+2      	; 0x3150 <LCD_Write_Char+0x972>
    314e:	7b c0       	rjmp	.+246    	; 0x3246 <LCD_Write_Char+0xa68>
	{
		_delay_ms(__us / 1000.0);
    3150:	6d 89       	ldd	r22, Y+21	; 0x15
    3152:	7e 89       	ldd	r23, Y+22	; 0x16
    3154:	8f 89       	ldd	r24, Y+23	; 0x17
    3156:	98 8d       	ldd	r25, Y+24	; 0x18
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	4a e7       	ldi	r20, 0x7A	; 122
    315e:	54 e4       	ldi	r21, 0x44	; 68
    3160:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	8c 87       	std	Y+12, r24	; 0x0c
    316a:	9d 87       	std	Y+13, r25	; 0x0d
    316c:	ae 87       	std	Y+14, r26	; 0x0e
    316e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3170:	6c 85       	ldd	r22, Y+12	; 0x0c
    3172:	7d 85       	ldd	r23, Y+13	; 0x0d
    3174:	8e 85       	ldd	r24, Y+14	; 0x0e
    3176:	9f 85       	ldd	r25, Y+15	; 0x0f
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	4a ef       	ldi	r20, 0xFA	; 250
    317e:	54 e4       	ldi	r21, 0x44	; 68
    3180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	88 87       	std	Y+8, r24	; 0x08
    318a:	99 87       	std	Y+9, r25	; 0x09
    318c:	aa 87       	std	Y+10, r26	; 0x0a
    318e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3190:	68 85       	ldd	r22, Y+8	; 0x08
    3192:	79 85       	ldd	r23, Y+9	; 0x09
    3194:	8a 85       	ldd	r24, Y+10	; 0x0a
    3196:	9b 85       	ldd	r25, Y+11	; 0x0b
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	40 e8       	ldi	r20, 0x80	; 128
    319e:	5f e3       	ldi	r21, 0x3F	; 63
    31a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31a4:	88 23       	and	r24, r24
    31a6:	2c f4       	brge	.+10     	; 0x31b2 <LCD_Write_Char+0x9d4>
		__ticks = 1;
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	9f 83       	std	Y+7, r25	; 0x07
    31ae:	8e 83       	std	Y+6, r24	; 0x06
    31b0:	3f c0       	rjmp	.+126    	; 0x3230 <LCD_Write_Char+0xa52>
	else if (__tmp > 65535)
    31b2:	68 85       	ldd	r22, Y+8	; 0x08
    31b4:	79 85       	ldd	r23, Y+9	; 0x09
    31b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	3f ef       	ldi	r19, 0xFF	; 255
    31be:	4f e7       	ldi	r20, 0x7F	; 127
    31c0:	57 e4       	ldi	r21, 0x47	; 71
    31c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c6:	18 16       	cp	r1, r24
    31c8:	4c f5       	brge	.+82     	; 0x321c <LCD_Write_Char+0xa3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    31cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    31ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    31d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e2       	ldi	r20, 0x20	; 32
    31d8:	51 e4       	ldi	r21, 0x41	; 65
    31da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	bc 01       	movw	r22, r24
    31e4:	cd 01       	movw	r24, r26
    31e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	9f 83       	std	Y+7, r25	; 0x07
    31f0:	8e 83       	std	Y+6, r24	; 0x06
    31f2:	0f c0       	rjmp	.+30     	; 0x3212 <LCD_Write_Char+0xa34>
    31f4:	88 ec       	ldi	r24, 0xC8	; 200
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	9d 83       	std	Y+5, r25	; 0x05
    31fa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31fc:	8c 81       	ldd	r24, Y+4	; 0x04
    31fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	f1 f7       	brne	.-4      	; 0x3200 <LCD_Write_Char+0xa22>
    3204:	9d 83       	std	Y+5, r25	; 0x05
    3206:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3208:	8e 81       	ldd	r24, Y+6	; 0x06
    320a:	9f 81       	ldd	r25, Y+7	; 0x07
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	9f 83       	std	Y+7, r25	; 0x07
    3210:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3212:	8e 81       	ldd	r24, Y+6	; 0x06
    3214:	9f 81       	ldd	r25, Y+7	; 0x07
    3216:	00 97       	sbiw	r24, 0x00	; 0
    3218:	69 f7       	brne	.-38     	; 0x31f4 <LCD_Write_Char+0xa16>
    321a:	24 c0       	rjmp	.+72     	; 0x3264 <LCD_Write_Char+0xa86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321c:	68 85       	ldd	r22, Y+8	; 0x08
    321e:	79 85       	ldd	r23, Y+9	; 0x09
    3220:	8a 85       	ldd	r24, Y+10	; 0x0a
    3222:	9b 85       	ldd	r25, Y+11	; 0x0b
    3224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	9f 83       	std	Y+7, r25	; 0x07
    322e:	8e 83       	std	Y+6, r24	; 0x06
    3230:	8e 81       	ldd	r24, Y+6	; 0x06
    3232:	9f 81       	ldd	r25, Y+7	; 0x07
    3234:	9b 83       	std	Y+3, r25	; 0x03
    3236:	8a 83       	std	Y+2, r24	; 0x02
    3238:	8a 81       	ldd	r24, Y+2	; 0x02
    323a:	9b 81       	ldd	r25, Y+3	; 0x03
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	f1 f7       	brne	.-4      	; 0x323c <LCD_Write_Char+0xa5e>
    3240:	9b 83       	std	Y+3, r25	; 0x03
    3242:	8a 83       	std	Y+2, r24	; 0x02
    3244:	0f c0       	rjmp	.+30     	; 0x3264 <LCD_Write_Char+0xa86>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3246:	69 89       	ldd	r22, Y+17	; 0x11
    3248:	7a 89       	ldd	r23, Y+18	; 0x12
    324a:	8b 89       	ldd	r24, Y+19	; 0x13
    324c:	9c 89       	ldd	r25, Y+20	; 0x14
    324e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	88 8b       	std	Y+16, r24	; 0x10
    3258:	88 89       	ldd	r24, Y+16	; 0x10
    325a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	8a 95       	dec	r24
    3260:	f1 f7       	brne	.-4      	; 0x325e <LCD_Write_Char+0xa80>
    3262:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

	//wait 2 ms after every instruction
	_delay_us(100);
}
    3264:	c7 58       	subi	r28, 0x87	; 135
    3266:	df 4f       	sbci	r29, 0xFF	; 255
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	f8 94       	cli
    326c:	de bf       	out	0x3e, r29	; 62
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	cd bf       	out	0x3d, r28	; 61
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	08 95       	ret

0000327c <LCD_Write_String>:

void LCD_Write_String(u8* str)
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	00 d0       	rcall	.+0      	; 0x3282 <LCD_Write_String+0x6>
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	89 83       	std	Y+1, r24	; 0x01
    328a:	0a c0       	rjmp	.+20     	; 0x32a0 <LCD_Write_String+0x24>
	while(*str)
	{
		LCD_Write_Char(*str);
    328c:	e9 81       	ldd	r30, Y+1	; 0x01
    328e:	fa 81       	ldd	r31, Y+2	; 0x02
    3290:	80 81       	ld	r24, Z
    3292:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
		str++;
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}

void LCD_Write_String(u8* str)
{
	while(*str)
    32a0:	e9 81       	ldd	r30, Y+1	; 0x01
    32a2:	fa 81       	ldd	r31, Y+2	; 0x02
    32a4:	80 81       	ld	r24, Z
    32a6:	88 23       	and	r24, r24
    32a8:	89 f7       	brne	.-30     	; 0x328c <LCD_Write_String+0x10>
	{
		LCD_Write_Char(*str);
		str++;
	}
}
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0
    32ae:	cf 91       	pop	r28
    32b0:	df 91       	pop	r29
    32b2:	08 95       	ret

000032b4 <LCD_Function_Set>:


void LCD_Function_Set()
{
    32b4:	df 93       	push	r29
    32b6:	cf 93       	push	r28
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
	LCD_Write_Cmd(0x20);
    32bc:	80 e2       	ldi	r24, 0x20	; 32
    32be:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
	LCD_Write_Cmd(0x20);
    32c2:	80 e2       	ldi	r24, 0x20	; 32
    32c4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
	LCD_Write_Cmd(0x80);
    32c8:	80 e8       	ldi	r24, 0x80	; 128
    32ca:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
}
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <LCD_Display_Control>:

void LCD_Display_Control(u8 display,u8 cursor,u8 blinking)
{
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	00 d0       	rcall	.+0      	; 0x32da <LCD_Display_Control+0x6>
    32da:	0f 92       	push	r0
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	6a 83       	std	Y+2, r22	; 0x02
    32e4:	4b 83       	std	Y+3, r20	; 0x03
	if(display == ON && cursor == ON && blinking == ON)
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	81 30       	cpi	r24, 0x01	; 1
    32ea:	69 f4       	brne	.+26     	; 0x3306 <LCD_Display_Control+0x32>
    32ec:	8a 81       	ldd	r24, Y+2	; 0x02
    32ee:	81 30       	cpi	r24, 0x01	; 1
    32f0:	51 f4       	brne	.+20     	; 0x3306 <LCD_Display_Control+0x32>
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	81 30       	cpi	r24, 0x01	; 1
    32f6:	39 f4       	brne	.+14     	; 0x3306 <LCD_Display_Control+0x32>
	{
		LCD_Write_Cmd(0x00);
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
		LCD_Write_Cmd(0xF0);
    32fe:	80 ef       	ldi	r24, 0xF0	; 240
    3300:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
    3304:	3f c0       	rjmp	.+126    	; 0x3384 <LCD_Display_Control+0xb0>
	}

	else if(display == ON && cursor == OFF && blinking == OFF)
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	81 30       	cpi	r24, 0x01	; 1
    330a:	69 f4       	brne	.+26     	; 0x3326 <LCD_Display_Control+0x52>
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	88 23       	and	r24, r24
    3310:	51 f4       	brne	.+20     	; 0x3326 <LCD_Display_Control+0x52>
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	88 23       	and	r24, r24
    3316:	39 f4       	brne	.+14     	; 0x3326 <LCD_Display_Control+0x52>
	{
		LCD_Write_Cmd(0x00);
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
		LCD_Write_Cmd(0xC0);
    331e:	80 ec       	ldi	r24, 0xC0	; 192
    3320:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
    3324:	2f c0       	rjmp	.+94     	; 0x3384 <LCD_Display_Control+0xb0>
	}
	else if(display == ON && cursor == ON && blinking == OFF)
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	81 30       	cpi	r24, 0x01	; 1
    332a:	69 f4       	brne	.+26     	; 0x3346 <LCD_Display_Control+0x72>
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	51 f4       	brne	.+20     	; 0x3346 <LCD_Display_Control+0x72>
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	88 23       	and	r24, r24
    3336:	39 f4       	brne	.+14     	; 0x3346 <LCD_Display_Control+0x72>
	{
		LCD_Write_Cmd(0x00);
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
		LCD_Write_Cmd(0xE0);
    333e:	80 ee       	ldi	r24, 0xE0	; 224
    3340:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
    3344:	1f c0       	rjmp	.+62     	; 0x3384 <LCD_Display_Control+0xb0>
	}
	else if(display == ON && cursor == OFF && blinking == ON)
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	81 30       	cpi	r24, 0x01	; 1
    334a:	69 f4       	brne	.+26     	; 0x3366 <LCD_Display_Control+0x92>
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
    334e:	88 23       	and	r24, r24
    3350:	51 f4       	brne	.+20     	; 0x3366 <LCD_Display_Control+0x92>
    3352:	8b 81       	ldd	r24, Y+3	; 0x03
    3354:	81 30       	cpi	r24, 0x01	; 1
    3356:	39 f4       	brne	.+14     	; 0x3366 <LCD_Display_Control+0x92>
	{
		LCD_Write_Cmd(0x00);
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
		LCD_Write_Cmd(0xD0);
    335e:	80 ed       	ldi	r24, 0xD0	; 208
    3360:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
    3364:	0f c0       	rjmp	.+30     	; 0x3384 <LCD_Display_Control+0xb0>
	}
	else if(display == OFF && cursor == OFF && blinking == OFF)
    3366:	89 81       	ldd	r24, Y+1	; 0x01
    3368:	88 23       	and	r24, r24
    336a:	61 f4       	brne	.+24     	; 0x3384 <LCD_Display_Control+0xb0>
    336c:	8a 81       	ldd	r24, Y+2	; 0x02
    336e:	88 23       	and	r24, r24
    3370:	49 f4       	brne	.+18     	; 0x3384 <LCD_Display_Control+0xb0>
    3372:	8b 81       	ldd	r24, Y+3	; 0x03
    3374:	88 23       	and	r24, r24
    3376:	31 f4       	brne	.+12     	; 0x3384 <LCD_Display_Control+0xb0>
	{
		LCD_Write_Cmd(0x00);
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
		LCD_Write_Cmd(0x80);
    337e:	80 e8       	ldi	r24, 0x80	; 128
    3380:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
	}

}
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	08 95       	ret

00003390 <LCD_Clear_Screen>:

void LCD_Clear_Screen()
{
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
	LCD_Write_Cmd(0x00);
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
	LCD_Write_Cmd(0x01);
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
}
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	08 95       	ret

000033aa <LCD_EntryMode>:

void LCD_EntryMode()
{
    33aa:	df 93       	push	r29
    33ac:	cf 93       	push	r28
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
	LCD_Write_Cmd(0x00);
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
	LCD_Write_Cmd(0x60);
    33b8:	80 e6       	ldi	r24, 0x60	; 96
    33ba:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
}
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <LCD_GoTo_XY>:

void LCD_GoTo_XY(u8 x,u8 y)
{
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	00 d0       	rcall	.+0      	; 0x33ca <LCD_GoTo_XY+0x6>
    33ca:	00 d0       	rcall	.+0      	; 0x33cc <LCD_GoTo_XY+0x8>
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	6a 83       	std	Y+2, r22	; 0x02
	switch(x)
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
    33d6:	28 2f       	mov	r18, r24
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	3c 83       	std	Y+4, r19	; 0x04
    33dc:	2b 83       	std	Y+3, r18	; 0x03
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	9c 81       	ldd	r25, Y+4	; 0x04
    33e2:	81 30       	cpi	r24, 0x01	; 1
    33e4:	91 05       	cpc	r25, r1
    33e6:	31 f0       	breq	.+12     	; 0x33f4 <LCD_GoTo_XY+0x30>
    33e8:	2b 81       	ldd	r18, Y+3	; 0x03
    33ea:	3c 81       	ldd	r19, Y+4	; 0x04
    33ec:	22 30       	cpi	r18, 0x02	; 2
    33ee:	31 05       	cpc	r19, r1
    33f0:	31 f0       	breq	.+12     	; 0x33fe <LCD_GoTo_XY+0x3a>
    33f2:	09 c0       	rjmp	.+18     	; 0x3406 <LCD_GoTo_XY+0x42>
	{
	case 1:
		LCD_Write_Cmd(y+127);
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	81 58       	subi	r24, 0x81	; 129
    33f8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
    33fc:	04 c0       	rjmp	.+8      	; 0x3406 <LCD_GoTo_XY+0x42>
		break;
	case 2:
		LCD_Write_Cmd(y+191);
    33fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3400:	81 54       	subi	r24, 0x41	; 65
    3402:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
		break;
	}
}
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	0f 90       	pop	r0
    340e:	cf 91       	pop	r28
    3410:	df 91       	pop	r29
    3412:	08 95       	ret

00003414 <LCD_ClearLine>:

void LCD_ClearLine(u8 line)
{
    3414:	df 93       	push	r29
    3416:	cf 93       	push	r28
    3418:	0f 92       	push	r0
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	89 83       	std	Y+1, r24	; 0x01
	LCD_GoTo_XY(line,1);
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	61 e0       	ldi	r22, 0x01	; 1
    3424:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_GoTo_XY>
	LCD_Write_String("                ");
    3428:	80 e6       	ldi	r24, 0x60	; 96
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
}
    3430:	0f 90       	pop	r0
    3432:	cf 91       	pop	r28
    3434:	df 91       	pop	r29
    3436:	08 95       	ret

00003438 <LCD_Cursor_Shift>:


void LCD_Cursor_Shift(unsigned char direction)
{
    3438:	df 93       	push	r29
    343a:	cf 93       	push	r28
    343c:	0f 92       	push	r0
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    3442:	89 83       	std	Y+1, r24	; 0x01
	if (direction == RIGHT)
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	81 30       	cpi	r24, 0x01	; 1
    3448:	21 f4       	brne	.+8      	; 0x3452 <LCD_Cursor_Shift+0x1a>
	{
		LCD_Write_Cmd(0x14);				// shift cursor 1 step to right
    344a:	84 e1       	ldi	r24, 0x14	; 20
    344c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
    3450:	06 c0       	rjmp	.+12     	; 0x345e <LCD_Cursor_Shift+0x26>
	}
	else if (direction == LEFT)
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	88 23       	and	r24, r24
    3456:	19 f4       	brne	.+6      	; 0x345e <LCD_Cursor_Shift+0x26>
	{
		LCD_Write_Cmd(0x10);				// shift cursor 1 step to left
    3458:	80 e1       	ldi	r24, 0x10	; 16
    345a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
	}
}
    345e:	0f 90       	pop	r0
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	08 95       	ret

00003466 <LCD_Display_Shift>:


void LCD_Display_Shift(unsigned char direction)
{
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	0f 92       	push	r0
    346c:	cd b7       	in	r28, 0x3d	; 61
    346e:	de b7       	in	r29, 0x3e	; 62
    3470:	89 83       	std	Y+1, r24	; 0x01
	if (direction == RIGHT)
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	81 30       	cpi	r24, 0x01	; 1
    3476:	21 f4       	brne	.+8      	; 0x3480 <LCD_Display_Shift+0x1a>
	{
		LCD_Write_Cmd(0x1c);				// shift data on LCD 1 step to right
    3478:	8c e1       	ldi	r24, 0x1C	; 28
    347a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
    347e:	06 c0       	rjmp	.+12     	; 0x348c <LCD_Display_Shift+0x26>
	}
	else if (direction == LEFT)
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	88 23       	and	r24, r24
    3484:	19 f4       	brne	.+6      	; 0x348c <LCD_Display_Shift+0x26>
	{
		LCD_Write_Cmd(0x18);				// shift data on LCD 1 step to left
    3486:	88 e1       	ldi	r24, 0x18	; 24
    3488:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
	}
}
    348c:	0f 90       	pop	r0
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <LCD_WriteExtraChar>:

void LCD_WriteExtraChar (u8* ExtraChar,u8 Y,u8 X)
{
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	64 97       	sbiw	r28, 0x14	; 20
    349e:	0f b6       	in	r0, 0x3f	; 63
    34a0:	f8 94       	cli
    34a2:	de bf       	out	0x3e, r29	; 62
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	cd bf       	out	0x3d, r28	; 61
    34a8:	9a 8b       	std	Y+18, r25	; 0x12
    34aa:	89 8b       	std	Y+17, r24	; 0x11
    34ac:	6b 8b       	std	Y+19, r22	; 0x13
    34ae:	4c 8b       	std	Y+20, r20	; 0x14
    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_Write_Cmd(64);
    34b0:	80 e4       	ldi	r24, 0x40	; 64
    34b2:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    34b6:	18 8a       	std	Y+16, r1	; 0x10
    34b8:	0e c0       	rjmp	.+28     	; 0x34d6 <LCD_WriteExtraChar+0x42>
	{
		LCD_Write_Char(ExtraChar[iteration1]);
    34ba:	88 89       	ldd	r24, Y+16	; 0x10
    34bc:	28 2f       	mov	r18, r24
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	89 89       	ldd	r24, Y+17	; 0x11
    34c2:	9a 89       	ldd	r25, Y+18	; 0x12
    34c4:	fc 01       	movw	r30, r24
    34c6:	e2 0f       	add	r30, r18
    34c8:	f3 1f       	adc	r31, r19
    34ca:	80 81       	ld	r24, Z
    34cc:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
{
    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_Write_Cmd(64);
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    34d0:	88 89       	ldd	r24, Y+16	; 0x10
    34d2:	8f 5f       	subi	r24, 0xFF	; 255
    34d4:	88 8b       	std	Y+16, r24	; 0x10
    34d6:	88 89       	ldd	r24, Y+16	; 0x10
    34d8:	80 34       	cpi	r24, 0x40	; 64
    34da:	78 f3       	brcs	.-34     	; 0x34ba <LCD_WriteExtraChar+0x26>
	{
		LCD_Write_Char(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_Write_Cmd(128);
    34dc:	80 e8       	ldi	r24, 0x80	; 128
    34de:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_Write_Cmd>
	LCD_GoTo_XY(Y,X);
    34e2:	8b 89       	ldd	r24, Y+19	; 0x13
    34e4:	6c 89       	ldd	r22, Y+20	; 0x14
    34e6:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_GoTo_XY>
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    34ea:	1f 86       	std	Y+15, r1	; 0x0f
    34ec:	78 c0       	rjmp	.+240    	; 0x35de <LCD_WriteExtraChar+0x14a>
	{
		/* Write bytes of DDRAM */
		LCD_Write_Char(iteration2);
    34ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    34f0:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	a0 ea       	ldi	r26, 0xA0	; 160
    34fa:	b0 e4       	ldi	r27, 0x40	; 64
    34fc:	8b 87       	std	Y+11, r24	; 0x0b
    34fe:	9c 87       	std	Y+12, r25	; 0x0c
    3500:	ad 87       	std	Y+13, r26	; 0x0d
    3502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3504:	6b 85       	ldd	r22, Y+11	; 0x0b
    3506:	7c 85       	ldd	r23, Y+12	; 0x0c
    3508:	8d 85       	ldd	r24, Y+13	; 0x0d
    350a:	9e 85       	ldd	r25, Y+14	; 0x0e
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	4a ef       	ldi	r20, 0xFA	; 250
    3512:	54 e4       	ldi	r21, 0x44	; 68
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	8f 83       	std	Y+7, r24	; 0x07
    351e:	98 87       	std	Y+8, r25	; 0x08
    3520:	a9 87       	std	Y+9, r26	; 0x09
    3522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3524:	6f 81       	ldd	r22, Y+7	; 0x07
    3526:	78 85       	ldd	r23, Y+8	; 0x08
    3528:	89 85       	ldd	r24, Y+9	; 0x09
    352a:	9a 85       	ldd	r25, Y+10	; 0x0a
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e8       	ldi	r20, 0x80	; 128
    3532:	5f e3       	ldi	r21, 0x3F	; 63
    3534:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3538:	88 23       	and	r24, r24
    353a:	2c f4       	brge	.+10     	; 0x3546 <LCD_WriteExtraChar+0xb2>
		__ticks = 1;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	3f c0       	rjmp	.+126    	; 0x35c4 <LCD_WriteExtraChar+0x130>
	else if (__tmp > 65535)
    3546:	6f 81       	ldd	r22, Y+7	; 0x07
    3548:	78 85       	ldd	r23, Y+8	; 0x08
    354a:	89 85       	ldd	r24, Y+9	; 0x09
    354c:	9a 85       	ldd	r25, Y+10	; 0x0a
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	3f ef       	ldi	r19, 0xFF	; 255
    3552:	4f e7       	ldi	r20, 0x7F	; 127
    3554:	57 e4       	ldi	r21, 0x47	; 71
    3556:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    355a:	18 16       	cp	r1, r24
    355c:	4c f5       	brge	.+82     	; 0x35b0 <LCD_WriteExtraChar+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3560:	7c 85       	ldd	r23, Y+12	; 0x0c
    3562:	8d 85       	ldd	r24, Y+13	; 0x0d
    3564:	9e 85       	ldd	r25, Y+14	; 0x0e
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e2       	ldi	r20, 0x20	; 32
    356c:	51 e4       	ldi	r21, 0x41	; 65
    356e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	bc 01       	movw	r22, r24
    3578:	cd 01       	movw	r24, r26
    357a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	9e 83       	std	Y+6, r25	; 0x06
    3584:	8d 83       	std	Y+5, r24	; 0x05
    3586:	0f c0       	rjmp	.+30     	; 0x35a6 <LCD_WriteExtraChar+0x112>
    3588:	88 ec       	ldi	r24, 0xC8	; 200
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9c 83       	std	Y+4, r25	; 0x04
    358e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <LCD_WriteExtraChar+0x100>
    3598:	9c 83       	std	Y+4, r25	; 0x04
    359a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	9e 83       	std	Y+6, r25	; 0x06
    35a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a6:	8d 81       	ldd	r24, Y+5	; 0x05
    35a8:	9e 81       	ldd	r25, Y+6	; 0x06
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	69 f7       	brne	.-38     	; 0x3588 <LCD_WriteExtraChar+0xf4>
    35ae:	14 c0       	rjmp	.+40     	; 0x35d8 <LCD_WriteExtraChar+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b0:	6f 81       	ldd	r22, Y+7	; 0x07
    35b2:	78 85       	ldd	r23, Y+8	; 0x08
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	9e 83       	std	Y+6, r25	; 0x06
    35c2:	8d 83       	std	Y+5, r24	; 0x05
    35c4:	8d 81       	ldd	r24, Y+5	; 0x05
    35c6:	9e 81       	ldd	r25, Y+6	; 0x06
    35c8:	9a 83       	std	Y+2, r25	; 0x02
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <LCD_WriteExtraChar+0x13c>
    35d4:	9a 83       	std	Y+2, r25	; 0x02
    35d6:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_Write_Cmd(128);
	LCD_GoTo_XY(Y,X);
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    35d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35da:	8f 5f       	subi	r24, 0xFF	; 255
    35dc:	8f 87       	std	Y+15, r24	; 0x0f
    35de:	8f 85       	ldd	r24, Y+15	; 0x0f
    35e0:	88 30       	cpi	r24, 0x08	; 8
    35e2:	08 f4       	brcc	.+2      	; 0x35e6 <LCD_WriteExtraChar+0x152>
    35e4:	84 cf       	rjmp	.-248    	; 0x34ee <LCD_WriteExtraChar+0x5a>
		/* Write bytes of DDRAM */
		LCD_Write_Char(iteration2);

		_delay_ms(5);
	}
}
    35e6:	64 96       	adiw	r28, 0x14	; 20
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	de bf       	out	0x3e, r29	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	cd bf       	out	0x3d, r28	; 61
    35f2:	cf 91       	pop	r28
    35f4:	df 91       	pop	r29
    35f6:	08 95       	ret

000035f8 <LCD_Print_Int>:

void LCD_Print_Int(f32 integer)
{
    35f8:	ef 92       	push	r14
    35fa:	ff 92       	push	r15
    35fc:	0f 93       	push	r16
    35fe:	1f 93       	push	r17
    3600:	df 93       	push	r29
    3602:	cf 93       	push	r28
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	e6 97       	sbiw	r28, 0x36	; 54
    360a:	0f b6       	in	r0, 0x3f	; 63
    360c:	f8 94       	cli
    360e:	de bf       	out	0x3e, r29	; 62
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	cd bf       	out	0x3d, r28	; 61
    3614:	69 8b       	std	Y+17, r22	; 0x11
    3616:	7a 8b       	std	Y+18, r23	; 0x12
    3618:	8b 8b       	std	Y+19, r24	; 0x13
    361a:	9c 8b       	std	Y+20, r25	; 0x14
	s32 fraction = 0;
    361c:	1d 86       	std	Y+13, r1	; 0x0d
    361e:	1e 86       	std	Y+14, r1	; 0x0e
    3620:	1f 86       	std	Y+15, r1	; 0x0f
    3622:	18 8a       	std	Y+16, r1	; 0x10
	s32 thousands = 0;
    3624:	19 86       	std	Y+9, r1	; 0x09
    3626:	1a 86       	std	Y+10, r1	; 0x0a
    3628:	1b 86       	std	Y+11, r1	; 0x0b
    362a:	1c 86       	std	Y+12, r1	; 0x0c
	s32 dozens = 0;
    362c:	1d 82       	std	Y+5, r1	; 0x05
    362e:	1e 82       	std	Y+6, r1	; 0x06
    3630:	1f 82       	std	Y+7, r1	; 0x07
    3632:	18 86       	std	Y+8, r1	; 0x08
	s32 ones = 0;
    3634:	19 82       	std	Y+1, r1	; 0x01
    3636:	1a 82       	std	Y+2, r1	; 0x02
    3638:	1b 82       	std	Y+3, r1	; 0x03
    363a:	1c 82       	std	Y+4, r1	; 0x04
	if(integer<=1000 && integer>=0)
    363c:	1e 8a       	std	Y+22, r1	; 0x16
    363e:	69 89       	ldd	r22, Y+17	; 0x11
    3640:	7a 89       	ldd	r23, Y+18	; 0x12
    3642:	8b 89       	ldd	r24, Y+19	; 0x13
    3644:	9c 89       	ldd	r25, Y+20	; 0x14
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	4a e7       	ldi	r20, 0x7A	; 122
    364c:	54 e4       	ldi	r21, 0x44	; 68
    364e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    3652:	18 16       	cp	r1, r24
    3654:	14 f0       	brlt	.+4      	; 0x365a <LCD_Print_Int+0x62>
    3656:	01 e0       	ldi	r16, 0x01	; 1
    3658:	0e 8b       	std	Y+22, r16	; 0x16
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	1e 89       	ldd	r17, Y+22	; 0x16
    365e:	81 27       	eor	r24, r17
    3660:	88 23       	and	r24, r24
    3662:	09 f0       	breq	.+2      	; 0x3666 <LCD_Print_Int+0x6e>
    3664:	5b c3       	rjmp	.+1718   	; 0x3d1c <LCD_Print_Int+0x724>
    3666:	1d 8a       	std	Y+21, r1	; 0x15
    3668:	69 89       	ldd	r22, Y+17	; 0x11
    366a:	7a 89       	ldd	r23, Y+18	; 0x12
    366c:	8b 89       	ldd	r24, Y+19	; 0x13
    366e:	9c 89       	ldd	r25, Y+20	; 0x14
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e0       	ldi	r20, 0x00	; 0
    3676:	50 e0       	ldi	r21, 0x00	; 0
    3678:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    367c:	88 23       	and	r24, r24
    367e:	14 f0       	brlt	.+4      	; 0x3684 <LCD_Print_Int+0x8c>
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	8d 8b       	std	Y+21, r24	; 0x15
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	9d 89       	ldd	r25, Y+21	; 0x15
    3688:	89 27       	eor	r24, r25
    368a:	88 23       	and	r24, r24
    368c:	09 f0       	breq	.+2      	; 0x3690 <LCD_Print_Int+0x98>
    368e:	46 c3       	rjmp	.+1676   	; 0x3d1c <LCD_Print_Int+0x724>
	{
		fraction = integer*10;
    3690:	69 89       	ldd	r22, Y+17	; 0x11
    3692:	7a 89       	ldd	r23, Y+18	; 0x12
    3694:	8b 89       	ldd	r24, Y+19	; 0x13
    3696:	9c 89       	ldd	r25, Y+20	; 0x14
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e2       	ldi	r20, 0x20	; 32
    369e:	51 e4       	ldi	r21, 0x41	; 65
    36a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	bc 01       	movw	r22, r24
    36aa:	cd 01       	movw	r24, r26
    36ac:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    36b0:	dc 01       	movw	r26, r24
    36b2:	cb 01       	movw	r24, r22
    36b4:	8d 87       	std	Y+13, r24	; 0x0d
    36b6:	9e 87       	std	Y+14, r25	; 0x0e
    36b8:	af 87       	std	Y+15, r26	; 0x0f
    36ba:	b8 8b       	std	Y+16, r27	; 0x10
		fraction = fraction%10;
    36bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36be:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c0:	af 85       	ldd	r26, Y+15	; 0x0f
    36c2:	b8 89       	ldd	r27, Y+16	; 0x10
    36c4:	2a e0       	ldi	r18, 0x0A	; 10
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	40 e0       	ldi	r20, 0x00	; 0
    36ca:	50 e0       	ldi	r21, 0x00	; 0
    36cc:	bc 01       	movw	r22, r24
    36ce:	cd 01       	movw	r24, r26
    36d0:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	8d 87       	std	Y+13, r24	; 0x0d
    36da:	9e 87       	std	Y+14, r25	; 0x0e
    36dc:	af 87       	std	Y+15, r26	; 0x0f
    36de:	b8 8b       	std	Y+16, r27	; 0x10
		thousands = (s32)integer%10;
    36e0:	69 89       	ldd	r22, Y+17	; 0x11
    36e2:	7a 89       	ldd	r23, Y+18	; 0x12
    36e4:	8b 89       	ldd	r24, Y+19	; 0x13
    36e6:	9c 89       	ldd	r25, Y+20	; 0x14
    36e8:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	2a e0       	ldi	r18, 0x0A	; 10
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	40 e0       	ldi	r20, 0x00	; 0
    36f6:	50 e0       	ldi	r21, 0x00	; 0
    36f8:	bc 01       	movw	r22, r24
    36fa:	cd 01       	movw	r24, r26
    36fc:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	89 87       	std	Y+9, r24	; 0x09
    3706:	9a 87       	std	Y+10, r25	; 0x0a
    3708:	ab 87       	std	Y+11, r26	; 0x0b
    370a:	bc 87       	std	Y+12, r27	; 0x0c
		dozens = (((s32)integer-thousands)/10)%10;
    370c:	69 89       	ldd	r22, Y+17	; 0x11
    370e:	7a 89       	ldd	r23, Y+18	; 0x12
    3710:	8b 89       	ldd	r24, Y+19	; 0x13
    3712:	9c 89       	ldd	r25, Y+20	; 0x14
    3714:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3718:	9b 01       	movw	r18, r22
    371a:	ac 01       	movw	r20, r24
    371c:	89 85       	ldd	r24, Y+9	; 0x09
    371e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3720:	ab 85       	ldd	r26, Y+11	; 0x0b
    3722:	bc 85       	ldd	r27, Y+12	; 0x0c
    3724:	79 01       	movw	r14, r18
    3726:	8a 01       	movw	r16, r20
    3728:	e8 1a       	sub	r14, r24
    372a:	f9 0a       	sbc	r15, r25
    372c:	0a 0b       	sbc	r16, r26
    372e:	1b 0b       	sbc	r17, r27
    3730:	d8 01       	movw	r26, r16
    3732:	c7 01       	movw	r24, r14
    3734:	2a e0       	ldi	r18, 0x0A	; 10
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	bc 01       	movw	r22, r24
    373e:	cd 01       	movw	r24, r26
    3740:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    3744:	da 01       	movw	r26, r20
    3746:	c9 01       	movw	r24, r18
    3748:	2a e0       	ldi	r18, 0x0A	; 10
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	bc 01       	movw	r22, r24
    3752:	cd 01       	movw	r24, r26
    3754:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	8d 83       	std	Y+5, r24	; 0x05
    375e:	9e 83       	std	Y+6, r25	; 0x06
    3760:	af 83       	std	Y+7, r26	; 0x07
    3762:	b8 87       	std	Y+8, r27	; 0x08
		ones = (((s32)integer-dozens)/100)%10;
    3764:	69 89       	ldd	r22, Y+17	; 0x11
    3766:	7a 89       	ldd	r23, Y+18	; 0x12
    3768:	8b 89       	ldd	r24, Y+19	; 0x13
    376a:	9c 89       	ldd	r25, Y+20	; 0x14
    376c:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3770:	9b 01       	movw	r18, r22
    3772:	ac 01       	movw	r20, r24
    3774:	8d 81       	ldd	r24, Y+5	; 0x05
    3776:	9e 81       	ldd	r25, Y+6	; 0x06
    3778:	af 81       	ldd	r26, Y+7	; 0x07
    377a:	b8 85       	ldd	r27, Y+8	; 0x08
    377c:	79 01       	movw	r14, r18
    377e:	8a 01       	movw	r16, r20
    3780:	e8 1a       	sub	r14, r24
    3782:	f9 0a       	sbc	r15, r25
    3784:	0a 0b       	sbc	r16, r26
    3786:	1b 0b       	sbc	r17, r27
    3788:	d8 01       	movw	r26, r16
    378a:	c7 01       	movw	r24, r14
    378c:	24 e6       	ldi	r18, 0x64	; 100
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e0       	ldi	r20, 0x00	; 0
    3792:	50 e0       	ldi	r21, 0x00	; 0
    3794:	bc 01       	movw	r22, r24
    3796:	cd 01       	movw	r24, r26
    3798:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    379c:	da 01       	movw	r26, r20
    379e:	c9 01       	movw	r24, r18
    37a0:	2a e0       	ldi	r18, 0x0A	; 10
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e0       	ldi	r20, 0x00	; 0
    37a6:	50 e0       	ldi	r21, 0x00	; 0
    37a8:	bc 01       	movw	r22, r24
    37aa:	cd 01       	movw	r24, r26
    37ac:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	89 83       	std	Y+1, r24	; 0x01
    37b6:	9a 83       	std	Y+2, r25	; 0x02
    37b8:	ab 83       	std	Y+3, r26	; 0x03
    37ba:	bc 83       	std	Y+4, r27	; 0x04

		switch(ones)
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
    37be:	9a 81       	ldd	r25, Y+2	; 0x02
    37c0:	ab 81       	ldd	r26, Y+3	; 0x03
    37c2:	bc 81       	ldd	r27, Y+4	; 0x04
    37c4:	8f 8b       	std	Y+23, r24	; 0x17
    37c6:	98 8f       	std	Y+24, r25	; 0x18
    37c8:	a9 8f       	std	Y+25, r26	; 0x19
    37ca:	ba 8f       	std	Y+26, r27	; 0x1a
    37cc:	8f 89       	ldd	r24, Y+23	; 0x17
    37ce:	98 8d       	ldd	r25, Y+24	; 0x18
    37d0:	a9 8d       	ldd	r26, Y+25	; 0x19
    37d2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    37d4:	85 30       	cpi	r24, 0x05	; 5
    37d6:	91 05       	cpc	r25, r1
    37d8:	a1 05       	cpc	r26, r1
    37da:	b1 05       	cpc	r27, r1
    37dc:	09 f4       	brne	.+2      	; 0x37e0 <LCD_Print_Int+0x1e8>
    37de:	6e c0       	rjmp	.+220    	; 0x38bc <LCD_Print_Int+0x2c4>
    37e0:	8f 89       	ldd	r24, Y+23	; 0x17
    37e2:	98 8d       	ldd	r25, Y+24	; 0x18
    37e4:	a9 8d       	ldd	r26, Y+25	; 0x19
    37e6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    37e8:	86 30       	cpi	r24, 0x06	; 6
    37ea:	91 05       	cpc	r25, r1
    37ec:	a1 05       	cpc	r26, r1
    37ee:	b1 05       	cpc	r27, r1
    37f0:	84 f5       	brge	.+96     	; 0x3852 <LCD_Print_Int+0x25a>
    37f2:	8f 89       	ldd	r24, Y+23	; 0x17
    37f4:	98 8d       	ldd	r25, Y+24	; 0x18
    37f6:	a9 8d       	ldd	r26, Y+25	; 0x19
    37f8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    37fa:	82 30       	cpi	r24, 0x02	; 2
    37fc:	91 05       	cpc	r25, r1
    37fe:	a1 05       	cpc	r26, r1
    3800:	b1 05       	cpc	r27, r1
    3802:	09 f4       	brne	.+2      	; 0x3806 <LCD_Print_Int+0x20e>
    3804:	4f c0       	rjmp	.+158    	; 0x38a4 <LCD_Print_Int+0x2ac>
    3806:	8f 89       	ldd	r24, Y+23	; 0x17
    3808:	98 8d       	ldd	r25, Y+24	; 0x18
    380a:	a9 8d       	ldd	r26, Y+25	; 0x19
    380c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    380e:	83 30       	cpi	r24, 0x03	; 3
    3810:	91 05       	cpc	r25, r1
    3812:	a1 05       	cpc	r26, r1
    3814:	b1 05       	cpc	r27, r1
    3816:	54 f4       	brge	.+20     	; 0x382c <LCD_Print_Int+0x234>
    3818:	8f 89       	ldd	r24, Y+23	; 0x17
    381a:	98 8d       	ldd	r25, Y+24	; 0x18
    381c:	a9 8d       	ldd	r26, Y+25	; 0x19
    381e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3820:	81 30       	cpi	r24, 0x01	; 1
    3822:	91 05       	cpc	r25, r1
    3824:	a1 05       	cpc	r26, r1
    3826:	b1 05       	cpc	r27, r1
    3828:	c9 f1       	breq	.+114    	; 0x389c <LCD_Print_Int+0x2a4>
    382a:	5b c0       	rjmp	.+182    	; 0x38e2 <LCD_Print_Int+0x2ea>
    382c:	8f 89       	ldd	r24, Y+23	; 0x17
    382e:	98 8d       	ldd	r25, Y+24	; 0x18
    3830:	a9 8d       	ldd	r26, Y+25	; 0x19
    3832:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3834:	83 30       	cpi	r24, 0x03	; 3
    3836:	91 05       	cpc	r25, r1
    3838:	a1 05       	cpc	r26, r1
    383a:	b1 05       	cpc	r27, r1
    383c:	b9 f1       	breq	.+110    	; 0x38ac <LCD_Print_Int+0x2b4>
    383e:	8f 89       	ldd	r24, Y+23	; 0x17
    3840:	98 8d       	ldd	r25, Y+24	; 0x18
    3842:	a9 8d       	ldd	r26, Y+25	; 0x19
    3844:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3846:	84 30       	cpi	r24, 0x04	; 4
    3848:	91 05       	cpc	r25, r1
    384a:	a1 05       	cpc	r26, r1
    384c:	b1 05       	cpc	r27, r1
    384e:	91 f1       	breq	.+100    	; 0x38b4 <LCD_Print_Int+0x2bc>
    3850:	48 c0       	rjmp	.+144    	; 0x38e2 <LCD_Print_Int+0x2ea>
    3852:	8f 89       	ldd	r24, Y+23	; 0x17
    3854:	98 8d       	ldd	r25, Y+24	; 0x18
    3856:	a9 8d       	ldd	r26, Y+25	; 0x19
    3858:	ba 8d       	ldd	r27, Y+26	; 0x1a
    385a:	87 30       	cpi	r24, 0x07	; 7
    385c:	91 05       	cpc	r25, r1
    385e:	a1 05       	cpc	r26, r1
    3860:	b1 05       	cpc	r27, r1
    3862:	a1 f1       	breq	.+104    	; 0x38cc <LCD_Print_Int+0x2d4>
    3864:	8f 89       	ldd	r24, Y+23	; 0x17
    3866:	98 8d       	ldd	r25, Y+24	; 0x18
    3868:	a9 8d       	ldd	r26, Y+25	; 0x19
    386a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    386c:	87 30       	cpi	r24, 0x07	; 7
    386e:	91 05       	cpc	r25, r1
    3870:	a1 05       	cpc	r26, r1
    3872:	b1 05       	cpc	r27, r1
    3874:	3c f1       	brlt	.+78     	; 0x38c4 <LCD_Print_Int+0x2cc>
    3876:	8f 89       	ldd	r24, Y+23	; 0x17
    3878:	98 8d       	ldd	r25, Y+24	; 0x18
    387a:	a9 8d       	ldd	r26, Y+25	; 0x19
    387c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    387e:	88 30       	cpi	r24, 0x08	; 8
    3880:	91 05       	cpc	r25, r1
    3882:	a1 05       	cpc	r26, r1
    3884:	b1 05       	cpc	r27, r1
    3886:	31 f1       	breq	.+76     	; 0x38d4 <LCD_Print_Int+0x2dc>
    3888:	8f 89       	ldd	r24, Y+23	; 0x17
    388a:	98 8d       	ldd	r25, Y+24	; 0x18
    388c:	a9 8d       	ldd	r26, Y+25	; 0x19
    388e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3890:	89 30       	cpi	r24, 0x09	; 9
    3892:	91 05       	cpc	r25, r1
    3894:	a1 05       	cpc	r26, r1
    3896:	b1 05       	cpc	r27, r1
    3898:	09 f1       	breq	.+66     	; 0x38dc <LCD_Print_Int+0x2e4>
    389a:	23 c0       	rjmp	.+70     	; 0x38e2 <LCD_Print_Int+0x2ea>
		{
		//case 0:LCD_Write_Char('0');break;
		case 1:LCD_Write_Char('1');break;
    389c:	81 e3       	ldi	r24, 0x31	; 49
    389e:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    38a2:	1f c0       	rjmp	.+62     	; 0x38e2 <LCD_Print_Int+0x2ea>
		case 2:LCD_Write_Char('2');break;
    38a4:	82 e3       	ldi	r24, 0x32	; 50
    38a6:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    38aa:	1b c0       	rjmp	.+54     	; 0x38e2 <LCD_Print_Int+0x2ea>
		case 3:LCD_Write_Char('3');break;
    38ac:	83 e3       	ldi	r24, 0x33	; 51
    38ae:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    38b2:	17 c0       	rjmp	.+46     	; 0x38e2 <LCD_Print_Int+0x2ea>
		case 4:LCD_Write_Char('4');break;
    38b4:	84 e3       	ldi	r24, 0x34	; 52
    38b6:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    38ba:	13 c0       	rjmp	.+38     	; 0x38e2 <LCD_Print_Int+0x2ea>
		case 5:LCD_Write_Char('5');break;
    38bc:	85 e3       	ldi	r24, 0x35	; 53
    38be:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    38c2:	0f c0       	rjmp	.+30     	; 0x38e2 <LCD_Print_Int+0x2ea>
		case 6:LCD_Write_Char('6');break;
    38c4:	86 e3       	ldi	r24, 0x36	; 54
    38c6:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    38ca:	0b c0       	rjmp	.+22     	; 0x38e2 <LCD_Print_Int+0x2ea>
		case 7:LCD_Write_Char('7');break;
    38cc:	87 e3       	ldi	r24, 0x37	; 55
    38ce:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    38d2:	07 c0       	rjmp	.+14     	; 0x38e2 <LCD_Print_Int+0x2ea>
		case 8:LCD_Write_Char('8');break;
    38d4:	88 e3       	ldi	r24, 0x38	; 56
    38d6:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    38da:	03 c0       	rjmp	.+6      	; 0x38e2 <LCD_Print_Int+0x2ea>
		case 9:LCD_Write_Char('9');break;
    38dc:	89 e3       	ldi	r24, 0x39	; 57
    38de:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
		}

		switch(dozens)
    38e2:	ed 80       	ldd	r14, Y+5	; 0x05
    38e4:	fe 80       	ldd	r15, Y+6	; 0x06
    38e6:	0f 81       	ldd	r16, Y+7	; 0x07
    38e8:	18 85       	ldd	r17, Y+8	; 0x08
    38ea:	eb 8e       	std	Y+27, r14	; 0x1b
    38ec:	fc 8e       	std	Y+28, r15	; 0x1c
    38ee:	0d 8f       	std	Y+29, r16	; 0x1d
    38f0:	1e 8f       	std	Y+30, r17	; 0x1e
    38f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38f6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    38f8:	be 8d       	ldd	r27, Y+30	; 0x1e
    38fa:	84 30       	cpi	r24, 0x04	; 4
    38fc:	91 05       	cpc	r25, r1
    38fe:	a1 05       	cpc	r26, r1
    3900:	b1 05       	cpc	r27, r1
    3902:	09 f4       	brne	.+2      	; 0x3906 <LCD_Print_Int+0x30e>
    3904:	8d c0       	rjmp	.+282    	; 0x3a20 <LCD_Print_Int+0x428>
    3906:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3908:	9c 8d       	ldd	r25, Y+28	; 0x1c
    390a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    390c:	be 8d       	ldd	r27, Y+30	; 0x1e
    390e:	85 30       	cpi	r24, 0x05	; 5
    3910:	91 05       	cpc	r25, r1
    3912:	a1 05       	cpc	r26, r1
    3914:	b1 05       	cpc	r27, r1
    3916:	9c f5       	brge	.+102    	; 0x397e <LCD_Print_Int+0x386>
    3918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    391a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    391c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    391e:	be 8d       	ldd	r27, Y+30	; 0x1e
    3920:	81 30       	cpi	r24, 0x01	; 1
    3922:	91 05       	cpc	r25, r1
    3924:	a1 05       	cpc	r26, r1
    3926:	b1 05       	cpc	r27, r1
    3928:	09 f4       	brne	.+2      	; 0x392c <LCD_Print_Int+0x334>
    392a:	6e c0       	rjmp	.+220    	; 0x3a08 <LCD_Print_Int+0x410>
    392c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    392e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3930:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3932:	be 8d       	ldd	r27, Y+30	; 0x1e
    3934:	82 30       	cpi	r24, 0x02	; 2
    3936:	91 05       	cpc	r25, r1
    3938:	a1 05       	cpc	r26, r1
    393a:	b1 05       	cpc	r27, r1
    393c:	5c f4       	brge	.+22     	; 0x3954 <LCD_Print_Int+0x35c>
    393e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3940:	fc 8c       	ldd	r15, Y+28	; 0x1c
    3942:	0d 8d       	ldd	r16, Y+29	; 0x1d
    3944:	1e 8d       	ldd	r17, Y+30	; 0x1e
    3946:	e1 14       	cp	r14, r1
    3948:	f1 04       	cpc	r15, r1
    394a:	01 05       	cpc	r16, r1
    394c:	11 05       	cpc	r17, r1
    394e:	09 f4       	brne	.+2      	; 0x3952 <LCD_Print_Int+0x35a>
    3950:	4f c0       	rjmp	.+158    	; 0x39f0 <LCD_Print_Int+0x3f8>
    3952:	7d c0       	rjmp	.+250    	; 0x3a4e <LCD_Print_Int+0x456>
    3954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3956:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3958:	ad 8d       	ldd	r26, Y+29	; 0x1d
    395a:	be 8d       	ldd	r27, Y+30	; 0x1e
    395c:	82 30       	cpi	r24, 0x02	; 2
    395e:	91 05       	cpc	r25, r1
    3960:	a1 05       	cpc	r26, r1
    3962:	b1 05       	cpc	r27, r1
    3964:	09 f4       	brne	.+2      	; 0x3968 <LCD_Print_Int+0x370>
    3966:	54 c0       	rjmp	.+168    	; 0x3a10 <LCD_Print_Int+0x418>
    3968:	8b 8d       	ldd	r24, Y+27	; 0x1b
    396a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    396c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    396e:	be 8d       	ldd	r27, Y+30	; 0x1e
    3970:	83 30       	cpi	r24, 0x03	; 3
    3972:	91 05       	cpc	r25, r1
    3974:	a1 05       	cpc	r26, r1
    3976:	b1 05       	cpc	r27, r1
    3978:	09 f4       	brne	.+2      	; 0x397c <LCD_Print_Int+0x384>
    397a:	4e c0       	rjmp	.+156    	; 0x3a18 <LCD_Print_Int+0x420>
    397c:	68 c0       	rjmp	.+208    	; 0x3a4e <LCD_Print_Int+0x456>
    397e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3980:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3982:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3984:	be 8d       	ldd	r27, Y+30	; 0x1e
    3986:	87 30       	cpi	r24, 0x07	; 7
    3988:	91 05       	cpc	r25, r1
    398a:	a1 05       	cpc	r26, r1
    398c:	b1 05       	cpc	r27, r1
    398e:	09 f4       	brne	.+2      	; 0x3992 <LCD_Print_Int+0x39a>
    3990:	53 c0       	rjmp	.+166    	; 0x3a38 <LCD_Print_Int+0x440>
    3992:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3994:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3996:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3998:	be 8d       	ldd	r27, Y+30	; 0x1e
    399a:	88 30       	cpi	r24, 0x08	; 8
    399c:	91 05       	cpc	r25, r1
    399e:	a1 05       	cpc	r26, r1
    39a0:	b1 05       	cpc	r27, r1
    39a2:	9c f4       	brge	.+38     	; 0x39ca <LCD_Print_Int+0x3d2>
    39a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39a8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    39aa:	be 8d       	ldd	r27, Y+30	; 0x1e
    39ac:	85 30       	cpi	r24, 0x05	; 5
    39ae:	91 05       	cpc	r25, r1
    39b0:	a1 05       	cpc	r26, r1
    39b2:	b1 05       	cpc	r27, r1
    39b4:	c9 f1       	breq	.+114    	; 0x3a28 <LCD_Print_Int+0x430>
    39b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ba:	ad 8d       	ldd	r26, Y+29	; 0x1d
    39bc:	be 8d       	ldd	r27, Y+30	; 0x1e
    39be:	86 30       	cpi	r24, 0x06	; 6
    39c0:	91 05       	cpc	r25, r1
    39c2:	a1 05       	cpc	r26, r1
    39c4:	b1 05       	cpc	r27, r1
    39c6:	a1 f1       	breq	.+104    	; 0x3a30 <LCD_Print_Int+0x438>
    39c8:	42 c0       	rjmp	.+132    	; 0x3a4e <LCD_Print_Int+0x456>
    39ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ce:	ad 8d       	ldd	r26, Y+29	; 0x1d
    39d0:	be 8d       	ldd	r27, Y+30	; 0x1e
    39d2:	88 30       	cpi	r24, 0x08	; 8
    39d4:	91 05       	cpc	r25, r1
    39d6:	a1 05       	cpc	r26, r1
    39d8:	b1 05       	cpc	r27, r1
    39da:	91 f1       	breq	.+100    	; 0x3a40 <LCD_Print_Int+0x448>
    39dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39e0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    39e2:	be 8d       	ldd	r27, Y+30	; 0x1e
    39e4:	89 30       	cpi	r24, 0x09	; 9
    39e6:	91 05       	cpc	r25, r1
    39e8:	a1 05       	cpc	r26, r1
    39ea:	b1 05       	cpc	r27, r1
    39ec:	69 f1       	breq	.+90     	; 0x3a48 <LCD_Print_Int+0x450>
    39ee:	2f c0       	rjmp	.+94     	; 0x3a4e <LCD_Print_Int+0x456>
		{

		case 0:
			if(ones == 0)
    39f0:	89 81       	ldd	r24, Y+1	; 0x01
    39f2:	9a 81       	ldd	r25, Y+2	; 0x02
    39f4:	ab 81       	ldd	r26, Y+3	; 0x03
    39f6:	bc 81       	ldd	r27, Y+4	; 0x04
    39f8:	00 97       	sbiw	r24, 0x00	; 0
    39fa:	a1 05       	cpc	r26, r1
    39fc:	b1 05       	cpc	r27, r1
    39fe:	39 f1       	breq	.+78     	; 0x3a4e <LCD_Print_Int+0x456>
			{
				break;
			}
			else
			{
				LCD_Write_Char('0');break;
    3a00:	80 e3       	ldi	r24, 0x30	; 48
    3a02:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3a06:	23 c0       	rjmp	.+70     	; 0x3a4e <LCD_Print_Int+0x456>
			}
		case 1:LCD_Write_Char('1');break;
    3a08:	81 e3       	ldi	r24, 0x31	; 49
    3a0a:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3a0e:	1f c0       	rjmp	.+62     	; 0x3a4e <LCD_Print_Int+0x456>
		case 2:LCD_Write_Char('2');break;
    3a10:	82 e3       	ldi	r24, 0x32	; 50
    3a12:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3a16:	1b c0       	rjmp	.+54     	; 0x3a4e <LCD_Print_Int+0x456>
		case 3:LCD_Write_Char('3');break;
    3a18:	83 e3       	ldi	r24, 0x33	; 51
    3a1a:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3a1e:	17 c0       	rjmp	.+46     	; 0x3a4e <LCD_Print_Int+0x456>
		case 4:LCD_Write_Char('4');break;
    3a20:	84 e3       	ldi	r24, 0x34	; 52
    3a22:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3a26:	13 c0       	rjmp	.+38     	; 0x3a4e <LCD_Print_Int+0x456>
		case 5:LCD_Write_Char('5');break;
    3a28:	85 e3       	ldi	r24, 0x35	; 53
    3a2a:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3a2e:	0f c0       	rjmp	.+30     	; 0x3a4e <LCD_Print_Int+0x456>
		case 6:LCD_Write_Char('6');break;
    3a30:	86 e3       	ldi	r24, 0x36	; 54
    3a32:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3a36:	0b c0       	rjmp	.+22     	; 0x3a4e <LCD_Print_Int+0x456>
		case 7:LCD_Write_Char('7');break;
    3a38:	87 e3       	ldi	r24, 0x37	; 55
    3a3a:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3a3e:	07 c0       	rjmp	.+14     	; 0x3a4e <LCD_Print_Int+0x456>
		case 8:LCD_Write_Char('8');break;
    3a40:	88 e3       	ldi	r24, 0x38	; 56
    3a42:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3a46:	03 c0       	rjmp	.+6      	; 0x3a4e <LCD_Print_Int+0x456>
		case 9:LCD_Write_Char('9');break;
    3a48:	89 e3       	ldi	r24, 0x39	; 57
    3a4a:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
		}
		switch(thousands)
    3a4e:	e9 84       	ldd	r14, Y+9	; 0x09
    3a50:	fa 84       	ldd	r15, Y+10	; 0x0a
    3a52:	0b 85       	ldd	r16, Y+11	; 0x0b
    3a54:	1c 85       	ldd	r17, Y+12	; 0x0c
    3a56:	ef 8e       	std	Y+31, r14	; 0x1f
    3a58:	f8 a2       	std	Y+32, r15	; 0x20
    3a5a:	09 a3       	std	Y+33, r16	; 0x21
    3a5c:	1a a3       	std	Y+34, r17	; 0x22
    3a5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a60:	98 a1       	ldd	r25, Y+32	; 0x20
    3a62:	a9 a1       	ldd	r26, Y+33	; 0x21
    3a64:	ba a1       	ldd	r27, Y+34	; 0x22
    3a66:	84 30       	cpi	r24, 0x04	; 4
    3a68:	91 05       	cpc	r25, r1
    3a6a:	a1 05       	cpc	r26, r1
    3a6c:	b1 05       	cpc	r27, r1
    3a6e:	09 f4       	brne	.+2      	; 0x3a72 <LCD_Print_Int+0x47a>
    3a70:	85 c0       	rjmp	.+266    	; 0x3b7c <LCD_Print_Int+0x584>
    3a72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a74:	98 a1       	ldd	r25, Y+32	; 0x20
    3a76:	a9 a1       	ldd	r26, Y+33	; 0x21
    3a78:	ba a1       	ldd	r27, Y+34	; 0x22
    3a7a:	85 30       	cpi	r24, 0x05	; 5
    3a7c:	91 05       	cpc	r25, r1
    3a7e:	a1 05       	cpc	r26, r1
    3a80:	b1 05       	cpc	r27, r1
    3a82:	9c f5       	brge	.+102    	; 0x3aea <LCD_Print_Int+0x4f2>
    3a84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a86:	98 a1       	ldd	r25, Y+32	; 0x20
    3a88:	a9 a1       	ldd	r26, Y+33	; 0x21
    3a8a:	ba a1       	ldd	r27, Y+34	; 0x22
    3a8c:	81 30       	cpi	r24, 0x01	; 1
    3a8e:	91 05       	cpc	r25, r1
    3a90:	a1 05       	cpc	r26, r1
    3a92:	b1 05       	cpc	r27, r1
    3a94:	09 f4       	brne	.+2      	; 0x3a98 <LCD_Print_Int+0x4a0>
    3a96:	66 c0       	rjmp	.+204    	; 0x3b64 <LCD_Print_Int+0x56c>
    3a98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a9a:	98 a1       	ldd	r25, Y+32	; 0x20
    3a9c:	a9 a1       	ldd	r26, Y+33	; 0x21
    3a9e:	ba a1       	ldd	r27, Y+34	; 0x22
    3aa0:	82 30       	cpi	r24, 0x02	; 2
    3aa2:	91 05       	cpc	r25, r1
    3aa4:	a1 05       	cpc	r26, r1
    3aa6:	b1 05       	cpc	r27, r1
    3aa8:	5c f4       	brge	.+22     	; 0x3ac0 <LCD_Print_Int+0x4c8>
    3aaa:	ef 8c       	ldd	r14, Y+31	; 0x1f
    3aac:	f8 a0       	ldd	r15, Y+32	; 0x20
    3aae:	09 a1       	ldd	r16, Y+33	; 0x21
    3ab0:	1a a1       	ldd	r17, Y+34	; 0x22
    3ab2:	e1 14       	cp	r14, r1
    3ab4:	f1 04       	cpc	r15, r1
    3ab6:	01 05       	cpc	r16, r1
    3ab8:	11 05       	cpc	r17, r1
    3aba:	09 f4       	brne	.+2      	; 0x3abe <LCD_Print_Int+0x4c6>
    3abc:	4f c0       	rjmp	.+158    	; 0x3b5c <LCD_Print_Int+0x564>
    3abe:	75 c0       	rjmp	.+234    	; 0x3baa <LCD_Print_Int+0x5b2>
    3ac0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ac2:	98 a1       	ldd	r25, Y+32	; 0x20
    3ac4:	a9 a1       	ldd	r26, Y+33	; 0x21
    3ac6:	ba a1       	ldd	r27, Y+34	; 0x22
    3ac8:	82 30       	cpi	r24, 0x02	; 2
    3aca:	91 05       	cpc	r25, r1
    3acc:	a1 05       	cpc	r26, r1
    3ace:	b1 05       	cpc	r27, r1
    3ad0:	09 f4       	brne	.+2      	; 0x3ad4 <LCD_Print_Int+0x4dc>
    3ad2:	4c c0       	rjmp	.+152    	; 0x3b6c <LCD_Print_Int+0x574>
    3ad4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ad6:	98 a1       	ldd	r25, Y+32	; 0x20
    3ad8:	a9 a1       	ldd	r26, Y+33	; 0x21
    3ada:	ba a1       	ldd	r27, Y+34	; 0x22
    3adc:	83 30       	cpi	r24, 0x03	; 3
    3ade:	91 05       	cpc	r25, r1
    3ae0:	a1 05       	cpc	r26, r1
    3ae2:	b1 05       	cpc	r27, r1
    3ae4:	09 f4       	brne	.+2      	; 0x3ae8 <LCD_Print_Int+0x4f0>
    3ae6:	46 c0       	rjmp	.+140    	; 0x3b74 <LCD_Print_Int+0x57c>
    3ae8:	60 c0       	rjmp	.+192    	; 0x3baa <LCD_Print_Int+0x5b2>
    3aea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3aec:	98 a1       	ldd	r25, Y+32	; 0x20
    3aee:	a9 a1       	ldd	r26, Y+33	; 0x21
    3af0:	ba a1       	ldd	r27, Y+34	; 0x22
    3af2:	87 30       	cpi	r24, 0x07	; 7
    3af4:	91 05       	cpc	r25, r1
    3af6:	a1 05       	cpc	r26, r1
    3af8:	b1 05       	cpc	r27, r1
    3afa:	09 f4       	brne	.+2      	; 0x3afe <LCD_Print_Int+0x506>
    3afc:	4b c0       	rjmp	.+150    	; 0x3b94 <LCD_Print_Int+0x59c>
    3afe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b00:	98 a1       	ldd	r25, Y+32	; 0x20
    3b02:	a9 a1       	ldd	r26, Y+33	; 0x21
    3b04:	ba a1       	ldd	r27, Y+34	; 0x22
    3b06:	88 30       	cpi	r24, 0x08	; 8
    3b08:	91 05       	cpc	r25, r1
    3b0a:	a1 05       	cpc	r26, r1
    3b0c:	b1 05       	cpc	r27, r1
    3b0e:	9c f4       	brge	.+38     	; 0x3b36 <LCD_Print_Int+0x53e>
    3b10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b12:	98 a1       	ldd	r25, Y+32	; 0x20
    3b14:	a9 a1       	ldd	r26, Y+33	; 0x21
    3b16:	ba a1       	ldd	r27, Y+34	; 0x22
    3b18:	85 30       	cpi	r24, 0x05	; 5
    3b1a:	91 05       	cpc	r25, r1
    3b1c:	a1 05       	cpc	r26, r1
    3b1e:	b1 05       	cpc	r27, r1
    3b20:	89 f1       	breq	.+98     	; 0x3b84 <LCD_Print_Int+0x58c>
    3b22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b24:	98 a1       	ldd	r25, Y+32	; 0x20
    3b26:	a9 a1       	ldd	r26, Y+33	; 0x21
    3b28:	ba a1       	ldd	r27, Y+34	; 0x22
    3b2a:	86 30       	cpi	r24, 0x06	; 6
    3b2c:	91 05       	cpc	r25, r1
    3b2e:	a1 05       	cpc	r26, r1
    3b30:	b1 05       	cpc	r27, r1
    3b32:	61 f1       	breq	.+88     	; 0x3b8c <LCD_Print_Int+0x594>
    3b34:	3a c0       	rjmp	.+116    	; 0x3baa <LCD_Print_Int+0x5b2>
    3b36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b38:	98 a1       	ldd	r25, Y+32	; 0x20
    3b3a:	a9 a1       	ldd	r26, Y+33	; 0x21
    3b3c:	ba a1       	ldd	r27, Y+34	; 0x22
    3b3e:	88 30       	cpi	r24, 0x08	; 8
    3b40:	91 05       	cpc	r25, r1
    3b42:	a1 05       	cpc	r26, r1
    3b44:	b1 05       	cpc	r27, r1
    3b46:	51 f1       	breq	.+84     	; 0x3b9c <LCD_Print_Int+0x5a4>
    3b48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b4a:	98 a1       	ldd	r25, Y+32	; 0x20
    3b4c:	a9 a1       	ldd	r26, Y+33	; 0x21
    3b4e:	ba a1       	ldd	r27, Y+34	; 0x22
    3b50:	89 30       	cpi	r24, 0x09	; 9
    3b52:	91 05       	cpc	r25, r1
    3b54:	a1 05       	cpc	r26, r1
    3b56:	b1 05       	cpc	r27, r1
    3b58:	29 f1       	breq	.+74     	; 0x3ba4 <LCD_Print_Int+0x5ac>
    3b5a:	27 c0       	rjmp	.+78     	; 0x3baa <LCD_Print_Int+0x5b2>
		{
		case 0:LCD_Write_Char('0');break;
    3b5c:	80 e3       	ldi	r24, 0x30	; 48
    3b5e:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3b62:	23 c0       	rjmp	.+70     	; 0x3baa <LCD_Print_Int+0x5b2>
		case 1:LCD_Write_Char('1');break;
    3b64:	81 e3       	ldi	r24, 0x31	; 49
    3b66:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3b6a:	1f c0       	rjmp	.+62     	; 0x3baa <LCD_Print_Int+0x5b2>
		case 2:LCD_Write_Char('2');break;
    3b6c:	82 e3       	ldi	r24, 0x32	; 50
    3b6e:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3b72:	1b c0       	rjmp	.+54     	; 0x3baa <LCD_Print_Int+0x5b2>
		case 3:LCD_Write_Char('3');break;
    3b74:	83 e3       	ldi	r24, 0x33	; 51
    3b76:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3b7a:	17 c0       	rjmp	.+46     	; 0x3baa <LCD_Print_Int+0x5b2>
		case 4:LCD_Write_Char('4');break;
    3b7c:	84 e3       	ldi	r24, 0x34	; 52
    3b7e:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3b82:	13 c0       	rjmp	.+38     	; 0x3baa <LCD_Print_Int+0x5b2>
		case 5:LCD_Write_Char('5');break;
    3b84:	85 e3       	ldi	r24, 0x35	; 53
    3b86:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3b8a:	0f c0       	rjmp	.+30     	; 0x3baa <LCD_Print_Int+0x5b2>
		case 6:LCD_Write_Char('6');break;
    3b8c:	86 e3       	ldi	r24, 0x36	; 54
    3b8e:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3b92:	0b c0       	rjmp	.+22     	; 0x3baa <LCD_Print_Int+0x5b2>
		case 7:LCD_Write_Char('7');break;
    3b94:	87 e3       	ldi	r24, 0x37	; 55
    3b96:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3b9a:	07 c0       	rjmp	.+14     	; 0x3baa <LCD_Print_Int+0x5b2>
		case 8:LCD_Write_Char('8');break;
    3b9c:	88 e3       	ldi	r24, 0x38	; 56
    3b9e:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3ba2:	03 c0       	rjmp	.+6      	; 0x3baa <LCD_Print_Int+0x5b2>
		case 9:LCD_Write_Char('9');break;
    3ba4:	89 e3       	ldi	r24, 0x39	; 57
    3ba6:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
		}
		switch(fraction)
    3baa:	ed 84       	ldd	r14, Y+13	; 0x0d
    3bac:	fe 84       	ldd	r15, Y+14	; 0x0e
    3bae:	0f 85       	ldd	r16, Y+15	; 0x0f
    3bb0:	18 89       	ldd	r17, Y+16	; 0x10
    3bb2:	eb a2       	std	Y+35, r14	; 0x23
    3bb4:	fc a2       	std	Y+36, r15	; 0x24
    3bb6:	0d a3       	std	Y+37, r16	; 0x25
    3bb8:	1e a3       	std	Y+38, r17	; 0x26
    3bba:	8b a1       	ldd	r24, Y+35	; 0x23
    3bbc:	9c a1       	ldd	r25, Y+36	; 0x24
    3bbe:	ad a1       	ldd	r26, Y+37	; 0x25
    3bc0:	be a1       	ldd	r27, Y+38	; 0x26
    3bc2:	84 30       	cpi	r24, 0x04	; 4
    3bc4:	91 05       	cpc	r25, r1
    3bc6:	a1 05       	cpc	r26, r1
    3bc8:	b1 05       	cpc	r27, r1
    3bca:	09 f4       	brne	.+2      	; 0x3bce <LCD_Print_Int+0x5d6>
    3bcc:	89 c0       	rjmp	.+274    	; 0x3ce0 <LCD_Print_Int+0x6e8>
    3bce:	8b a1       	ldd	r24, Y+35	; 0x23
    3bd0:	9c a1       	ldd	r25, Y+36	; 0x24
    3bd2:	ad a1       	ldd	r26, Y+37	; 0x25
    3bd4:	be a1       	ldd	r27, Y+38	; 0x26
    3bd6:	85 30       	cpi	r24, 0x05	; 5
    3bd8:	91 05       	cpc	r25, r1
    3bda:	a1 05       	cpc	r26, r1
    3bdc:	b1 05       	cpc	r27, r1
    3bde:	9c f5       	brge	.+102    	; 0x3c46 <LCD_Print_Int+0x64e>
    3be0:	8b a1       	ldd	r24, Y+35	; 0x23
    3be2:	9c a1       	ldd	r25, Y+36	; 0x24
    3be4:	ad a1       	ldd	r26, Y+37	; 0x25
    3be6:	be a1       	ldd	r27, Y+38	; 0x26
    3be8:	81 30       	cpi	r24, 0x01	; 1
    3bea:	91 05       	cpc	r25, r1
    3bec:	a1 05       	cpc	r26, r1
    3bee:	b1 05       	cpc	r27, r1
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <LCD_Print_Int+0x5fc>
    3bf2:	67 c0       	rjmp	.+206    	; 0x3cc2 <LCD_Print_Int+0x6ca>
    3bf4:	8b a1       	ldd	r24, Y+35	; 0x23
    3bf6:	9c a1       	ldd	r25, Y+36	; 0x24
    3bf8:	ad a1       	ldd	r26, Y+37	; 0x25
    3bfa:	be a1       	ldd	r27, Y+38	; 0x26
    3bfc:	82 30       	cpi	r24, 0x02	; 2
    3bfe:	91 05       	cpc	r25, r1
    3c00:	a1 05       	cpc	r26, r1
    3c02:	b1 05       	cpc	r27, r1
    3c04:	5c f4       	brge	.+22     	; 0x3c1c <LCD_Print_Int+0x624>
    3c06:	eb a0       	ldd	r14, Y+35	; 0x23
    3c08:	fc a0       	ldd	r15, Y+36	; 0x24
    3c0a:	0d a1       	ldd	r16, Y+37	; 0x25
    3c0c:	1e a1       	ldd	r17, Y+38	; 0x26
    3c0e:	e1 14       	cp	r14, r1
    3c10:	f1 04       	cpc	r15, r1
    3c12:	01 05       	cpc	r16, r1
    3c14:	11 05       	cpc	r17, r1
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <LCD_Print_Int+0x622>
    3c18:	4f c0       	rjmp	.+158    	; 0x3cb8 <LCD_Print_Int+0x6c0>
    3c1a:	de c3       	rjmp	.+1980   	; 0x43d8 <LCD_Print_Int+0xde0>
    3c1c:	8b a1       	ldd	r24, Y+35	; 0x23
    3c1e:	9c a1       	ldd	r25, Y+36	; 0x24
    3c20:	ad a1       	ldd	r26, Y+37	; 0x25
    3c22:	be a1       	ldd	r27, Y+38	; 0x26
    3c24:	82 30       	cpi	r24, 0x02	; 2
    3c26:	91 05       	cpc	r25, r1
    3c28:	a1 05       	cpc	r26, r1
    3c2a:	b1 05       	cpc	r27, r1
    3c2c:	09 f4       	brne	.+2      	; 0x3c30 <LCD_Print_Int+0x638>
    3c2e:	4e c0       	rjmp	.+156    	; 0x3ccc <LCD_Print_Int+0x6d4>
    3c30:	8b a1       	ldd	r24, Y+35	; 0x23
    3c32:	9c a1       	ldd	r25, Y+36	; 0x24
    3c34:	ad a1       	ldd	r26, Y+37	; 0x25
    3c36:	be a1       	ldd	r27, Y+38	; 0x26
    3c38:	83 30       	cpi	r24, 0x03	; 3
    3c3a:	91 05       	cpc	r25, r1
    3c3c:	a1 05       	cpc	r26, r1
    3c3e:	b1 05       	cpc	r27, r1
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <LCD_Print_Int+0x64c>
    3c42:	49 c0       	rjmp	.+146    	; 0x3cd6 <LCD_Print_Int+0x6de>
    3c44:	c9 c3       	rjmp	.+1938   	; 0x43d8 <LCD_Print_Int+0xde0>
    3c46:	8b a1       	ldd	r24, Y+35	; 0x23
    3c48:	9c a1       	ldd	r25, Y+36	; 0x24
    3c4a:	ad a1       	ldd	r26, Y+37	; 0x25
    3c4c:	be a1       	ldd	r27, Y+38	; 0x26
    3c4e:	87 30       	cpi	r24, 0x07	; 7
    3c50:	91 05       	cpc	r25, r1
    3c52:	a1 05       	cpc	r26, r1
    3c54:	b1 05       	cpc	r27, r1
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <LCD_Print_Int+0x662>
    3c58:	52 c0       	rjmp	.+164    	; 0x3cfe <LCD_Print_Int+0x706>
    3c5a:	8b a1       	ldd	r24, Y+35	; 0x23
    3c5c:	9c a1       	ldd	r25, Y+36	; 0x24
    3c5e:	ad a1       	ldd	r26, Y+37	; 0x25
    3c60:	be a1       	ldd	r27, Y+38	; 0x26
    3c62:	88 30       	cpi	r24, 0x08	; 8
    3c64:	91 05       	cpc	r25, r1
    3c66:	a1 05       	cpc	r26, r1
    3c68:	b1 05       	cpc	r27, r1
    3c6a:	9c f4       	brge	.+38     	; 0x3c92 <LCD_Print_Int+0x69a>
    3c6c:	8b a1       	ldd	r24, Y+35	; 0x23
    3c6e:	9c a1       	ldd	r25, Y+36	; 0x24
    3c70:	ad a1       	ldd	r26, Y+37	; 0x25
    3c72:	be a1       	ldd	r27, Y+38	; 0x26
    3c74:	85 30       	cpi	r24, 0x05	; 5
    3c76:	91 05       	cpc	r25, r1
    3c78:	a1 05       	cpc	r26, r1
    3c7a:	b1 05       	cpc	r27, r1
    3c7c:	b1 f1       	breq	.+108    	; 0x3cea <LCD_Print_Int+0x6f2>
    3c7e:	8b a1       	ldd	r24, Y+35	; 0x23
    3c80:	9c a1       	ldd	r25, Y+36	; 0x24
    3c82:	ad a1       	ldd	r26, Y+37	; 0x25
    3c84:	be a1       	ldd	r27, Y+38	; 0x26
    3c86:	86 30       	cpi	r24, 0x06	; 6
    3c88:	91 05       	cpc	r25, r1
    3c8a:	a1 05       	cpc	r26, r1
    3c8c:	b1 05       	cpc	r27, r1
    3c8e:	91 f1       	breq	.+100    	; 0x3cf4 <LCD_Print_Int+0x6fc>
    3c90:	a3 c3       	rjmp	.+1862   	; 0x43d8 <LCD_Print_Int+0xde0>
    3c92:	8b a1       	ldd	r24, Y+35	; 0x23
    3c94:	9c a1       	ldd	r25, Y+36	; 0x24
    3c96:	ad a1       	ldd	r26, Y+37	; 0x25
    3c98:	be a1       	ldd	r27, Y+38	; 0x26
    3c9a:	88 30       	cpi	r24, 0x08	; 8
    3c9c:	91 05       	cpc	r25, r1
    3c9e:	a1 05       	cpc	r26, r1
    3ca0:	b1 05       	cpc	r27, r1
    3ca2:	91 f1       	breq	.+100    	; 0x3d08 <LCD_Print_Int+0x710>
    3ca4:	8b a1       	ldd	r24, Y+35	; 0x23
    3ca6:	9c a1       	ldd	r25, Y+36	; 0x24
    3ca8:	ad a1       	ldd	r26, Y+37	; 0x25
    3caa:	be a1       	ldd	r27, Y+38	; 0x26
    3cac:	89 30       	cpi	r24, 0x09	; 9
    3cae:	91 05       	cpc	r25, r1
    3cb0:	a1 05       	cpc	r26, r1
    3cb2:	b1 05       	cpc	r27, r1
    3cb4:	71 f1       	breq	.+92     	; 0x3d12 <LCD_Print_Int+0x71a>
    3cb6:	90 c3       	rjmp	.+1824   	; 0x43d8 <LCD_Print_Int+0xde0>
		{
		case 0:LCD_Write_String(".0");break;
    3cb8:	81 e7       	ldi	r24, 0x71	; 113
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    3cc0:	8b c3       	rjmp	.+1814   	; 0x43d8 <LCD_Print_Int+0xde0>
		case 1:LCD_Write_String(".1");break;
    3cc2:	84 e7       	ldi	r24, 0x74	; 116
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    3cca:	86 c3       	rjmp	.+1804   	; 0x43d8 <LCD_Print_Int+0xde0>
		case 2:LCD_Write_String(".2");break;
    3ccc:	87 e7       	ldi	r24, 0x77	; 119
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    3cd4:	81 c3       	rjmp	.+1794   	; 0x43d8 <LCD_Print_Int+0xde0>
		case 3:LCD_Write_String(".3");break;
    3cd6:	8a e7       	ldi	r24, 0x7A	; 122
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    3cde:	7c c3       	rjmp	.+1784   	; 0x43d8 <LCD_Print_Int+0xde0>
		case 4:LCD_Write_String(".4");break;
    3ce0:	8d e7       	ldi	r24, 0x7D	; 125
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    3ce8:	77 c3       	rjmp	.+1774   	; 0x43d8 <LCD_Print_Int+0xde0>
		case 5:LCD_Write_String(".5");break;
    3cea:	80 e8       	ldi	r24, 0x80	; 128
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    3cf2:	72 c3       	rjmp	.+1764   	; 0x43d8 <LCD_Print_Int+0xde0>
		case 6:LCD_Write_String(".6");break;
    3cf4:	83 e8       	ldi	r24, 0x83	; 131
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    3cfc:	6d c3       	rjmp	.+1754   	; 0x43d8 <LCD_Print_Int+0xde0>
		case 7:LCD_Write_String(".7");break;
    3cfe:	86 e8       	ldi	r24, 0x86	; 134
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    3d06:	68 c3       	rjmp	.+1744   	; 0x43d8 <LCD_Print_Int+0xde0>
		case 8:LCD_Write_String(".8");break;
    3d08:	89 e8       	ldi	r24, 0x89	; 137
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    3d10:	63 c3       	rjmp	.+1734   	; 0x43d8 <LCD_Print_Int+0xde0>
		case 9:LCD_Write_String(".9");break;
    3d12:	8c e8       	ldi	r24, 0x8C	; 140
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    3d1a:	5e c3       	rjmp	.+1724   	; 0x43d8 <LCD_Print_Int+0xde0>
		}

	}
	else if(integer<0)
    3d1c:	69 89       	ldd	r22, Y+17	; 0x11
    3d1e:	7a 89       	ldd	r23, Y+18	; 0x12
    3d20:	8b 89       	ldd	r24, Y+19	; 0x13
    3d22:	9c 89       	ldd	r25, Y+20	; 0x14
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	40 e0       	ldi	r20, 0x00	; 0
    3d2a:	50 e0       	ldi	r21, 0x00	; 0
    3d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d30:	88 23       	and	r24, r24
    3d32:	0c f0       	brlt	.+2      	; 0x3d36 <LCD_Print_Int+0x73e>
    3d34:	51 c3       	rjmp	.+1698   	; 0x43d8 <LCD_Print_Int+0xde0>
	{
		integer = (integer)*(-1);
    3d36:	89 89       	ldd	r24, Y+17	; 0x11
    3d38:	9a 89       	ldd	r25, Y+18	; 0x12
    3d3a:	ab 89       	ldd	r26, Y+19	; 0x13
    3d3c:	bc 89       	ldd	r27, Y+20	; 0x14
    3d3e:	b0 58       	subi	r27, 0x80	; 128
    3d40:	89 8b       	std	Y+17, r24	; 0x11
    3d42:	9a 8b       	std	Y+18, r25	; 0x12
    3d44:	ab 8b       	std	Y+19, r26	; 0x13
    3d46:	bc 8b       	std	Y+20, r27	; 0x14
		fraction = integer*10;
    3d48:	69 89       	ldd	r22, Y+17	; 0x11
    3d4a:	7a 89       	ldd	r23, Y+18	; 0x12
    3d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e2       	ldi	r20, 0x20	; 32
    3d56:	51 e4       	ldi	r21, 0x41	; 65
    3d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	bc 01       	movw	r22, r24
    3d62:	cd 01       	movw	r24, r26
    3d64:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	8d 87       	std	Y+13, r24	; 0x0d
    3d6e:	9e 87       	std	Y+14, r25	; 0x0e
    3d70:	af 87       	std	Y+15, r26	; 0x0f
    3d72:	b8 8b       	std	Y+16, r27	; 0x10
		fraction = fraction%10;
    3d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d78:	af 85       	ldd	r26, Y+15	; 0x0f
    3d7a:	b8 89       	ldd	r27, Y+16	; 0x10
    3d7c:	2a e0       	ldi	r18, 0x0A	; 10
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	40 e0       	ldi	r20, 0x00	; 0
    3d82:	50 e0       	ldi	r21, 0x00	; 0
    3d84:	bc 01       	movw	r22, r24
    3d86:	cd 01       	movw	r24, r26
    3d88:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	cb 01       	movw	r24, r22
    3d90:	8d 87       	std	Y+13, r24	; 0x0d
    3d92:	9e 87       	std	Y+14, r25	; 0x0e
    3d94:	af 87       	std	Y+15, r26	; 0x0f
    3d96:	b8 8b       	std	Y+16, r27	; 0x10
		thousands = (s32)integer%10;
    3d98:	69 89       	ldd	r22, Y+17	; 0x11
    3d9a:	7a 89       	ldd	r23, Y+18	; 0x12
    3d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3da0:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	2a e0       	ldi	r18, 0x0A	; 10
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	40 e0       	ldi	r20, 0x00	; 0
    3dae:	50 e0       	ldi	r21, 0x00	; 0
    3db0:	bc 01       	movw	r22, r24
    3db2:	cd 01       	movw	r24, r26
    3db4:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	89 87       	std	Y+9, r24	; 0x09
    3dbe:	9a 87       	std	Y+10, r25	; 0x0a
    3dc0:	ab 87       	std	Y+11, r26	; 0x0b
    3dc2:	bc 87       	std	Y+12, r27	; 0x0c
		dozens = (((s32)integer-thousands)/10)%10;
    3dc4:	69 89       	ldd	r22, Y+17	; 0x11
    3dc6:	7a 89       	ldd	r23, Y+18	; 0x12
    3dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    3dca:	9c 89       	ldd	r25, Y+20	; 0x14
    3dcc:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3dd0:	9b 01       	movw	r18, r22
    3dd2:	ac 01       	movw	r20, r24
    3dd4:	89 85       	ldd	r24, Y+9	; 0x09
    3dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd8:	ab 85       	ldd	r26, Y+11	; 0x0b
    3dda:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ddc:	79 01       	movw	r14, r18
    3dde:	8a 01       	movw	r16, r20
    3de0:	e8 1a       	sub	r14, r24
    3de2:	f9 0a       	sbc	r15, r25
    3de4:	0a 0b       	sbc	r16, r26
    3de6:	1b 0b       	sbc	r17, r27
    3de8:	d8 01       	movw	r26, r16
    3dea:	c7 01       	movw	r24, r14
    3dec:	2a e0       	ldi	r18, 0x0A	; 10
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	40 e0       	ldi	r20, 0x00	; 0
    3df2:	50 e0       	ldi	r21, 0x00	; 0
    3df4:	bc 01       	movw	r22, r24
    3df6:	cd 01       	movw	r24, r26
    3df8:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    3dfc:	da 01       	movw	r26, r20
    3dfe:	c9 01       	movw	r24, r18
    3e00:	2a e0       	ldi	r18, 0x0A	; 10
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	40 e0       	ldi	r20, 0x00	; 0
    3e06:	50 e0       	ldi	r21, 0x00	; 0
    3e08:	bc 01       	movw	r22, r24
    3e0a:	cd 01       	movw	r24, r26
    3e0c:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    3e10:	dc 01       	movw	r26, r24
    3e12:	cb 01       	movw	r24, r22
    3e14:	8d 83       	std	Y+5, r24	; 0x05
    3e16:	9e 83       	std	Y+6, r25	; 0x06
    3e18:	af 83       	std	Y+7, r26	; 0x07
    3e1a:	b8 87       	std	Y+8, r27	; 0x08
		ones = (((s32)integer-dozens)/100)%10;
    3e1c:	69 89       	ldd	r22, Y+17	; 0x11
    3e1e:	7a 89       	ldd	r23, Y+18	; 0x12
    3e20:	8b 89       	ldd	r24, Y+19	; 0x13
    3e22:	9c 89       	ldd	r25, Y+20	; 0x14
    3e24:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3e28:	9b 01       	movw	r18, r22
    3e2a:	ac 01       	movw	r20, r24
    3e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e30:	af 81       	ldd	r26, Y+7	; 0x07
    3e32:	b8 85       	ldd	r27, Y+8	; 0x08
    3e34:	79 01       	movw	r14, r18
    3e36:	8a 01       	movw	r16, r20
    3e38:	e8 1a       	sub	r14, r24
    3e3a:	f9 0a       	sbc	r15, r25
    3e3c:	0a 0b       	sbc	r16, r26
    3e3e:	1b 0b       	sbc	r17, r27
    3e40:	d8 01       	movw	r26, r16
    3e42:	c7 01       	movw	r24, r14
    3e44:	24 e6       	ldi	r18, 0x64	; 100
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	40 e0       	ldi	r20, 0x00	; 0
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	bc 01       	movw	r22, r24
    3e4e:	cd 01       	movw	r24, r26
    3e50:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    3e54:	da 01       	movw	r26, r20
    3e56:	c9 01       	movw	r24, r18
    3e58:	2a e0       	ldi	r18, 0x0A	; 10
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	40 e0       	ldi	r20, 0x00	; 0
    3e5e:	50 e0       	ldi	r21, 0x00	; 0
    3e60:	bc 01       	movw	r22, r24
    3e62:	cd 01       	movw	r24, r26
    3e64:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	89 83       	std	Y+1, r24	; 0x01
    3e6e:	9a 83       	std	Y+2, r25	; 0x02
    3e70:	ab 83       	std	Y+3, r26	; 0x03
    3e72:	bc 83       	std	Y+4, r27	; 0x04
		LCD_Write_Char('-');
    3e74:	8d e2       	ldi	r24, 0x2D	; 45
    3e76:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
		switch(ones)
    3e7a:	89 81       	ldd	r24, Y+1	; 0x01
    3e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7e:	ab 81       	ldd	r26, Y+3	; 0x03
    3e80:	bc 81       	ldd	r27, Y+4	; 0x04
    3e82:	8f a3       	std	Y+39, r24	; 0x27
    3e84:	98 a7       	std	Y+40, r25	; 0x28
    3e86:	a9 a7       	std	Y+41, r26	; 0x29
    3e88:	ba a7       	std	Y+42, r27	; 0x2a
    3e8a:	8f a1       	ldd	r24, Y+39	; 0x27
    3e8c:	98 a5       	ldd	r25, Y+40	; 0x28
    3e8e:	a9 a5       	ldd	r26, Y+41	; 0x29
    3e90:	ba a5       	ldd	r27, Y+42	; 0x2a
    3e92:	85 30       	cpi	r24, 0x05	; 5
    3e94:	91 05       	cpc	r25, r1
    3e96:	a1 05       	cpc	r26, r1
    3e98:	b1 05       	cpc	r27, r1
    3e9a:	09 f4       	brne	.+2      	; 0x3e9e <LCD_Print_Int+0x8a6>
    3e9c:	6e c0       	rjmp	.+220    	; 0x3f7a <LCD_Print_Int+0x982>
    3e9e:	8f a1       	ldd	r24, Y+39	; 0x27
    3ea0:	98 a5       	ldd	r25, Y+40	; 0x28
    3ea2:	a9 a5       	ldd	r26, Y+41	; 0x29
    3ea4:	ba a5       	ldd	r27, Y+42	; 0x2a
    3ea6:	86 30       	cpi	r24, 0x06	; 6
    3ea8:	91 05       	cpc	r25, r1
    3eaa:	a1 05       	cpc	r26, r1
    3eac:	b1 05       	cpc	r27, r1
    3eae:	84 f5       	brge	.+96     	; 0x3f10 <LCD_Print_Int+0x918>
    3eb0:	8f a1       	ldd	r24, Y+39	; 0x27
    3eb2:	98 a5       	ldd	r25, Y+40	; 0x28
    3eb4:	a9 a5       	ldd	r26, Y+41	; 0x29
    3eb6:	ba a5       	ldd	r27, Y+42	; 0x2a
    3eb8:	82 30       	cpi	r24, 0x02	; 2
    3eba:	91 05       	cpc	r25, r1
    3ebc:	a1 05       	cpc	r26, r1
    3ebe:	b1 05       	cpc	r27, r1
    3ec0:	09 f4       	brne	.+2      	; 0x3ec4 <LCD_Print_Int+0x8cc>
    3ec2:	4f c0       	rjmp	.+158    	; 0x3f62 <LCD_Print_Int+0x96a>
    3ec4:	8f a1       	ldd	r24, Y+39	; 0x27
    3ec6:	98 a5       	ldd	r25, Y+40	; 0x28
    3ec8:	a9 a5       	ldd	r26, Y+41	; 0x29
    3eca:	ba a5       	ldd	r27, Y+42	; 0x2a
    3ecc:	83 30       	cpi	r24, 0x03	; 3
    3ece:	91 05       	cpc	r25, r1
    3ed0:	a1 05       	cpc	r26, r1
    3ed2:	b1 05       	cpc	r27, r1
    3ed4:	54 f4       	brge	.+20     	; 0x3eea <LCD_Print_Int+0x8f2>
    3ed6:	8f a1       	ldd	r24, Y+39	; 0x27
    3ed8:	98 a5       	ldd	r25, Y+40	; 0x28
    3eda:	a9 a5       	ldd	r26, Y+41	; 0x29
    3edc:	ba a5       	ldd	r27, Y+42	; 0x2a
    3ede:	81 30       	cpi	r24, 0x01	; 1
    3ee0:	91 05       	cpc	r25, r1
    3ee2:	a1 05       	cpc	r26, r1
    3ee4:	b1 05       	cpc	r27, r1
    3ee6:	c9 f1       	breq	.+114    	; 0x3f5a <LCD_Print_Int+0x962>
    3ee8:	5b c0       	rjmp	.+182    	; 0x3fa0 <LCD_Print_Int+0x9a8>
    3eea:	8f a1       	ldd	r24, Y+39	; 0x27
    3eec:	98 a5       	ldd	r25, Y+40	; 0x28
    3eee:	a9 a5       	ldd	r26, Y+41	; 0x29
    3ef0:	ba a5       	ldd	r27, Y+42	; 0x2a
    3ef2:	83 30       	cpi	r24, 0x03	; 3
    3ef4:	91 05       	cpc	r25, r1
    3ef6:	a1 05       	cpc	r26, r1
    3ef8:	b1 05       	cpc	r27, r1
    3efa:	b9 f1       	breq	.+110    	; 0x3f6a <LCD_Print_Int+0x972>
    3efc:	8f a1       	ldd	r24, Y+39	; 0x27
    3efe:	98 a5       	ldd	r25, Y+40	; 0x28
    3f00:	a9 a5       	ldd	r26, Y+41	; 0x29
    3f02:	ba a5       	ldd	r27, Y+42	; 0x2a
    3f04:	84 30       	cpi	r24, 0x04	; 4
    3f06:	91 05       	cpc	r25, r1
    3f08:	a1 05       	cpc	r26, r1
    3f0a:	b1 05       	cpc	r27, r1
    3f0c:	91 f1       	breq	.+100    	; 0x3f72 <LCD_Print_Int+0x97a>
    3f0e:	48 c0       	rjmp	.+144    	; 0x3fa0 <LCD_Print_Int+0x9a8>
    3f10:	8f a1       	ldd	r24, Y+39	; 0x27
    3f12:	98 a5       	ldd	r25, Y+40	; 0x28
    3f14:	a9 a5       	ldd	r26, Y+41	; 0x29
    3f16:	ba a5       	ldd	r27, Y+42	; 0x2a
    3f18:	87 30       	cpi	r24, 0x07	; 7
    3f1a:	91 05       	cpc	r25, r1
    3f1c:	a1 05       	cpc	r26, r1
    3f1e:	b1 05       	cpc	r27, r1
    3f20:	a1 f1       	breq	.+104    	; 0x3f8a <LCD_Print_Int+0x992>
    3f22:	8f a1       	ldd	r24, Y+39	; 0x27
    3f24:	98 a5       	ldd	r25, Y+40	; 0x28
    3f26:	a9 a5       	ldd	r26, Y+41	; 0x29
    3f28:	ba a5       	ldd	r27, Y+42	; 0x2a
    3f2a:	87 30       	cpi	r24, 0x07	; 7
    3f2c:	91 05       	cpc	r25, r1
    3f2e:	a1 05       	cpc	r26, r1
    3f30:	b1 05       	cpc	r27, r1
    3f32:	3c f1       	brlt	.+78     	; 0x3f82 <LCD_Print_Int+0x98a>
    3f34:	8f a1       	ldd	r24, Y+39	; 0x27
    3f36:	98 a5       	ldd	r25, Y+40	; 0x28
    3f38:	a9 a5       	ldd	r26, Y+41	; 0x29
    3f3a:	ba a5       	ldd	r27, Y+42	; 0x2a
    3f3c:	88 30       	cpi	r24, 0x08	; 8
    3f3e:	91 05       	cpc	r25, r1
    3f40:	a1 05       	cpc	r26, r1
    3f42:	b1 05       	cpc	r27, r1
    3f44:	31 f1       	breq	.+76     	; 0x3f92 <LCD_Print_Int+0x99a>
    3f46:	8f a1       	ldd	r24, Y+39	; 0x27
    3f48:	98 a5       	ldd	r25, Y+40	; 0x28
    3f4a:	a9 a5       	ldd	r26, Y+41	; 0x29
    3f4c:	ba a5       	ldd	r27, Y+42	; 0x2a
    3f4e:	89 30       	cpi	r24, 0x09	; 9
    3f50:	91 05       	cpc	r25, r1
    3f52:	a1 05       	cpc	r26, r1
    3f54:	b1 05       	cpc	r27, r1
    3f56:	09 f1       	breq	.+66     	; 0x3f9a <LCD_Print_Int+0x9a2>
    3f58:	23 c0       	rjmp	.+70     	; 0x3fa0 <LCD_Print_Int+0x9a8>
		{
		//case 0:LCD_Write_Char('0');break;
		case 1:LCD_Write_Char('1');break;
    3f5a:	81 e3       	ldi	r24, 0x31	; 49
    3f5c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3f60:	1f c0       	rjmp	.+62     	; 0x3fa0 <LCD_Print_Int+0x9a8>
		case 2:LCD_Write_Char('2');break;
    3f62:	82 e3       	ldi	r24, 0x32	; 50
    3f64:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3f68:	1b c0       	rjmp	.+54     	; 0x3fa0 <LCD_Print_Int+0x9a8>
		case 3:LCD_Write_Char('3');break;
    3f6a:	83 e3       	ldi	r24, 0x33	; 51
    3f6c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3f70:	17 c0       	rjmp	.+46     	; 0x3fa0 <LCD_Print_Int+0x9a8>
		case 4:LCD_Write_Char('4');break;
    3f72:	84 e3       	ldi	r24, 0x34	; 52
    3f74:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3f78:	13 c0       	rjmp	.+38     	; 0x3fa0 <LCD_Print_Int+0x9a8>
		case 5:LCD_Write_Char('5');break;
    3f7a:	85 e3       	ldi	r24, 0x35	; 53
    3f7c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3f80:	0f c0       	rjmp	.+30     	; 0x3fa0 <LCD_Print_Int+0x9a8>
		case 6:LCD_Write_Char('6');break;
    3f82:	86 e3       	ldi	r24, 0x36	; 54
    3f84:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3f88:	0b c0       	rjmp	.+22     	; 0x3fa0 <LCD_Print_Int+0x9a8>
		case 7:LCD_Write_Char('7');break;
    3f8a:	87 e3       	ldi	r24, 0x37	; 55
    3f8c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3f90:	07 c0       	rjmp	.+14     	; 0x3fa0 <LCD_Print_Int+0x9a8>
		case 8:LCD_Write_Char('8');break;
    3f92:	88 e3       	ldi	r24, 0x38	; 56
    3f94:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    3f98:	03 c0       	rjmp	.+6      	; 0x3fa0 <LCD_Print_Int+0x9a8>
		case 9:LCD_Write_Char('9');break;
    3f9a:	89 e3       	ldi	r24, 0x39	; 57
    3f9c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
		}

		switch(dozens)
    3fa0:	ed 80       	ldd	r14, Y+5	; 0x05
    3fa2:	fe 80       	ldd	r15, Y+6	; 0x06
    3fa4:	0f 81       	ldd	r16, Y+7	; 0x07
    3fa6:	18 85       	ldd	r17, Y+8	; 0x08
    3fa8:	eb a6       	std	Y+43, r14	; 0x2b
    3faa:	fc a6       	std	Y+44, r15	; 0x2c
    3fac:	0d a7       	std	Y+45, r16	; 0x2d
    3fae:	1e a7       	std	Y+46, r17	; 0x2e
    3fb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fb4:	ad a5       	ldd	r26, Y+45	; 0x2d
    3fb6:	be a5       	ldd	r27, Y+46	; 0x2e
    3fb8:	84 30       	cpi	r24, 0x04	; 4
    3fba:	91 05       	cpc	r25, r1
    3fbc:	a1 05       	cpc	r26, r1
    3fbe:	b1 05       	cpc	r27, r1
    3fc0:	09 f4       	brne	.+2      	; 0x3fc4 <LCD_Print_Int+0x9cc>
    3fc2:	8d c0       	rjmp	.+282    	; 0x40de <LCD_Print_Int+0xae6>
    3fc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fc8:	ad a5       	ldd	r26, Y+45	; 0x2d
    3fca:	be a5       	ldd	r27, Y+46	; 0x2e
    3fcc:	85 30       	cpi	r24, 0x05	; 5
    3fce:	91 05       	cpc	r25, r1
    3fd0:	a1 05       	cpc	r26, r1
    3fd2:	b1 05       	cpc	r27, r1
    3fd4:	9c f5       	brge	.+102    	; 0x403c <LCD_Print_Int+0xa44>
    3fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fda:	ad a5       	ldd	r26, Y+45	; 0x2d
    3fdc:	be a5       	ldd	r27, Y+46	; 0x2e
    3fde:	81 30       	cpi	r24, 0x01	; 1
    3fe0:	91 05       	cpc	r25, r1
    3fe2:	a1 05       	cpc	r26, r1
    3fe4:	b1 05       	cpc	r27, r1
    3fe6:	09 f4       	brne	.+2      	; 0x3fea <LCD_Print_Int+0x9f2>
    3fe8:	6e c0       	rjmp	.+220    	; 0x40c6 <LCD_Print_Int+0xace>
    3fea:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fec:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fee:	ad a5       	ldd	r26, Y+45	; 0x2d
    3ff0:	be a5       	ldd	r27, Y+46	; 0x2e
    3ff2:	82 30       	cpi	r24, 0x02	; 2
    3ff4:	91 05       	cpc	r25, r1
    3ff6:	a1 05       	cpc	r26, r1
    3ff8:	b1 05       	cpc	r27, r1
    3ffa:	5c f4       	brge	.+22     	; 0x4012 <LCD_Print_Int+0xa1a>
    3ffc:	eb a4       	ldd	r14, Y+43	; 0x2b
    3ffe:	fc a4       	ldd	r15, Y+44	; 0x2c
    4000:	0d a5       	ldd	r16, Y+45	; 0x2d
    4002:	1e a5       	ldd	r17, Y+46	; 0x2e
    4004:	e1 14       	cp	r14, r1
    4006:	f1 04       	cpc	r15, r1
    4008:	01 05       	cpc	r16, r1
    400a:	11 05       	cpc	r17, r1
    400c:	09 f4       	brne	.+2      	; 0x4010 <LCD_Print_Int+0xa18>
    400e:	4f c0       	rjmp	.+158    	; 0x40ae <LCD_Print_Int+0xab6>
    4010:	7d c0       	rjmp	.+250    	; 0x410c <LCD_Print_Int+0xb14>
    4012:	8b a5       	ldd	r24, Y+43	; 0x2b
    4014:	9c a5       	ldd	r25, Y+44	; 0x2c
    4016:	ad a5       	ldd	r26, Y+45	; 0x2d
    4018:	be a5       	ldd	r27, Y+46	; 0x2e
    401a:	82 30       	cpi	r24, 0x02	; 2
    401c:	91 05       	cpc	r25, r1
    401e:	a1 05       	cpc	r26, r1
    4020:	b1 05       	cpc	r27, r1
    4022:	09 f4       	brne	.+2      	; 0x4026 <LCD_Print_Int+0xa2e>
    4024:	54 c0       	rjmp	.+168    	; 0x40ce <LCD_Print_Int+0xad6>
    4026:	8b a5       	ldd	r24, Y+43	; 0x2b
    4028:	9c a5       	ldd	r25, Y+44	; 0x2c
    402a:	ad a5       	ldd	r26, Y+45	; 0x2d
    402c:	be a5       	ldd	r27, Y+46	; 0x2e
    402e:	83 30       	cpi	r24, 0x03	; 3
    4030:	91 05       	cpc	r25, r1
    4032:	a1 05       	cpc	r26, r1
    4034:	b1 05       	cpc	r27, r1
    4036:	09 f4       	brne	.+2      	; 0x403a <LCD_Print_Int+0xa42>
    4038:	4e c0       	rjmp	.+156    	; 0x40d6 <LCD_Print_Int+0xade>
    403a:	68 c0       	rjmp	.+208    	; 0x410c <LCD_Print_Int+0xb14>
    403c:	8b a5       	ldd	r24, Y+43	; 0x2b
    403e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4040:	ad a5       	ldd	r26, Y+45	; 0x2d
    4042:	be a5       	ldd	r27, Y+46	; 0x2e
    4044:	87 30       	cpi	r24, 0x07	; 7
    4046:	91 05       	cpc	r25, r1
    4048:	a1 05       	cpc	r26, r1
    404a:	b1 05       	cpc	r27, r1
    404c:	09 f4       	brne	.+2      	; 0x4050 <LCD_Print_Int+0xa58>
    404e:	53 c0       	rjmp	.+166    	; 0x40f6 <LCD_Print_Int+0xafe>
    4050:	8b a5       	ldd	r24, Y+43	; 0x2b
    4052:	9c a5       	ldd	r25, Y+44	; 0x2c
    4054:	ad a5       	ldd	r26, Y+45	; 0x2d
    4056:	be a5       	ldd	r27, Y+46	; 0x2e
    4058:	88 30       	cpi	r24, 0x08	; 8
    405a:	91 05       	cpc	r25, r1
    405c:	a1 05       	cpc	r26, r1
    405e:	b1 05       	cpc	r27, r1
    4060:	9c f4       	brge	.+38     	; 0x4088 <LCD_Print_Int+0xa90>
    4062:	8b a5       	ldd	r24, Y+43	; 0x2b
    4064:	9c a5       	ldd	r25, Y+44	; 0x2c
    4066:	ad a5       	ldd	r26, Y+45	; 0x2d
    4068:	be a5       	ldd	r27, Y+46	; 0x2e
    406a:	85 30       	cpi	r24, 0x05	; 5
    406c:	91 05       	cpc	r25, r1
    406e:	a1 05       	cpc	r26, r1
    4070:	b1 05       	cpc	r27, r1
    4072:	c9 f1       	breq	.+114    	; 0x40e6 <LCD_Print_Int+0xaee>
    4074:	8b a5       	ldd	r24, Y+43	; 0x2b
    4076:	9c a5       	ldd	r25, Y+44	; 0x2c
    4078:	ad a5       	ldd	r26, Y+45	; 0x2d
    407a:	be a5       	ldd	r27, Y+46	; 0x2e
    407c:	86 30       	cpi	r24, 0x06	; 6
    407e:	91 05       	cpc	r25, r1
    4080:	a1 05       	cpc	r26, r1
    4082:	b1 05       	cpc	r27, r1
    4084:	a1 f1       	breq	.+104    	; 0x40ee <LCD_Print_Int+0xaf6>
    4086:	42 c0       	rjmp	.+132    	; 0x410c <LCD_Print_Int+0xb14>
    4088:	8b a5       	ldd	r24, Y+43	; 0x2b
    408a:	9c a5       	ldd	r25, Y+44	; 0x2c
    408c:	ad a5       	ldd	r26, Y+45	; 0x2d
    408e:	be a5       	ldd	r27, Y+46	; 0x2e
    4090:	88 30       	cpi	r24, 0x08	; 8
    4092:	91 05       	cpc	r25, r1
    4094:	a1 05       	cpc	r26, r1
    4096:	b1 05       	cpc	r27, r1
    4098:	91 f1       	breq	.+100    	; 0x40fe <LCD_Print_Int+0xb06>
    409a:	8b a5       	ldd	r24, Y+43	; 0x2b
    409c:	9c a5       	ldd	r25, Y+44	; 0x2c
    409e:	ad a5       	ldd	r26, Y+45	; 0x2d
    40a0:	be a5       	ldd	r27, Y+46	; 0x2e
    40a2:	89 30       	cpi	r24, 0x09	; 9
    40a4:	91 05       	cpc	r25, r1
    40a6:	a1 05       	cpc	r26, r1
    40a8:	b1 05       	cpc	r27, r1
    40aa:	69 f1       	breq	.+90     	; 0x4106 <LCD_Print_Int+0xb0e>
    40ac:	2f c0       	rjmp	.+94     	; 0x410c <LCD_Print_Int+0xb14>
		{

		case 0:
			if(ones == 0)
    40ae:	89 81       	ldd	r24, Y+1	; 0x01
    40b0:	9a 81       	ldd	r25, Y+2	; 0x02
    40b2:	ab 81       	ldd	r26, Y+3	; 0x03
    40b4:	bc 81       	ldd	r27, Y+4	; 0x04
    40b6:	00 97       	sbiw	r24, 0x00	; 0
    40b8:	a1 05       	cpc	r26, r1
    40ba:	b1 05       	cpc	r27, r1
    40bc:	39 f1       	breq	.+78     	; 0x410c <LCD_Print_Int+0xb14>
			{
				break;
			}
			else
			{
				LCD_Write_Char('0');break;
    40be:	80 e3       	ldi	r24, 0x30	; 48
    40c0:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    40c4:	23 c0       	rjmp	.+70     	; 0x410c <LCD_Print_Int+0xb14>
			}
		case 1:LCD_Write_Char('1');break;
    40c6:	81 e3       	ldi	r24, 0x31	; 49
    40c8:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    40cc:	1f c0       	rjmp	.+62     	; 0x410c <LCD_Print_Int+0xb14>
		case 2:LCD_Write_Char('2');break;
    40ce:	82 e3       	ldi	r24, 0x32	; 50
    40d0:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    40d4:	1b c0       	rjmp	.+54     	; 0x410c <LCD_Print_Int+0xb14>
		case 3:LCD_Write_Char('3');break;
    40d6:	83 e3       	ldi	r24, 0x33	; 51
    40d8:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    40dc:	17 c0       	rjmp	.+46     	; 0x410c <LCD_Print_Int+0xb14>
		case 4:LCD_Write_Char('4');break;
    40de:	84 e3       	ldi	r24, 0x34	; 52
    40e0:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    40e4:	13 c0       	rjmp	.+38     	; 0x410c <LCD_Print_Int+0xb14>
		case 5:LCD_Write_Char('5');break;
    40e6:	85 e3       	ldi	r24, 0x35	; 53
    40e8:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    40ec:	0f c0       	rjmp	.+30     	; 0x410c <LCD_Print_Int+0xb14>
		case 6:LCD_Write_Char('6');break;
    40ee:	86 e3       	ldi	r24, 0x36	; 54
    40f0:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    40f4:	0b c0       	rjmp	.+22     	; 0x410c <LCD_Print_Int+0xb14>
		case 7:LCD_Write_Char('7');break;
    40f6:	87 e3       	ldi	r24, 0x37	; 55
    40f8:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    40fc:	07 c0       	rjmp	.+14     	; 0x410c <LCD_Print_Int+0xb14>
		case 8:LCD_Write_Char('8');break;
    40fe:	88 e3       	ldi	r24, 0x38	; 56
    4100:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    4104:	03 c0       	rjmp	.+6      	; 0x410c <LCD_Print_Int+0xb14>
		case 9:LCD_Write_Char('9');break;
    4106:	89 e3       	ldi	r24, 0x39	; 57
    4108:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
		}
		switch(thousands)
    410c:	e9 84       	ldd	r14, Y+9	; 0x09
    410e:	fa 84       	ldd	r15, Y+10	; 0x0a
    4110:	0b 85       	ldd	r16, Y+11	; 0x0b
    4112:	1c 85       	ldd	r17, Y+12	; 0x0c
    4114:	ef a6       	std	Y+47, r14	; 0x2f
    4116:	f8 aa       	std	Y+48, r15	; 0x30
    4118:	09 ab       	std	Y+49, r16	; 0x31
    411a:	1a ab       	std	Y+50, r17	; 0x32
    411c:	8f a5       	ldd	r24, Y+47	; 0x2f
    411e:	98 a9       	ldd	r25, Y+48	; 0x30
    4120:	a9 a9       	ldd	r26, Y+49	; 0x31
    4122:	ba a9       	ldd	r27, Y+50	; 0x32
    4124:	84 30       	cpi	r24, 0x04	; 4
    4126:	91 05       	cpc	r25, r1
    4128:	a1 05       	cpc	r26, r1
    412a:	b1 05       	cpc	r27, r1
    412c:	09 f4       	brne	.+2      	; 0x4130 <LCD_Print_Int+0xb38>
    412e:	85 c0       	rjmp	.+266    	; 0x423a <LCD_Print_Int+0xc42>
    4130:	8f a5       	ldd	r24, Y+47	; 0x2f
    4132:	98 a9       	ldd	r25, Y+48	; 0x30
    4134:	a9 a9       	ldd	r26, Y+49	; 0x31
    4136:	ba a9       	ldd	r27, Y+50	; 0x32
    4138:	85 30       	cpi	r24, 0x05	; 5
    413a:	91 05       	cpc	r25, r1
    413c:	a1 05       	cpc	r26, r1
    413e:	b1 05       	cpc	r27, r1
    4140:	9c f5       	brge	.+102    	; 0x41a8 <LCD_Print_Int+0xbb0>
    4142:	8f a5       	ldd	r24, Y+47	; 0x2f
    4144:	98 a9       	ldd	r25, Y+48	; 0x30
    4146:	a9 a9       	ldd	r26, Y+49	; 0x31
    4148:	ba a9       	ldd	r27, Y+50	; 0x32
    414a:	81 30       	cpi	r24, 0x01	; 1
    414c:	91 05       	cpc	r25, r1
    414e:	a1 05       	cpc	r26, r1
    4150:	b1 05       	cpc	r27, r1
    4152:	09 f4       	brne	.+2      	; 0x4156 <LCD_Print_Int+0xb5e>
    4154:	66 c0       	rjmp	.+204    	; 0x4222 <LCD_Print_Int+0xc2a>
    4156:	8f a5       	ldd	r24, Y+47	; 0x2f
    4158:	98 a9       	ldd	r25, Y+48	; 0x30
    415a:	a9 a9       	ldd	r26, Y+49	; 0x31
    415c:	ba a9       	ldd	r27, Y+50	; 0x32
    415e:	82 30       	cpi	r24, 0x02	; 2
    4160:	91 05       	cpc	r25, r1
    4162:	a1 05       	cpc	r26, r1
    4164:	b1 05       	cpc	r27, r1
    4166:	5c f4       	brge	.+22     	; 0x417e <LCD_Print_Int+0xb86>
    4168:	ef a4       	ldd	r14, Y+47	; 0x2f
    416a:	f8 a8       	ldd	r15, Y+48	; 0x30
    416c:	09 a9       	ldd	r16, Y+49	; 0x31
    416e:	1a a9       	ldd	r17, Y+50	; 0x32
    4170:	e1 14       	cp	r14, r1
    4172:	f1 04       	cpc	r15, r1
    4174:	01 05       	cpc	r16, r1
    4176:	11 05       	cpc	r17, r1
    4178:	09 f4       	brne	.+2      	; 0x417c <LCD_Print_Int+0xb84>
    417a:	4f c0       	rjmp	.+158    	; 0x421a <LCD_Print_Int+0xc22>
    417c:	75 c0       	rjmp	.+234    	; 0x4268 <LCD_Print_Int+0xc70>
    417e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4180:	98 a9       	ldd	r25, Y+48	; 0x30
    4182:	a9 a9       	ldd	r26, Y+49	; 0x31
    4184:	ba a9       	ldd	r27, Y+50	; 0x32
    4186:	82 30       	cpi	r24, 0x02	; 2
    4188:	91 05       	cpc	r25, r1
    418a:	a1 05       	cpc	r26, r1
    418c:	b1 05       	cpc	r27, r1
    418e:	09 f4       	brne	.+2      	; 0x4192 <LCD_Print_Int+0xb9a>
    4190:	4c c0       	rjmp	.+152    	; 0x422a <LCD_Print_Int+0xc32>
    4192:	8f a5       	ldd	r24, Y+47	; 0x2f
    4194:	98 a9       	ldd	r25, Y+48	; 0x30
    4196:	a9 a9       	ldd	r26, Y+49	; 0x31
    4198:	ba a9       	ldd	r27, Y+50	; 0x32
    419a:	83 30       	cpi	r24, 0x03	; 3
    419c:	91 05       	cpc	r25, r1
    419e:	a1 05       	cpc	r26, r1
    41a0:	b1 05       	cpc	r27, r1
    41a2:	09 f4       	brne	.+2      	; 0x41a6 <LCD_Print_Int+0xbae>
    41a4:	46 c0       	rjmp	.+140    	; 0x4232 <LCD_Print_Int+0xc3a>
    41a6:	60 c0       	rjmp	.+192    	; 0x4268 <LCD_Print_Int+0xc70>
    41a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    41aa:	98 a9       	ldd	r25, Y+48	; 0x30
    41ac:	a9 a9       	ldd	r26, Y+49	; 0x31
    41ae:	ba a9       	ldd	r27, Y+50	; 0x32
    41b0:	87 30       	cpi	r24, 0x07	; 7
    41b2:	91 05       	cpc	r25, r1
    41b4:	a1 05       	cpc	r26, r1
    41b6:	b1 05       	cpc	r27, r1
    41b8:	09 f4       	brne	.+2      	; 0x41bc <LCD_Print_Int+0xbc4>
    41ba:	4b c0       	rjmp	.+150    	; 0x4252 <LCD_Print_Int+0xc5a>
    41bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    41be:	98 a9       	ldd	r25, Y+48	; 0x30
    41c0:	a9 a9       	ldd	r26, Y+49	; 0x31
    41c2:	ba a9       	ldd	r27, Y+50	; 0x32
    41c4:	88 30       	cpi	r24, 0x08	; 8
    41c6:	91 05       	cpc	r25, r1
    41c8:	a1 05       	cpc	r26, r1
    41ca:	b1 05       	cpc	r27, r1
    41cc:	9c f4       	brge	.+38     	; 0x41f4 <LCD_Print_Int+0xbfc>
    41ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    41d0:	98 a9       	ldd	r25, Y+48	; 0x30
    41d2:	a9 a9       	ldd	r26, Y+49	; 0x31
    41d4:	ba a9       	ldd	r27, Y+50	; 0x32
    41d6:	85 30       	cpi	r24, 0x05	; 5
    41d8:	91 05       	cpc	r25, r1
    41da:	a1 05       	cpc	r26, r1
    41dc:	b1 05       	cpc	r27, r1
    41de:	89 f1       	breq	.+98     	; 0x4242 <LCD_Print_Int+0xc4a>
    41e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    41e2:	98 a9       	ldd	r25, Y+48	; 0x30
    41e4:	a9 a9       	ldd	r26, Y+49	; 0x31
    41e6:	ba a9       	ldd	r27, Y+50	; 0x32
    41e8:	86 30       	cpi	r24, 0x06	; 6
    41ea:	91 05       	cpc	r25, r1
    41ec:	a1 05       	cpc	r26, r1
    41ee:	b1 05       	cpc	r27, r1
    41f0:	61 f1       	breq	.+88     	; 0x424a <LCD_Print_Int+0xc52>
    41f2:	3a c0       	rjmp	.+116    	; 0x4268 <LCD_Print_Int+0xc70>
    41f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    41f6:	98 a9       	ldd	r25, Y+48	; 0x30
    41f8:	a9 a9       	ldd	r26, Y+49	; 0x31
    41fa:	ba a9       	ldd	r27, Y+50	; 0x32
    41fc:	88 30       	cpi	r24, 0x08	; 8
    41fe:	91 05       	cpc	r25, r1
    4200:	a1 05       	cpc	r26, r1
    4202:	b1 05       	cpc	r27, r1
    4204:	51 f1       	breq	.+84     	; 0x425a <LCD_Print_Int+0xc62>
    4206:	8f a5       	ldd	r24, Y+47	; 0x2f
    4208:	98 a9       	ldd	r25, Y+48	; 0x30
    420a:	a9 a9       	ldd	r26, Y+49	; 0x31
    420c:	ba a9       	ldd	r27, Y+50	; 0x32
    420e:	89 30       	cpi	r24, 0x09	; 9
    4210:	91 05       	cpc	r25, r1
    4212:	a1 05       	cpc	r26, r1
    4214:	b1 05       	cpc	r27, r1
    4216:	29 f1       	breq	.+74     	; 0x4262 <LCD_Print_Int+0xc6a>
    4218:	27 c0       	rjmp	.+78     	; 0x4268 <LCD_Print_Int+0xc70>
		{
		case 0:LCD_Write_Char('0');break;
    421a:	80 e3       	ldi	r24, 0x30	; 48
    421c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    4220:	23 c0       	rjmp	.+70     	; 0x4268 <LCD_Print_Int+0xc70>
		case 1:LCD_Write_Char('1');break;
    4222:	81 e3       	ldi	r24, 0x31	; 49
    4224:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    4228:	1f c0       	rjmp	.+62     	; 0x4268 <LCD_Print_Int+0xc70>
		case 2:LCD_Write_Char('2');break;
    422a:	82 e3       	ldi	r24, 0x32	; 50
    422c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    4230:	1b c0       	rjmp	.+54     	; 0x4268 <LCD_Print_Int+0xc70>
		case 3:LCD_Write_Char('3');break;
    4232:	83 e3       	ldi	r24, 0x33	; 51
    4234:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    4238:	17 c0       	rjmp	.+46     	; 0x4268 <LCD_Print_Int+0xc70>
		case 4:LCD_Write_Char('4');break;
    423a:	84 e3       	ldi	r24, 0x34	; 52
    423c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    4240:	13 c0       	rjmp	.+38     	; 0x4268 <LCD_Print_Int+0xc70>
		case 5:LCD_Write_Char('5');break;
    4242:	85 e3       	ldi	r24, 0x35	; 53
    4244:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    4248:	0f c0       	rjmp	.+30     	; 0x4268 <LCD_Print_Int+0xc70>
		case 6:LCD_Write_Char('6');break;
    424a:	86 e3       	ldi	r24, 0x36	; 54
    424c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    4250:	0b c0       	rjmp	.+22     	; 0x4268 <LCD_Print_Int+0xc70>
		case 7:LCD_Write_Char('7');break;
    4252:	87 e3       	ldi	r24, 0x37	; 55
    4254:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    4258:	07 c0       	rjmp	.+14     	; 0x4268 <LCD_Print_Int+0xc70>
		case 8:LCD_Write_Char('8');break;
    425a:	88 e3       	ldi	r24, 0x38	; 56
    425c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
    4260:	03 c0       	rjmp	.+6      	; 0x4268 <LCD_Print_Int+0xc70>
		case 9:LCD_Write_Char('9');break;
    4262:	89 e3       	ldi	r24, 0x39	; 57
    4264:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_Write_Char>
		}
		switch(fraction)
    4268:	ed 84       	ldd	r14, Y+13	; 0x0d
    426a:	fe 84       	ldd	r15, Y+14	; 0x0e
    426c:	0f 85       	ldd	r16, Y+15	; 0x0f
    426e:	18 89       	ldd	r17, Y+16	; 0x10
    4270:	eb aa       	std	Y+51, r14	; 0x33
    4272:	fc aa       	std	Y+52, r15	; 0x34
    4274:	0d ab       	std	Y+53, r16	; 0x35
    4276:	1e ab       	std	Y+54, r17	; 0x36
    4278:	8b a9       	ldd	r24, Y+51	; 0x33
    427a:	9c a9       	ldd	r25, Y+52	; 0x34
    427c:	ad a9       	ldd	r26, Y+53	; 0x35
    427e:	be a9       	ldd	r27, Y+54	; 0x36
    4280:	84 30       	cpi	r24, 0x04	; 4
    4282:	91 05       	cpc	r25, r1
    4284:	a1 05       	cpc	r26, r1
    4286:	b1 05       	cpc	r27, r1
    4288:	09 f4       	brne	.+2      	; 0x428c <LCD_Print_Int+0xc94>
    428a:	89 c0       	rjmp	.+274    	; 0x439e <LCD_Print_Int+0xda6>
    428c:	8b a9       	ldd	r24, Y+51	; 0x33
    428e:	9c a9       	ldd	r25, Y+52	; 0x34
    4290:	ad a9       	ldd	r26, Y+53	; 0x35
    4292:	be a9       	ldd	r27, Y+54	; 0x36
    4294:	85 30       	cpi	r24, 0x05	; 5
    4296:	91 05       	cpc	r25, r1
    4298:	a1 05       	cpc	r26, r1
    429a:	b1 05       	cpc	r27, r1
    429c:	9c f5       	brge	.+102    	; 0x4304 <LCD_Print_Int+0xd0c>
    429e:	8b a9       	ldd	r24, Y+51	; 0x33
    42a0:	9c a9       	ldd	r25, Y+52	; 0x34
    42a2:	ad a9       	ldd	r26, Y+53	; 0x35
    42a4:	be a9       	ldd	r27, Y+54	; 0x36
    42a6:	81 30       	cpi	r24, 0x01	; 1
    42a8:	91 05       	cpc	r25, r1
    42aa:	a1 05       	cpc	r26, r1
    42ac:	b1 05       	cpc	r27, r1
    42ae:	09 f4       	brne	.+2      	; 0x42b2 <LCD_Print_Int+0xcba>
    42b0:	67 c0       	rjmp	.+206    	; 0x4380 <LCD_Print_Int+0xd88>
    42b2:	8b a9       	ldd	r24, Y+51	; 0x33
    42b4:	9c a9       	ldd	r25, Y+52	; 0x34
    42b6:	ad a9       	ldd	r26, Y+53	; 0x35
    42b8:	be a9       	ldd	r27, Y+54	; 0x36
    42ba:	82 30       	cpi	r24, 0x02	; 2
    42bc:	91 05       	cpc	r25, r1
    42be:	a1 05       	cpc	r26, r1
    42c0:	b1 05       	cpc	r27, r1
    42c2:	5c f4       	brge	.+22     	; 0x42da <LCD_Print_Int+0xce2>
    42c4:	eb a8       	ldd	r14, Y+51	; 0x33
    42c6:	fc a8       	ldd	r15, Y+52	; 0x34
    42c8:	0d a9       	ldd	r16, Y+53	; 0x35
    42ca:	1e a9       	ldd	r17, Y+54	; 0x36
    42cc:	e1 14       	cp	r14, r1
    42ce:	f1 04       	cpc	r15, r1
    42d0:	01 05       	cpc	r16, r1
    42d2:	11 05       	cpc	r17, r1
    42d4:	09 f4       	brne	.+2      	; 0x42d8 <LCD_Print_Int+0xce0>
    42d6:	4f c0       	rjmp	.+158    	; 0x4376 <LCD_Print_Int+0xd7e>
    42d8:	7f c0       	rjmp	.+254    	; 0x43d8 <LCD_Print_Int+0xde0>
    42da:	8b a9       	ldd	r24, Y+51	; 0x33
    42dc:	9c a9       	ldd	r25, Y+52	; 0x34
    42de:	ad a9       	ldd	r26, Y+53	; 0x35
    42e0:	be a9       	ldd	r27, Y+54	; 0x36
    42e2:	82 30       	cpi	r24, 0x02	; 2
    42e4:	91 05       	cpc	r25, r1
    42e6:	a1 05       	cpc	r26, r1
    42e8:	b1 05       	cpc	r27, r1
    42ea:	09 f4       	brne	.+2      	; 0x42ee <LCD_Print_Int+0xcf6>
    42ec:	4e c0       	rjmp	.+156    	; 0x438a <LCD_Print_Int+0xd92>
    42ee:	8b a9       	ldd	r24, Y+51	; 0x33
    42f0:	9c a9       	ldd	r25, Y+52	; 0x34
    42f2:	ad a9       	ldd	r26, Y+53	; 0x35
    42f4:	be a9       	ldd	r27, Y+54	; 0x36
    42f6:	83 30       	cpi	r24, 0x03	; 3
    42f8:	91 05       	cpc	r25, r1
    42fa:	a1 05       	cpc	r26, r1
    42fc:	b1 05       	cpc	r27, r1
    42fe:	09 f4       	brne	.+2      	; 0x4302 <LCD_Print_Int+0xd0a>
    4300:	49 c0       	rjmp	.+146    	; 0x4394 <LCD_Print_Int+0xd9c>
    4302:	6a c0       	rjmp	.+212    	; 0x43d8 <LCD_Print_Int+0xde0>
    4304:	8b a9       	ldd	r24, Y+51	; 0x33
    4306:	9c a9       	ldd	r25, Y+52	; 0x34
    4308:	ad a9       	ldd	r26, Y+53	; 0x35
    430a:	be a9       	ldd	r27, Y+54	; 0x36
    430c:	87 30       	cpi	r24, 0x07	; 7
    430e:	91 05       	cpc	r25, r1
    4310:	a1 05       	cpc	r26, r1
    4312:	b1 05       	cpc	r27, r1
    4314:	09 f4       	brne	.+2      	; 0x4318 <LCD_Print_Int+0xd20>
    4316:	52 c0       	rjmp	.+164    	; 0x43bc <LCD_Print_Int+0xdc4>
    4318:	8b a9       	ldd	r24, Y+51	; 0x33
    431a:	9c a9       	ldd	r25, Y+52	; 0x34
    431c:	ad a9       	ldd	r26, Y+53	; 0x35
    431e:	be a9       	ldd	r27, Y+54	; 0x36
    4320:	88 30       	cpi	r24, 0x08	; 8
    4322:	91 05       	cpc	r25, r1
    4324:	a1 05       	cpc	r26, r1
    4326:	b1 05       	cpc	r27, r1
    4328:	9c f4       	brge	.+38     	; 0x4350 <LCD_Print_Int+0xd58>
    432a:	8b a9       	ldd	r24, Y+51	; 0x33
    432c:	9c a9       	ldd	r25, Y+52	; 0x34
    432e:	ad a9       	ldd	r26, Y+53	; 0x35
    4330:	be a9       	ldd	r27, Y+54	; 0x36
    4332:	85 30       	cpi	r24, 0x05	; 5
    4334:	91 05       	cpc	r25, r1
    4336:	a1 05       	cpc	r26, r1
    4338:	b1 05       	cpc	r27, r1
    433a:	b1 f1       	breq	.+108    	; 0x43a8 <LCD_Print_Int+0xdb0>
    433c:	8b a9       	ldd	r24, Y+51	; 0x33
    433e:	9c a9       	ldd	r25, Y+52	; 0x34
    4340:	ad a9       	ldd	r26, Y+53	; 0x35
    4342:	be a9       	ldd	r27, Y+54	; 0x36
    4344:	86 30       	cpi	r24, 0x06	; 6
    4346:	91 05       	cpc	r25, r1
    4348:	a1 05       	cpc	r26, r1
    434a:	b1 05       	cpc	r27, r1
    434c:	91 f1       	breq	.+100    	; 0x43b2 <LCD_Print_Int+0xdba>
    434e:	44 c0       	rjmp	.+136    	; 0x43d8 <LCD_Print_Int+0xde0>
    4350:	8b a9       	ldd	r24, Y+51	; 0x33
    4352:	9c a9       	ldd	r25, Y+52	; 0x34
    4354:	ad a9       	ldd	r26, Y+53	; 0x35
    4356:	be a9       	ldd	r27, Y+54	; 0x36
    4358:	88 30       	cpi	r24, 0x08	; 8
    435a:	91 05       	cpc	r25, r1
    435c:	a1 05       	cpc	r26, r1
    435e:	b1 05       	cpc	r27, r1
    4360:	91 f1       	breq	.+100    	; 0x43c6 <LCD_Print_Int+0xdce>
    4362:	8b a9       	ldd	r24, Y+51	; 0x33
    4364:	9c a9       	ldd	r25, Y+52	; 0x34
    4366:	ad a9       	ldd	r26, Y+53	; 0x35
    4368:	be a9       	ldd	r27, Y+54	; 0x36
    436a:	89 30       	cpi	r24, 0x09	; 9
    436c:	91 05       	cpc	r25, r1
    436e:	a1 05       	cpc	r26, r1
    4370:	b1 05       	cpc	r27, r1
    4372:	71 f1       	breq	.+92     	; 0x43d0 <LCD_Print_Int+0xdd8>
    4374:	31 c0       	rjmp	.+98     	; 0x43d8 <LCD_Print_Int+0xde0>
		{
		case 0:LCD_Write_String(".0");break;
    4376:	81 e7       	ldi	r24, 0x71	; 113
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    437e:	2c c0       	rjmp	.+88     	; 0x43d8 <LCD_Print_Int+0xde0>
		case 1:LCD_Write_String(".1");break;
    4380:	84 e7       	ldi	r24, 0x74	; 116
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    4388:	27 c0       	rjmp	.+78     	; 0x43d8 <LCD_Print_Int+0xde0>
		case 2:LCD_Write_String(".2");break;
    438a:	87 e7       	ldi	r24, 0x77	; 119
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    4392:	22 c0       	rjmp	.+68     	; 0x43d8 <LCD_Print_Int+0xde0>
		case 3:LCD_Write_String(".3");break;
    4394:	8a e7       	ldi	r24, 0x7A	; 122
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    439c:	1d c0       	rjmp	.+58     	; 0x43d8 <LCD_Print_Int+0xde0>
		case 4:LCD_Write_String(".4");break;
    439e:	8d e7       	ldi	r24, 0x7D	; 125
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    43a6:	18 c0       	rjmp	.+48     	; 0x43d8 <LCD_Print_Int+0xde0>
		case 5:LCD_Write_String(".5");break;
    43a8:	80 e8       	ldi	r24, 0x80	; 128
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    43b0:	13 c0       	rjmp	.+38     	; 0x43d8 <LCD_Print_Int+0xde0>
		case 6:LCD_Write_String(".6");break;
    43b2:	83 e8       	ldi	r24, 0x83	; 131
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    43ba:	0e c0       	rjmp	.+28     	; 0x43d8 <LCD_Print_Int+0xde0>
		case 7:LCD_Write_String(".7");break;
    43bc:	86 e8       	ldi	r24, 0x86	; 134
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    43c4:	09 c0       	rjmp	.+18     	; 0x43d8 <LCD_Print_Int+0xde0>
		case 8:LCD_Write_String(".8");break;
    43c6:	89 e8       	ldi	r24, 0x89	; 137
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    43ce:	04 c0       	rjmp	.+8      	; 0x43d8 <LCD_Print_Int+0xde0>
		case 9:LCD_Write_String(".9");break;
    43d0:	8c e8       	ldi	r24, 0x8C	; 140
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
	else
	{

	}

}
    43d8:	e6 96       	adiw	r28, 0x36	; 54
    43da:	0f b6       	in	r0, 0x3f	; 63
    43dc:	f8 94       	cli
    43de:	de bf       	out	0x3e, r29	; 62
    43e0:	0f be       	out	0x3f, r0	; 63
    43e2:	cd bf       	out	0x3d, r28	; 61
    43e4:	cf 91       	pop	r28
    43e6:	df 91       	pop	r29
    43e8:	1f 91       	pop	r17
    43ea:	0f 91       	pop	r16
    43ec:	ff 90       	pop	r15
    43ee:	ef 90       	pop	r14
    43f0:	08 95       	ret

000043f2 <main>:
#include"LCD.h"
#include"ADC.h"


void main(void)
{
    43f2:	df 93       	push	r29
    43f4:	cf 93       	push	r28
    43f6:	00 d0       	rcall	.+0      	; 0x43f8 <main+0x6>
    43f8:	00 d0       	rcall	.+0      	; 0x43fa <main+0x8>
    43fa:	00 d0       	rcall	.+0      	; 0x43fc <main+0xa>
    43fc:	cd b7       	in	r28, 0x3d	; 61
    43fe:	de b7       	in	r29, 0x3e	; 62

	u16 ADC;
	f32 volt;
	SetPinMode(PIN0,PORTA,INPUT);
    4400:	80 e0       	ldi	r24, 0x00	; 0
    4402:	60 e0       	ldi	r22, 0x00	; 0
    4404:	40 e0       	ldi	r20, 0x00	; 0
    4406:	0e 94 ac 09 	call	0x1358	; 0x1358 <SetPinMode>
	ADC_INIT();
    440a:	0e 94 47 07 	call	0xe8e	; 0xe8e <ADC_INIT>
	SetPortMode(Data_Port,OUTPUT);
    440e:	82 e0       	ldi	r24, 0x02	; 2
    4410:	61 e0       	ldi	r22, 0x01	; 1
    4412:	0e 94 67 0b 	call	0x16ce	; 0x16ce <SetPortMode>
	SetPortMode(Control_Port,OUTPUT);
    4416:	83 e0       	ldi	r24, 0x03	; 3
    4418:	61 e0       	ldi	r22, 0x01	; 1
    441a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <SetPortMode>
	LCD_Init();
    441e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <LCD_Init>
	LCD_GoTo_XY(1,1);
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	61 e0       	ldi	r22, 0x01	; 1
    4426:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LCD_GoTo_XY>
	ADC = ADC_Read(A0);
    442a:	80 e0       	ldi	r24, 0x00	; 0
    442c:	0e 94 7a 07 	call	0xef4	; 0xef4 <ADC_Read>
    4430:	9e 83       	std	Y+6, r25	; 0x06
    4432:	8d 83       	std	Y+5, r24	; 0x05
	volt = (f32)(ADC*20)/1024;
    4434:	8d 81       	ldd	r24, Y+5	; 0x05
    4436:	9e 81       	ldd	r25, Y+6	; 0x06
    4438:	9c 01       	movw	r18, r24
    443a:	22 0f       	add	r18, r18
    443c:	33 1f       	adc	r19, r19
    443e:	22 0f       	add	r18, r18
    4440:	33 1f       	adc	r19, r19
    4442:	c9 01       	movw	r24, r18
    4444:	88 0f       	add	r24, r24
    4446:	99 1f       	adc	r25, r25
    4448:	88 0f       	add	r24, r24
    444a:	99 1f       	adc	r25, r25
    444c:	82 0f       	add	r24, r18
    444e:	93 1f       	adc	r25, r19
    4450:	cc 01       	movw	r24, r24
    4452:	a0 e0       	ldi	r26, 0x00	; 0
    4454:	b0 e0       	ldi	r27, 0x00	; 0
    4456:	bc 01       	movw	r22, r24
    4458:	cd 01       	movw	r24, r26
    445a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    445e:	dc 01       	movw	r26, r24
    4460:	cb 01       	movw	r24, r22
    4462:	bc 01       	movw	r22, r24
    4464:	cd 01       	movw	r24, r26
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	40 e8       	ldi	r20, 0x80	; 128
    446c:	54 e4       	ldi	r21, 0x44	; 68
    446e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	89 83       	std	Y+1, r24	; 0x01
    4478:	9a 83       	std	Y+2, r25	; 0x02
    447a:	ab 83       	std	Y+3, r26	; 0x03
    447c:	bc 83       	std	Y+4, r27	; 0x04
	LCD_Print_Int(volt);
    447e:	89 81       	ldd	r24, Y+1	; 0x01
    4480:	9a 81       	ldd	r25, Y+2	; 0x02
    4482:	ab 81       	ldd	r26, Y+3	; 0x03
    4484:	bc 81       	ldd	r27, Y+4	; 0x04
    4486:	bc 01       	movw	r22, r24
    4488:	cd 01       	movw	r24, r26
    448a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_Print_Int>
	LCD_Write_String(" Volt");
    448e:	8f e8       	ldi	r24, 0x8F	; 143
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	0e 94 3e 19 	call	0x327c	; 0x327c <LCD_Write_String>
    4496:	ff cf       	rjmp	.-2      	; 0x4496 <main+0xa4>

00004498 <__divmodsi4>:
    4498:	97 fb       	bst	r25, 7
    449a:	09 2e       	mov	r0, r25
    449c:	05 26       	eor	r0, r21
    449e:	0e d0       	rcall	.+28     	; 0x44bc <__divmodsi4_neg1>
    44a0:	57 fd       	sbrc	r21, 7
    44a2:	04 d0       	rcall	.+8      	; 0x44ac <__divmodsi4_neg2>
    44a4:	14 d0       	rcall	.+40     	; 0x44ce <__udivmodsi4>
    44a6:	0a d0       	rcall	.+20     	; 0x44bc <__divmodsi4_neg1>
    44a8:	00 1c       	adc	r0, r0
    44aa:	38 f4       	brcc	.+14     	; 0x44ba <__divmodsi4_exit>

000044ac <__divmodsi4_neg2>:
    44ac:	50 95       	com	r21
    44ae:	40 95       	com	r20
    44b0:	30 95       	com	r19
    44b2:	21 95       	neg	r18
    44b4:	3f 4f       	sbci	r19, 0xFF	; 255
    44b6:	4f 4f       	sbci	r20, 0xFF	; 255
    44b8:	5f 4f       	sbci	r21, 0xFF	; 255

000044ba <__divmodsi4_exit>:
    44ba:	08 95       	ret

000044bc <__divmodsi4_neg1>:
    44bc:	f6 f7       	brtc	.-4      	; 0x44ba <__divmodsi4_exit>
    44be:	90 95       	com	r25
    44c0:	80 95       	com	r24
    44c2:	70 95       	com	r23
    44c4:	61 95       	neg	r22
    44c6:	7f 4f       	sbci	r23, 0xFF	; 255
    44c8:	8f 4f       	sbci	r24, 0xFF	; 255
    44ca:	9f 4f       	sbci	r25, 0xFF	; 255
    44cc:	08 95       	ret

000044ce <__udivmodsi4>:
    44ce:	a1 e2       	ldi	r26, 0x21	; 33
    44d0:	1a 2e       	mov	r1, r26
    44d2:	aa 1b       	sub	r26, r26
    44d4:	bb 1b       	sub	r27, r27
    44d6:	fd 01       	movw	r30, r26
    44d8:	0d c0       	rjmp	.+26     	; 0x44f4 <__udivmodsi4_ep>

000044da <__udivmodsi4_loop>:
    44da:	aa 1f       	adc	r26, r26
    44dc:	bb 1f       	adc	r27, r27
    44de:	ee 1f       	adc	r30, r30
    44e0:	ff 1f       	adc	r31, r31
    44e2:	a2 17       	cp	r26, r18
    44e4:	b3 07       	cpc	r27, r19
    44e6:	e4 07       	cpc	r30, r20
    44e8:	f5 07       	cpc	r31, r21
    44ea:	20 f0       	brcs	.+8      	; 0x44f4 <__udivmodsi4_ep>
    44ec:	a2 1b       	sub	r26, r18
    44ee:	b3 0b       	sbc	r27, r19
    44f0:	e4 0b       	sbc	r30, r20
    44f2:	f5 0b       	sbc	r31, r21

000044f4 <__udivmodsi4_ep>:
    44f4:	66 1f       	adc	r22, r22
    44f6:	77 1f       	adc	r23, r23
    44f8:	88 1f       	adc	r24, r24
    44fa:	99 1f       	adc	r25, r25
    44fc:	1a 94       	dec	r1
    44fe:	69 f7       	brne	.-38     	; 0x44da <__udivmodsi4_loop>
    4500:	60 95       	com	r22
    4502:	70 95       	com	r23
    4504:	80 95       	com	r24
    4506:	90 95       	com	r25
    4508:	9b 01       	movw	r18, r22
    450a:	ac 01       	movw	r20, r24
    450c:	bd 01       	movw	r22, r26
    450e:	cf 01       	movw	r24, r30
    4510:	08 95       	ret

00004512 <__prologue_saves__>:
    4512:	2f 92       	push	r2
    4514:	3f 92       	push	r3
    4516:	4f 92       	push	r4
    4518:	5f 92       	push	r5
    451a:	6f 92       	push	r6
    451c:	7f 92       	push	r7
    451e:	8f 92       	push	r8
    4520:	9f 92       	push	r9
    4522:	af 92       	push	r10
    4524:	bf 92       	push	r11
    4526:	cf 92       	push	r12
    4528:	df 92       	push	r13
    452a:	ef 92       	push	r14
    452c:	ff 92       	push	r15
    452e:	0f 93       	push	r16
    4530:	1f 93       	push	r17
    4532:	cf 93       	push	r28
    4534:	df 93       	push	r29
    4536:	cd b7       	in	r28, 0x3d	; 61
    4538:	de b7       	in	r29, 0x3e	; 62
    453a:	ca 1b       	sub	r28, r26
    453c:	db 0b       	sbc	r29, r27
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	de bf       	out	0x3e, r29	; 62
    4544:	0f be       	out	0x3f, r0	; 63
    4546:	cd bf       	out	0x3d, r28	; 61
    4548:	09 94       	ijmp

0000454a <__epilogue_restores__>:
    454a:	2a 88       	ldd	r2, Y+18	; 0x12
    454c:	39 88       	ldd	r3, Y+17	; 0x11
    454e:	48 88       	ldd	r4, Y+16	; 0x10
    4550:	5f 84       	ldd	r5, Y+15	; 0x0f
    4552:	6e 84       	ldd	r6, Y+14	; 0x0e
    4554:	7d 84       	ldd	r7, Y+13	; 0x0d
    4556:	8c 84       	ldd	r8, Y+12	; 0x0c
    4558:	9b 84       	ldd	r9, Y+11	; 0x0b
    455a:	aa 84       	ldd	r10, Y+10	; 0x0a
    455c:	b9 84       	ldd	r11, Y+9	; 0x09
    455e:	c8 84       	ldd	r12, Y+8	; 0x08
    4560:	df 80       	ldd	r13, Y+7	; 0x07
    4562:	ee 80       	ldd	r14, Y+6	; 0x06
    4564:	fd 80       	ldd	r15, Y+5	; 0x05
    4566:	0c 81       	ldd	r16, Y+4	; 0x04
    4568:	1b 81       	ldd	r17, Y+3	; 0x03
    456a:	aa 81       	ldd	r26, Y+2	; 0x02
    456c:	b9 81       	ldd	r27, Y+1	; 0x01
    456e:	ce 0f       	add	r28, r30
    4570:	d1 1d       	adc	r29, r1
    4572:	0f b6       	in	r0, 0x3f	; 63
    4574:	f8 94       	cli
    4576:	de bf       	out	0x3e, r29	; 62
    4578:	0f be       	out	0x3f, r0	; 63
    457a:	cd bf       	out	0x3d, r28	; 61
    457c:	ed 01       	movw	r28, r26
    457e:	08 95       	ret

00004580 <_exit>:
    4580:	f8 94       	cli

00004582 <__stop_program>:
    4582:	ff cf       	rjmp	.-2      	; 0x4582 <__stop_program>
