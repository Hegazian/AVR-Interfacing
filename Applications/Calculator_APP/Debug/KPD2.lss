
KPD2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  000052ea  0000537e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008001a8  008001a8  000054c6  2**0
                  ALLOC
  3 .stab         00003078  00000000  00000000  000054c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ca5  00000000  00000000  00008540  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000091e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  000093a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  000095b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  0000bc3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  0000d10f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000e3bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000e59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000e897  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f2a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f2 e5       	ldi	r31, 0x52	; 82
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3a       	cpi	r26, 0xA9	; 169
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 20 	call	0x4196	; 0x4196 <main>
      8a:	0c 94 73 29 	jmp	0x52e6	; 0x52e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3c 29 	jmp	0x5278	; 0x5278 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3c 29 	jmp	0x5278	; 0x5278 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 44 29 	jmp	0x5288	; 0x5288 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e8       	ldi	r22, 0x8F	; 143
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 45 29 	jmp	0x528a	; 0x528a <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 37 05 	call	0xa6e	; 0xa6e <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 61 29 	jmp	0x52c2	; 0x52c2 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 4c 29 	jmp	0x5298	; 0x5298 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 68 29 	jmp	0x52d0	; 0x52d0 <__epilogue_restores__+0x20>

00000a6e <__clzsi2>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	7b 01       	movw	r14, r22
     a78:	8c 01       	movw	r16, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	e8 16       	cp	r14, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	f8 06       	cpc	r15, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 07       	cpc	r16, r24
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	18 07       	cpc	r17, r24
     a8a:	88 f4       	brcc	.+34     	; 0xaae <__clzsi2+0x40>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e8 16       	cp	r14, r24
     a90:	f1 04       	cpc	r15, r1
     a92:	01 05       	cpc	r16, r1
     a94:	11 05       	cpc	r17, r1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <__clzsi2+0x36>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <__clzsi2+0x36>
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__clzsi2+0x64>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__clzsi2+0x64>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	e8 16       	cp	r14, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	f8 06       	cpc	r15, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 07       	cpc	r16, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	18 07       	cpc	r17, r24
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x5c>
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__clzsi2+0x64>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e2       	ldi	r18, 0x20	; 32
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	4a 0b       	sbc	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__clzsi2+0x7e>
     ae4:	16 95       	lsr	r17
     ae6:	07 95       	ror	r16
     ae8:	f7 94       	ror	r15
     aea:	e7 94       	ror	r14
     aec:	8a 95       	dec	r24
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__clzsi2+0x76>
     af0:	f7 01       	movw	r30, r14
     af2:	e9 56       	subi	r30, 0x69	; 105
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	28 1b       	sub	r18, r24
     afa:	31 09       	sbc	r19, r1
     afc:	41 09       	sbc	r20, r1
     afe:	51 09       	sbc	r21, r1
     b00:	c9 01       	movw	r24, r18
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <__pack_f>:
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	fc 01       	movw	r30, r24
     b18:	e4 80       	ldd	r14, Z+4	; 0x04
     b1a:	f5 80       	ldd	r15, Z+5	; 0x05
     b1c:	06 81       	ldd	r16, Z+6	; 0x06
     b1e:	17 81       	ldd	r17, Z+7	; 0x07
     b20:	d1 80       	ldd	r13, Z+1	; 0x01
     b22:	80 81       	ld	r24, Z
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	48 f4       	brcc	.+18     	; 0xb3a <__pack_f+0x2e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e1       	ldi	r26, 0x10	; 16
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 2a       	or	r14, r24
     b32:	f9 2a       	or	r15, r25
     b34:	0a 2b       	or	r16, r26
     b36:	1b 2b       	or	r17, r27
     b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__pack_f+0x178>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__pack_f+0x34>
     b3e:	9f c0       	rjmp	.+318    	; 0xc7e <__pack_f+0x172>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	21 f4       	brne	.+8      	; 0xb4c <__pack_f+0x40>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x4a>
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <__pack_f+0x50>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <__pack_f+0x17c>
     b5c:	62 81       	ldd	r22, Z+2	; 0x02
     b5e:	73 81       	ldd	r23, Z+3	; 0x03
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	62 38       	cpi	r22, 0x82	; 130
     b64:	79 07       	cpc	r23, r25
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__pack_f+0x5e>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <__pack_f+0x114>
     b6a:	22 e8       	ldi	r18, 0x82	; 130
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	26 1b       	sub	r18, r22
     b70:	37 0b       	sbc	r19, r23
     b72:	2a 31       	cpi	r18, 0x1A	; 26
     b74:	31 05       	cpc	r19, r1
     b76:	2c f0       	brlt	.+10     	; 0xb82 <__pack_f+0x76>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <__pack_f+0xca>
     b82:	b8 01       	movw	r22, r16
     b84:	a7 01       	movw	r20, r14
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x86>
     b8a:	76 95       	lsr	r23
     b8c:	67 95       	ror	r22
     b8e:	57 95       	ror	r21
     b90:	47 95       	ror	r20
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x7e>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__pack_f+0x9c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	2a 95       	dec	r18
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <__pack_f+0x94>
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8e 21       	and	r24, r14
     bb4:	9f 21       	and	r25, r15
     bb6:	a0 23       	and	r26, r16
     bb8:	b1 23       	and	r27, r17
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	21 f0       	breq	.+8      	; 0xbca <__pack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	9a 01       	movw	r18, r20
     bcc:	ab 01       	movw	r20, r22
     bce:	28 2b       	or	r18, r24
     bd0:	39 2b       	or	r19, r25
     bd2:	4a 2b       	or	r20, r26
     bd4:	5b 2b       	or	r21, r27
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	90 70       	andi	r25, 0x00	; 0
     bde:	a0 70       	andi	r26, 0x00	; 0
     be0:	b0 70       	andi	r27, 0x00	; 0
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	91 05       	cpc	r25, r1
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <__pack_f+0xee>
     bec:	27 ff       	sbrs	r18, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__pack_f+0xf6>
     bf0:	20 5c       	subi	r18, 0xC0	; 192
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0xf6>
     bfa:	21 5c       	subi	r18, 0xC1	; 193
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 30       	cpi	r18, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	3a 07       	cpc	r19, r26
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	4a 07       	cpc	r20, r26
     c10:	a0 e4       	ldi	r26, 0x40	; 64
     c12:	5a 07       	cpc	r21, r26
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__pack_f+0x10e>
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	79 01       	movw	r14, r18
     c1c:	8a 01       	movw	r16, r20
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <__pack_f+0x162>
     c20:	60 38       	cpi	r22, 0x80	; 128
     c22:	71 05       	cpc	r23, r1
     c24:	64 f5       	brge	.+88     	; 0xc7e <__pack_f+0x172>
     c26:	fb 01       	movw	r30, r22
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	d8 01       	movw	r26, r16
     c2e:	c7 01       	movw	r24, r14
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	80 34       	cpi	r24, 0x40	; 64
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__pack_f+0x144>
     c42:	e7 fe       	sbrs	r14, 7
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__pack_f+0x154>
     c46:	80 e4       	ldi	r24, 0x40	; 64
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__pack_f+0x14c>
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0a 1f       	adc	r16, r26
     c5e:	1b 1f       	adc	r17, r27
     c60:	17 ff       	sbrs	r17, 7
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <__pack_f+0x162>
     c64:	16 95       	lsr	r17
     c66:	07 95       	ror	r16
     c68:	f7 94       	ror	r15
     c6a:	e7 94       	ror	r14
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <__pack_f+0x164>
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__pack_f+0x17c>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	ef ef       	ldi	r30, 0xFF	; 255
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	6e 2f       	mov	r22, r30
     c8a:	67 95       	ror	r22
     c8c:	66 27       	eor	r22, r22
     c8e:	67 95       	ror	r22
     c90:	90 2f       	mov	r25, r16
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	d7 94       	ror	r13
     c96:	dd 24       	eor	r13, r13
     c98:	d7 94       	ror	r13
     c9a:	8e 2f       	mov	r24, r30
     c9c:	86 95       	lsr	r24
     c9e:	49 2f       	mov	r20, r25
     ca0:	46 2b       	or	r20, r22
     ca2:	58 2f       	mov	r21, r24
     ca4:	5d 29       	or	r21, r13
     ca6:	b7 01       	movw	r22, r14
     ca8:	ca 01       	movw	r24, r20
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <__unpack_f>:
     cb6:	fc 01       	movw	r30, r24
     cb8:	db 01       	movw	r26, r22
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	62 2f       	mov	r22, r18
     cc2:	6f 77       	andi	r22, 0x7F	; 127
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	22 1f       	adc	r18, r18
     cc8:	22 27       	eor	r18, r18
     cca:	22 1f       	adc	r18, r18
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	89 2f       	mov	r24, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	82 2b       	or	r24, r18
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	99 1f       	adc	r25, r25
     cda:	99 27       	eor	r25, r25
     cdc:	99 1f       	adc	r25, r25
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	a9 f5       	brne	.+106    	; 0xd54 <__unpack_f+0x9e>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__unpack_f+0x42>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <__unpack_f+0xb0>
     cf8:	82 e8       	ldi	r24, 0x82	; 130
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 93       	st	X, r25
     d00:	8e 93       	st	-X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	44 1f       	adc	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	6a 95       	dec	r22
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__unpack_f+0x54>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 93       	st	X, r24
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__unpack_f+0x80>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	8d 91       	ld	r24, X+
     d28:	9c 91       	ld	r25, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	20 30       	cpi	r18, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	38 07       	cpc	r19, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	48 07       	cpc	r20, r24
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	58 07       	cpc	r21, r24
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__unpack_f+0x66>
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	2d 93       	st	X+, r18
     d4a:	3d 93       	st	X+, r19
     d4c:	4d 93       	st	X+, r20
     d4e:	5c 93       	st	X, r21
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	08 95       	ret
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	31 05       	cpc	r19, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <__unpack_f+0xc2>
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	19 f4       	brne	.+6      	; 0xd6a <__unpack_f+0xb4>
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	08 95       	ret
     d6a:	64 ff       	sbrs	r22, 4
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__unpack_f+0xbe>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__unpack_f+0xe2>
     d74:	1c 92       	st	X, r1
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <__unpack_f+0xe2>
     d78:	2f 57       	subi	r18, 0x7F	; 127
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	d1 f7       	brne	.-12     	; 0xd8a <__unpack_f+0xd4>
     d96:	70 64       	ori	r23, 0x40	; 64
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	4d 93       	st	X+, r20
     d9c:	5d 93       	st	X+, r21
     d9e:	6d 93       	st	X+, r22
     da0:	7c 93       	st	X, r23
     da2:	17 97       	sbiw	r26, 0x07	; 7
     da4:	08 95       	ret

00000da6 <__fpcmp_parts_f>:
     da6:	1f 93       	push	r17
     da8:	dc 01       	movw	r26, r24
     daa:	fb 01       	movw	r30, r22
     dac:	9c 91       	ld	r25, X
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <__fpcmp_parts_f+0xe>
     db2:	47 c0       	rjmp	.+142    	; 0xe42 <__fpcmp_parts_f+0x9c>
     db4:	80 81       	ld	r24, Z
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__fpcmp_parts_f+0x16>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <__fpcmp_parts_f+0x9c>
     dbc:	94 30       	cpi	r25, 0x04	; 4
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <__fpcmp_parts_f+0x2e>
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	1c 91       	ld	r17, X
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	99 f5       	brne	.+102    	; 0xe2e <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	61 1b       	sub	r22, r17
     dd0:	71 09       	sbc	r23, r1
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <__fpcmp_parts_f+0xac>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__fpcmp_parts_f+0x3a>
     dd8:	92 30       	cpi	r25, 0x02	; 2
     dda:	31 f4       	brne	.+12     	; 0xde8 <__fpcmp_parts_f+0x42>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	b9 f1       	breq	.+110    	; 0xe4e <__fpcmp_parts_f+0xa8>
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	89 f1       	breq	.+98     	; 0xe48 <__fpcmp_parts_f+0xa2>
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__fpcmp_parts_f+0x9c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 91       	ld	r17, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	f1 f0       	breq	.+60     	; 0xe2e <__fpcmp_parts_f+0x88>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	18 17       	cp	r17, r24
     df6:	d9 f4       	brne	.+54     	; 0xe2e <__fpcmp_parts_f+0x88>
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	94 f0       	brlt	.+36     	; 0xe2e <__fpcmp_parts_f+0x88>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	bc f0       	brlt	.+46     	; 0xe3e <__fpcmp_parts_f+0x98>
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	24 81       	ldd	r18, Z+4	; 0x04
     e1e:	35 81       	ldd	r19, Z+5	; 0x05
     e20:	46 81       	ldd	r20, Z+6	; 0x06
     e22:	57 81       	ldd	r21, Z+7	; 0x07
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	4a 07       	cpc	r20, r26
     e2a:	5b 07       	cpc	r21, r27
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <__fpcmp_parts_f+0x8e>
     e2e:	11 23       	and	r17, r17
     e30:	41 f0       	breq	.+16     	; 0xe42 <__fpcmp_parts_f+0x9c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <__fpcmp_parts_f+0xa2>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	a4 07       	cpc	r26, r20
     e3a:	b5 07       	cpc	r27, r21
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fpcmp_parts_f+0xa8>
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <__fpcmp_parts_f+0xa2>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__fpcmp_parts_f+0xac>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <__fpcmp_parts_f+0xac>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <SetPinValue>:
#include"LIB/set_math.h"
#include"DIO.h"
#include"DIO_Registers.h"

void SetPinValue(u8 PinId,u8 PortId,u8 PinValue)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	27 97       	sbiw	r28, 0x07	; 7
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	6a 83       	std	Y+2, r22	; 0x02
     e70:	4b 83       	std	Y+3, r20	; 0x03
	if(PinId <= PIN7 && PortId <= PORTD)
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	88 30       	cpi	r24, 0x08	; 8
     e76:	08 f0       	brcs	.+2      	; 0xe7a <SetPinValue+0x22>
     e78:	ee c0       	rjmp	.+476    	; 0x1056 <SetPinValue+0x1fe>
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	84 30       	cpi	r24, 0x04	; 4
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <SetPinValue+0x2a>
     e80:	ea c0       	rjmp	.+468    	; 0x1056 <SetPinValue+0x1fe>
	{
		if(PinValue == HIGH)
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	09 f0       	breq	.+2      	; 0xe8a <SetPinValue+0x32>
     e88:	6f c0       	rjmp	.+222    	; 0xf68 <SetPinValue+0x110>
		{
			switch(PortId)
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	3f 83       	std	Y+7, r19	; 0x07
     e92:	2e 83       	std	Y+6, r18	; 0x06
     e94:	8e 81       	ldd	r24, Y+6	; 0x06
     e96:	9f 81       	ldd	r25, Y+7	; 0x07
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	91 05       	cpc	r25, r1
     e9c:	49 f1       	breq	.+82     	; 0xef0 <SetPinValue+0x98>
     e9e:	2e 81       	ldd	r18, Y+6	; 0x06
     ea0:	3f 81       	ldd	r19, Y+7	; 0x07
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <SetPinValue+0x5a>
     ea8:	8e 81       	ldd	r24, Y+6	; 0x06
     eaa:	9f 81       	ldd	r25, Y+7	; 0x07
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	61 f0       	breq	.+24     	; 0xec8 <SetPinValue+0x70>
     eb0:	d2 c0       	rjmp	.+420    	; 0x1056 <SetPinValue+0x1fe>
     eb2:	2e 81       	ldd	r18, Y+6	; 0x06
     eb4:	3f 81       	ldd	r19, Y+7	; 0x07
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	71 f1       	breq	.+92     	; 0xf18 <SetPinValue+0xc0>
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	9f 81       	ldd	r25, Y+7	; 0x07
     ec0:	83 30       	cpi	r24, 0x03	; 3
     ec2:	91 05       	cpc	r25, r1
     ec4:	e9 f1       	breq	.+122    	; 0xf40 <SetPinValue+0xe8>
     ec6:	c7 c0       	rjmp	.+398    	; 0x1056 <SetPinValue+0x1fe>
			{
			case PORTA:	SET_BIT(PORTA_REG,PinId);break;
     ec8:	ab e3       	ldi	r26, 0x3B	; 59
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	eb e3       	ldi	r30, 0x3B	; 59
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <SetPinValue+0x8e>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <SetPinValue+0x8a>
     eea:	84 2b       	or	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	b3 c0       	rjmp	.+358    	; 0x1056 <SetPinValue+0x1fe>
			case PORTB:	SET_BIT(PORTB_REG,PinId);break;
     ef0:	a8 e3       	ldi	r26, 0x38	; 56
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e8 e3       	ldi	r30, 0x38	; 56
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <SetPinValue+0xb6>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <SetPinValue+0xb2>
     f12:	84 2b       	or	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	9f c0       	rjmp	.+318    	; 0x1056 <SetPinValue+0x1fe>
			case PORTC:	SET_BIT(PORTC_REG,PinId);break;
     f18:	a5 e3       	ldi	r26, 0x35	; 53
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e5 e3       	ldi	r30, 0x35	; 53
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <SetPinValue+0xde>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <SetPinValue+0xda>
     f3a:	84 2b       	or	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	8b c0       	rjmp	.+278    	; 0x1056 <SetPinValue+0x1fe>
			case PORTD:	SET_BIT(PORTD_REG,PinId);break;
     f40:	a2 e3       	ldi	r26, 0x32	; 50
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e2 e3       	ldi	r30, 0x32	; 50
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <SetPinValue+0x106>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <SetPinValue+0x102>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	77 c0       	rjmp	.+238    	; 0x1056 <SetPinValue+0x1fe>
			}
		}
		else if(PinValue == LOW)
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	88 23       	and	r24, r24
     f6c:	09 f0       	breq	.+2      	; 0xf70 <SetPinValue+0x118>
     f6e:	73 c0       	rjmp	.+230    	; 0x1056 <SetPinValue+0x1fe>
		{
			switch(PortId)
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	3d 83       	std	Y+5, r19	; 0x05
     f78:	2c 83       	std	Y+4, r18	; 0x04
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	91 05       	cpc	r25, r1
     f82:	59 f1       	breq	.+86     	; 0xfda <SetPinValue+0x182>
     f84:	2c 81       	ldd	r18, Y+4	; 0x04
     f86:	3d 81       	ldd	r19, Y+5	; 0x05
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	2c f4       	brge	.+10     	; 0xf98 <SetPinValue+0x140>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	69 f0       	breq	.+26     	; 0xfb0 <SetPinValue+0x158>
     f96:	5f c0       	rjmp	.+190    	; 0x1056 <SetPinValue+0x1fe>
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	89 f1       	breq	.+98     	; 0x1004 <SetPinValue+0x1ac>
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	91 05       	cpc	r25, r1
     faa:	09 f4       	brne	.+2      	; 0xfae <SetPinValue+0x156>
     fac:	40 c0       	rjmp	.+128    	; 0x102e <SetPinValue+0x1d6>
     fae:	53 c0       	rjmp	.+166    	; 0x1056 <SetPinValue+0x1fe>
			{
			case PORTA:	CLR_BIT(PORTA_REG,PinId);break;
     fb0:	ab e3       	ldi	r26, 0x3B	; 59
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	eb e3       	ldi	r30, 0x3B	; 59
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <SetPinValue+0x176>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <SetPinValue+0x172>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	3e c0       	rjmp	.+124    	; 0x1056 <SetPinValue+0x1fe>
			case PORTB:	CLR_BIT(PORTB_REG,PinId);break;
     fda:	a8 e3       	ldi	r26, 0x38	; 56
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e8 e3       	ldi	r30, 0x38	; 56
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <SetPinValue+0x1a0>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <SetPinValue+0x19c>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	29 c0       	rjmp	.+82     	; 0x1056 <SetPinValue+0x1fe>
			case PORTC:	CLR_BIT(PORTC_REG,PinId);break;
    1004:	a5 e3       	ldi	r26, 0x35	; 53
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e5 e3       	ldi	r30, 0x35	; 53
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <SetPinValue+0x1ca>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <SetPinValue+0x1c6>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	14 c0       	rjmp	.+40     	; 0x1056 <SetPinValue+0x1fe>
			case PORTD:	CLR_BIT(PORTD_REG,PinId);break;
    102e:	a2 e3       	ldi	r26, 0x32	; 50
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e2 e3       	ldi	r30, 0x32	; 50
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <SetPinValue+0x1f4>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <SetPinValue+0x1f0>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24

	else
	{
		//report error massage
	}
}
    1056:	27 96       	adiw	r28, 0x07	; 7
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <SetPinMode>:

void SetPinMode(u8 PinId,u8 PortId,u8 PinMode)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	27 97       	sbiw	r28, 0x07	; 7
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	6a 83       	std	Y+2, r22	; 0x02
    1080:	4b 83       	std	Y+3, r20	; 0x03
	if(PinId <= PIN7 && PortId <= PORTD)
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	88 30       	cpi	r24, 0x08	; 8
    1086:	08 f0       	brcs	.+2      	; 0x108a <SetPinMode+0x22>
    1088:	ee c0       	rjmp	.+476    	; 0x1266 <SetPinMode+0x1fe>
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	08 f0       	brcs	.+2      	; 0x1092 <SetPinMode+0x2a>
    1090:	ea c0       	rjmp	.+468    	; 0x1266 <SetPinMode+0x1fe>
	{
		if(PinMode == OUTPUT)
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	09 f0       	breq	.+2      	; 0x109a <SetPinMode+0x32>
    1098:	6f c0       	rjmp	.+222    	; 0x1178 <SetPinMode+0x110>
		{
			switch(PortId)
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	3f 83       	std	Y+7, r19	; 0x07
    10a2:	2e 83       	std	Y+6, r18	; 0x06
    10a4:	8e 81       	ldd	r24, Y+6	; 0x06
    10a6:	9f 81       	ldd	r25, Y+7	; 0x07
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	91 05       	cpc	r25, r1
    10ac:	49 f1       	breq	.+82     	; 0x1100 <SetPinMode+0x98>
    10ae:	2e 81       	ldd	r18, Y+6	; 0x06
    10b0:	3f 81       	ldd	r19, Y+7	; 0x07
    10b2:	22 30       	cpi	r18, 0x02	; 2
    10b4:	31 05       	cpc	r19, r1
    10b6:	2c f4       	brge	.+10     	; 0x10c2 <SetPinMode+0x5a>
    10b8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ba:	9f 81       	ldd	r25, Y+7	; 0x07
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	61 f0       	breq	.+24     	; 0x10d8 <SetPinMode+0x70>
    10c0:	d2 c0       	rjmp	.+420    	; 0x1266 <SetPinMode+0x1fe>
    10c2:	2e 81       	ldd	r18, Y+6	; 0x06
    10c4:	3f 81       	ldd	r19, Y+7	; 0x07
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	71 f1       	breq	.+92     	; 0x1128 <SetPinMode+0xc0>
    10cc:	8e 81       	ldd	r24, Y+6	; 0x06
    10ce:	9f 81       	ldd	r25, Y+7	; 0x07
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	91 05       	cpc	r25, r1
    10d4:	e9 f1       	breq	.+122    	; 0x1150 <SetPinMode+0xe8>
    10d6:	c7 c0       	rjmp	.+398    	; 0x1266 <SetPinMode+0x1fe>
			{
			case PORTA:	SET_BIT(DDRA_REG,PinId);break;
    10d8:	aa e3       	ldi	r26, 0x3A	; 58
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ea e3       	ldi	r30, 0x3A	; 58
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <SetPinMode+0x8e>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <SetPinMode+0x8a>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	b3 c0       	rjmp	.+358    	; 0x1266 <SetPinMode+0x1fe>
			case PORTB:	SET_BIT(DDRB_REG,PinId);break;
    1100:	a7 e3       	ldi	r26, 0x37	; 55
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e7 e3       	ldi	r30, 0x37	; 55
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <SetPinMode+0xb6>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <SetPinMode+0xb2>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	9f c0       	rjmp	.+318    	; 0x1266 <SetPinMode+0x1fe>
			case PORTC:	SET_BIT(DDRC_REG,PinId);break;
    1128:	a4 e3       	ldi	r26, 0x34	; 52
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e4 e3       	ldi	r30, 0x34	; 52
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <SetPinMode+0xde>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <SetPinMode+0xda>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	8b c0       	rjmp	.+278    	; 0x1266 <SetPinMode+0x1fe>
			case PORTD:	SET_BIT(DDRD_REG,PinId);break;
    1150:	a1 e3       	ldi	r26, 0x31	; 49
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e1 e3       	ldi	r30, 0x31	; 49
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <SetPinMode+0x106>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <SetPinMode+0x102>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	77 c0       	rjmp	.+238    	; 0x1266 <SetPinMode+0x1fe>
			}
		}
		else if(PinMode == INPUT)
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 23       	and	r24, r24
    117c:	09 f0       	breq	.+2      	; 0x1180 <SetPinMode+0x118>
    117e:	73 c0       	rjmp	.+230    	; 0x1266 <SetPinMode+0x1fe>
		{
			switch(PortId)
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	3d 83       	std	Y+5, r19	; 0x05
    1188:	2c 83       	std	Y+4, r18	; 0x04
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	91 05       	cpc	r25, r1
    1192:	59 f1       	breq	.+86     	; 0x11ea <SetPinMode+0x182>
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	2c f4       	brge	.+10     	; 0x11a8 <SetPinMode+0x140>
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	9d 81       	ldd	r25, Y+5	; 0x05
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	69 f0       	breq	.+26     	; 0x11c0 <SetPinMode+0x158>
    11a6:	5f c0       	rjmp	.+190    	; 0x1266 <SetPinMode+0x1fe>
    11a8:	2c 81       	ldd	r18, Y+4	; 0x04
    11aa:	3d 81       	ldd	r19, Y+5	; 0x05
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	89 f1       	breq	.+98     	; 0x1214 <SetPinMode+0x1ac>
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	9d 81       	ldd	r25, Y+5	; 0x05
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	91 05       	cpc	r25, r1
    11ba:	09 f4       	brne	.+2      	; 0x11be <SetPinMode+0x156>
    11bc:	40 c0       	rjmp	.+128    	; 0x123e <SetPinMode+0x1d6>
    11be:	53 c0       	rjmp	.+166    	; 0x1266 <SetPinMode+0x1fe>
			{
			case PORTA:	CLR_BIT(DDRA_REG,PinId);break;
    11c0:	aa e3       	ldi	r26, 0x3A	; 58
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ea e3       	ldi	r30, 0x3A	; 58
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <SetPinMode+0x176>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <SetPinMode+0x172>
    11e2:	80 95       	com	r24
    11e4:	84 23       	and	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	3e c0       	rjmp	.+124    	; 0x1266 <SetPinMode+0x1fe>
			case PORTB:	CLR_BIT(DDRB_REG,PinId);break;
    11ea:	a7 e3       	ldi	r26, 0x37	; 55
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e7 e3       	ldi	r30, 0x37	; 55
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <SetPinMode+0x1a0>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <SetPinMode+0x19c>
    120c:	80 95       	com	r24
    120e:	84 23       	and	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	29 c0       	rjmp	.+82     	; 0x1266 <SetPinMode+0x1fe>
			case PORTC:	CLR_BIT(DDRC_REG,PinId);break;
    1214:	a4 e3       	ldi	r26, 0x34	; 52
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e4 e3       	ldi	r30, 0x34	; 52
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <SetPinMode+0x1ca>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <SetPinMode+0x1c6>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	14 c0       	rjmp	.+40     	; 0x1266 <SetPinMode+0x1fe>
			case PORTD:	CLR_BIT(DDRD_REG,PinId);break;
    123e:	a1 e3       	ldi	r26, 0x31	; 49
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e1 e3       	ldi	r30, 0x31	; 49
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <SetPinMode+0x1f4>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <SetPinMode+0x1f0>
    1260:	80 95       	com	r24
    1262:	84 23       	and	r24, r20
    1264:	8c 93       	st	X, r24
	}
		else
		{
			//report error massage
		}
}
    1266:	27 96       	adiw	r28, 0x07	; 7
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <SetPortValue>:


void SetPortValue(u8 PortId,u8 PortValue)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	28 97       	sbiw	r28, 0x08	; 8
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId <= PORTD)
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	84 30       	cpi	r24, 0x04	; 4
    1294:	08 f0       	brcs	.+2      	; 0x1298 <SetPortValue+0x20>
    1296:	9a c0       	rjmp	.+308    	; 0x13cc <SetPortValue+0x154>
	{
		if(PortValue == HIGH)
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	99 f5       	brne	.+102    	; 0x1304 <SetPortValue+0x8c>
		{
			switch(PortId)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	38 87       	std	Y+8, r19	; 0x08
    12a6:	2f 83       	std	Y+7, r18	; 0x07
    12a8:	8f 81       	ldd	r24, Y+7	; 0x07
    12aa:	98 85       	ldd	r25, Y+8	; 0x08
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	d1 f0       	breq	.+52     	; 0x12e6 <SetPortValue+0x6e>
    12b2:	2f 81       	ldd	r18, Y+7	; 0x07
    12b4:	38 85       	ldd	r19, Y+8	; 0x08
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <SetPortValue+0x4e>
    12bc:	8f 81       	ldd	r24, Y+7	; 0x07
    12be:	98 85       	ldd	r25, Y+8	; 0x08
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	61 f0       	breq	.+24     	; 0x12dc <SetPortValue+0x64>
    12c4:	83 c0       	rjmp	.+262    	; 0x13cc <SetPortValue+0x154>
    12c6:	2f 81       	ldd	r18, Y+7	; 0x07
    12c8:	38 85       	ldd	r19, Y+8	; 0x08
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <SetPortValue+0x78>
    12d0:	8f 81       	ldd	r24, Y+7	; 0x07
    12d2:	98 85       	ldd	r25, Y+8	; 0x08
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	81 f0       	breq	.+32     	; 0x12fa <SetPortValue+0x82>
    12da:	78 c0       	rjmp	.+240    	; 0x13cc <SetPortValue+0x154>
			{
			case PORTA:	SET_REG(PORTA_REG);break;
    12dc:	eb e3       	ldi	r30, 0x3B	; 59
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	80 83       	st	Z, r24
    12e4:	73 c0       	rjmp	.+230    	; 0x13cc <SetPortValue+0x154>
			case PORTB:	SET_REG(PORTB_REG);break;
    12e6:	e8 e3       	ldi	r30, 0x38	; 56
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	80 83       	st	Z, r24
    12ee:	6e c0       	rjmp	.+220    	; 0x13cc <SetPortValue+0x154>
			case PORTC:	SET_REG(PORTC_REG);break;
    12f0:	e5 e3       	ldi	r30, 0x35	; 53
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	80 83       	st	Z, r24
    12f8:	69 c0       	rjmp	.+210    	; 0x13cc <SetPortValue+0x154>
			case PORTD: SET_REG(PORTD_REG);break;
    12fa:	e2 e3       	ldi	r30, 0x32	; 50
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	80 83       	st	Z, r24
    1302:	64 c0       	rjmp	.+200    	; 0x13cc <SetPortValue+0x154>
			}
		}
		else if(PortValue == LOW)
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	88 23       	and	r24, r24
    1308:	79 f5       	brne	.+94     	; 0x1368 <SetPortValue+0xf0>
		{
			switch(PortId)
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	3e 83       	std	Y+6, r19	; 0x06
    1312:	2d 83       	std	Y+5, r18	; 0x05
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	c9 f0       	breq	.+50     	; 0x1350 <SetPortValue+0xd8>
    131e:	2d 81       	ldd	r18, Y+5	; 0x05
    1320:	3e 81       	ldd	r19, Y+6	; 0x06
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	2c f4       	brge	.+10     	; 0x1332 <SetPortValue+0xba>
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	61 f0       	breq	.+24     	; 0x1348 <SetPortValue+0xd0>
    1330:	4d c0       	rjmp	.+154    	; 0x13cc <SetPortValue+0x154>
    1332:	2d 81       	ldd	r18, Y+5	; 0x05
    1334:	3e 81       	ldd	r19, Y+6	; 0x06
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	71 f0       	breq	.+28     	; 0x1358 <SetPortValue+0xe0>
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	91 05       	cpc	r25, r1
    1344:	69 f0       	breq	.+26     	; 0x1360 <SetPortValue+0xe8>
    1346:	42 c0       	rjmp	.+132    	; 0x13cc <SetPortValue+0x154>
			{
			case PORTA:	CLR_REG(PORTA_REG);break;
    1348:	eb e3       	ldi	r30, 0x3B	; 59
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	10 82       	st	Z, r1
    134e:	3e c0       	rjmp	.+124    	; 0x13cc <SetPortValue+0x154>
			case PORTB:	CLR_REG(PORTB_REG);break;
    1350:	e8 e3       	ldi	r30, 0x38	; 56
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	10 82       	st	Z, r1
    1356:	3a c0       	rjmp	.+116    	; 0x13cc <SetPortValue+0x154>
			case PORTC:	CLR_REG(PORTC_REG);break;
    1358:	e5 e3       	ldi	r30, 0x35	; 53
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	10 82       	st	Z, r1
    135e:	36 c0       	rjmp	.+108    	; 0x13cc <SetPortValue+0x154>
			case PORTD: CLR_REG(PORTD_REG);break;
    1360:	e2 e3       	ldi	r30, 0x32	; 50
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	10 82       	st	Z, r1
    1366:	32 c0       	rjmp	.+100    	; 0x13cc <SetPortValue+0x154>
			}
		}
		else
		{
			switch(PortId)
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3c 83       	std	Y+4, r19	; 0x04
    1370:	2b 83       	std	Y+3, r18	; 0x03
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	91 05       	cpc	r25, r1
    137a:	d1 f0       	breq	.+52     	; 0x13b0 <SetPortValue+0x138>
    137c:	2b 81       	ldd	r18, Y+3	; 0x03
    137e:	3c 81       	ldd	r19, Y+4	; 0x04
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	2c f4       	brge	.+10     	; 0x1390 <SetPortValue+0x118>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	61 f0       	breq	.+24     	; 0x13a6 <SetPortValue+0x12e>
    138e:	1e c0       	rjmp	.+60     	; 0x13cc <SetPortValue+0x154>
    1390:	2b 81       	ldd	r18, Y+3	; 0x03
    1392:	3c 81       	ldd	r19, Y+4	; 0x04
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	81 f0       	breq	.+32     	; 0x13ba <SetPortValue+0x142>
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	83 30       	cpi	r24, 0x03	; 3
    13a0:	91 05       	cpc	r25, r1
    13a2:	81 f0       	breq	.+32     	; 0x13c4 <SetPortValue+0x14c>
    13a4:	13 c0       	rjmp	.+38     	; 0x13cc <SetPortValue+0x154>
			{
				case PORTA:	ASSIGN_REG(PORTA_REG,PortValue);break;
    13a6:	eb e3       	ldi	r30, 0x3B	; 59
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	80 83       	st	Z, r24
    13ae:	0e c0       	rjmp	.+28     	; 0x13cc <SetPortValue+0x154>
				case PORTB:	ASSIGN_REG(PORTB_REG,PortValue);break;
    13b0:	e8 e3       	ldi	r30, 0x38	; 56
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	80 83       	st	Z, r24
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <SetPortValue+0x154>
				case PORTC:	ASSIGN_REG(PORTC_REG,PortValue);break;
    13ba:	e5 e3       	ldi	r30, 0x35	; 53
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <SetPortValue+0x154>
				case PORTD: ASSIGN_REG(PORTD_REG,PortValue);break;
    13c4:	e2 e3       	ldi	r30, 0x32	; 50
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	80 83       	st	Z, r24
	}
	else
	{
		//report error massage
	}
}
    13cc:	28 96       	adiw	r28, 0x08	; 8
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <SetPortMode>:

void SetPortMode(u8 PortId,u8 PortMode)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	28 97       	sbiw	r28, 0x08	; 8
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId <= PORTD)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	84 30       	cpi	r24, 0x04	; 4
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <SetPortMode+0x20>
    13fc:	9a c0       	rjmp	.+308    	; 0x1532 <SetPortMode+0x154>
	{
		if(PortMode == OUTPUT)
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	99 f5       	brne	.+102    	; 0x146a <SetPortMode+0x8c>
		{
			switch(PortId)
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	38 87       	std	Y+8, r19	; 0x08
    140c:	2f 83       	std	Y+7, r18	; 0x07
    140e:	8f 81       	ldd	r24, Y+7	; 0x07
    1410:	98 85       	ldd	r25, Y+8	; 0x08
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	91 05       	cpc	r25, r1
    1416:	d1 f0       	breq	.+52     	; 0x144c <SetPortMode+0x6e>
    1418:	2f 81       	ldd	r18, Y+7	; 0x07
    141a:	38 85       	ldd	r19, Y+8	; 0x08
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	31 05       	cpc	r19, r1
    1420:	2c f4       	brge	.+10     	; 0x142c <SetPortMode+0x4e>
    1422:	8f 81       	ldd	r24, Y+7	; 0x07
    1424:	98 85       	ldd	r25, Y+8	; 0x08
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	61 f0       	breq	.+24     	; 0x1442 <SetPortMode+0x64>
    142a:	83 c0       	rjmp	.+262    	; 0x1532 <SetPortMode+0x154>
    142c:	2f 81       	ldd	r18, Y+7	; 0x07
    142e:	38 85       	ldd	r19, Y+8	; 0x08
    1430:	22 30       	cpi	r18, 0x02	; 2
    1432:	31 05       	cpc	r19, r1
    1434:	81 f0       	breq	.+32     	; 0x1456 <SetPortMode+0x78>
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	91 05       	cpc	r25, r1
    143e:	81 f0       	breq	.+32     	; 0x1460 <SetPortMode+0x82>
    1440:	78 c0       	rjmp	.+240    	; 0x1532 <SetPortMode+0x154>
			{
			case PORTA:	SET_REG(DDRA_REG);break;
    1442:	ea e3       	ldi	r30, 0x3A	; 58
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	80 83       	st	Z, r24
    144a:	73 c0       	rjmp	.+230    	; 0x1532 <SetPortMode+0x154>
			case PORTB:	SET_REG(DDRB_REG);break;
    144c:	e7 e3       	ldi	r30, 0x37	; 55
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	80 83       	st	Z, r24
    1454:	6e c0       	rjmp	.+220    	; 0x1532 <SetPortMode+0x154>
			case PORTC:	SET_REG(DDRC_REG);break;
    1456:	e4 e3       	ldi	r30, 0x34	; 52
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	80 83       	st	Z, r24
    145e:	69 c0       	rjmp	.+210    	; 0x1532 <SetPortMode+0x154>
			case PORTD: SET_REG(DDRD_REG);break;
    1460:	e1 e3       	ldi	r30, 0x31	; 49
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	80 83       	st	Z, r24
    1468:	64 c0       	rjmp	.+200    	; 0x1532 <SetPortMode+0x154>
			}
		}
		else if(PortMode == INPUT)
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	88 23       	and	r24, r24
    146e:	79 f5       	brne	.+94     	; 0x14ce <SetPortMode+0xf0>
		{
			switch(PortId)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3e 83       	std	Y+6, r19	; 0x06
    1478:	2d 83       	std	Y+5, r18	; 0x05
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	c9 f0       	breq	.+50     	; 0x14b6 <SetPortMode+0xd8>
    1484:	2d 81       	ldd	r18, Y+5	; 0x05
    1486:	3e 81       	ldd	r19, Y+6	; 0x06
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	2c f4       	brge	.+10     	; 0x1498 <SetPortMode+0xba>
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	61 f0       	breq	.+24     	; 0x14ae <SetPortMode+0xd0>
    1496:	4d c0       	rjmp	.+154    	; 0x1532 <SetPortMode+0x154>
    1498:	2d 81       	ldd	r18, Y+5	; 0x05
    149a:	3e 81       	ldd	r19, Y+6	; 0x06
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	71 f0       	breq	.+28     	; 0x14be <SetPortMode+0xe0>
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	69 f0       	breq	.+26     	; 0x14c6 <SetPortMode+0xe8>
    14ac:	42 c0       	rjmp	.+132    	; 0x1532 <SetPortMode+0x154>
			{
			case PORTA:	CLR_REG(DDRA_REG);break;
    14ae:	ea e3       	ldi	r30, 0x3A	; 58
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	10 82       	st	Z, r1
    14b4:	3e c0       	rjmp	.+124    	; 0x1532 <SetPortMode+0x154>
			case PORTB:	CLR_REG(DDRB_REG);break;
    14b6:	e7 e3       	ldi	r30, 0x37	; 55
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	10 82       	st	Z, r1
    14bc:	3a c0       	rjmp	.+116    	; 0x1532 <SetPortMode+0x154>
			case PORTC:	CLR_REG(DDRC_REG);break;
    14be:	e4 e3       	ldi	r30, 0x34	; 52
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	10 82       	st	Z, r1
    14c4:	36 c0       	rjmp	.+108    	; 0x1532 <SetPortMode+0x154>
			case PORTD: CLR_REG(DDRD_REG);break;
    14c6:	e1 e3       	ldi	r30, 0x31	; 49
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	10 82       	st	Z, r1
    14cc:	32 c0       	rjmp	.+100    	; 0x1532 <SetPortMode+0x154>
			}
		}
		else
		{
			switch(PortId)
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	3c 83       	std	Y+4, r19	; 0x04
    14d6:	2b 83       	std	Y+3, r18	; 0x03
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	91 05       	cpc	r25, r1
    14e0:	d1 f0       	breq	.+52     	; 0x1516 <SetPortMode+0x138>
    14e2:	2b 81       	ldd	r18, Y+3	; 0x03
    14e4:	3c 81       	ldd	r19, Y+4	; 0x04
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <SetPortMode+0x118>
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	61 f0       	breq	.+24     	; 0x150c <SetPortMode+0x12e>
    14f4:	1e c0       	rjmp	.+60     	; 0x1532 <SetPortMode+0x154>
    14f6:	2b 81       	ldd	r18, Y+3	; 0x03
    14f8:	3c 81       	ldd	r19, Y+4	; 0x04
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	81 f0       	breq	.+32     	; 0x1520 <SetPortMode+0x142>
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	83 30       	cpi	r24, 0x03	; 3
    1506:	91 05       	cpc	r25, r1
    1508:	81 f0       	breq	.+32     	; 0x152a <SetPortMode+0x14c>
    150a:	13 c0       	rjmp	.+38     	; 0x1532 <SetPortMode+0x154>
			{
				case PORTA:	ASSIGN_REG(DDRA_REG,PortMode);break;
    150c:	ea e3       	ldi	r30, 0x3A	; 58
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	80 83       	st	Z, r24
    1514:	0e c0       	rjmp	.+28     	; 0x1532 <SetPortMode+0x154>
				case PORTB:	ASSIGN_REG(DDRA_REG,PortMode);break;
    1516:	ea e3       	ldi	r30, 0x3A	; 58
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	80 83       	st	Z, r24
    151e:	09 c0       	rjmp	.+18     	; 0x1532 <SetPortMode+0x154>
				case PORTC:	ASSIGN_REG(DDRA_REG,PortMode);break;
    1520:	ea e3       	ldi	r30, 0x3A	; 58
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	80 83       	st	Z, r24
    1528:	04 c0       	rjmp	.+8      	; 0x1532 <SetPortMode+0x154>
				case PORTD: ASSIGN_REG(DDRA_REG,PortMode);break;
    152a:	ea e3       	ldi	r30, 0x3A	; 58
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	80 83       	st	Z, r24
	}
	else
	{
		//report error massage
	}
}
    1532:	28 96       	adiw	r28, 0x08	; 8
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <GetPinValue>:

u8 GetPinValue(u8 PinId,u8 PortId)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <GetPinValue+0x6>
    154a:	00 d0       	rcall	.+0      	; 0x154c <GetPinValue+0x8>
    154c:	0f 92       	push	r0
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	8a 83       	std	Y+2, r24	; 0x02
    1554:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	if(PinId <= PIN7 && PortId <= PORTD)
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	88 30       	cpi	r24, 0x08	; 8
    155a:	08 f0       	brcs	.+2      	; 0x155e <GetPinValue+0x1a>
    155c:	6b c0       	rjmp	.+214    	; 0x1634 <GetPinValue+0xf0>
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	84 30       	cpi	r24, 0x04	; 4
    1562:	08 f0       	brcs	.+2      	; 0x1566 <GetPinValue+0x22>
    1564:	67 c0       	rjmp	.+206    	; 0x1634 <GetPinValue+0xf0>
	{
		switch(PortId)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3d 83       	std	Y+5, r19	; 0x05
    156e:	2c 83       	std	Y+4, r18	; 0x04
    1570:	4c 81       	ldd	r20, Y+4	; 0x04
    1572:	5d 81       	ldd	r21, Y+5	; 0x05
    1574:	41 30       	cpi	r20, 0x01	; 1
    1576:	51 05       	cpc	r21, r1
    1578:	41 f1       	breq	.+80     	; 0x15ca <GetPinValue+0x86>
    157a:	8c 81       	ldd	r24, Y+4	; 0x04
    157c:	9d 81       	ldd	r25, Y+5	; 0x05
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	91 05       	cpc	r25, r1
    1582:	34 f4       	brge	.+12     	; 0x1590 <GetPinValue+0x4c>
    1584:	2c 81       	ldd	r18, Y+4	; 0x04
    1586:	3d 81       	ldd	r19, Y+5	; 0x05
    1588:	21 15       	cp	r18, r1
    158a:	31 05       	cpc	r19, r1
    158c:	61 f0       	breq	.+24     	; 0x15a6 <GetPinValue+0x62>
    158e:	52 c0       	rjmp	.+164    	; 0x1634 <GetPinValue+0xf0>
    1590:	4c 81       	ldd	r20, Y+4	; 0x04
    1592:	5d 81       	ldd	r21, Y+5	; 0x05
    1594:	42 30       	cpi	r20, 0x02	; 2
    1596:	51 05       	cpc	r21, r1
    1598:	51 f1       	breq	.+84     	; 0x15ee <GetPinValue+0xaa>
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	83 30       	cpi	r24, 0x03	; 3
    15a0:	91 05       	cpc	r25, r1
    15a2:	b9 f1       	breq	.+110    	; 0x1612 <GetPinValue+0xce>
    15a4:	47 c0       	rjmp	.+142    	; 0x1634 <GetPinValue+0xf0>
		{
		case PORTA:	value = GET_BIT(PINA_REG,PinId);break;
    15a6:	e9 e3       	ldi	r30, 0x39	; 57
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a9 01       	movw	r20, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <GetPinValue+0x7a>
    15ba:	55 95       	asr	r21
    15bc:	47 95       	ror	r20
    15be:	8a 95       	dec	r24
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <GetPinValue+0x76>
    15c2:	ca 01       	movw	r24, r20
    15c4:	81 70       	andi	r24, 0x01	; 1
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	35 c0       	rjmp	.+106    	; 0x1634 <GetPinValue+0xf0>
		case PORTB:	value = GET_BIT(PINB_REG,PinId);break;
    15ca:	e6 e3       	ldi	r30, 0x36	; 54
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a9 01       	movw	r20, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <GetPinValue+0x9e>
    15de:	55 95       	asr	r21
    15e0:	47 95       	ror	r20
    15e2:	8a 95       	dec	r24
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <GetPinValue+0x9a>
    15e6:	ca 01       	movw	r24, r20
    15e8:	81 70       	andi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	23 c0       	rjmp	.+70     	; 0x1634 <GetPinValue+0xf0>
		case PORTC: value = GET_BIT(PINC_REG,PinId);break;
    15ee:	e3 e3       	ldi	r30, 0x33	; 51
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a9 01       	movw	r20, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <GetPinValue+0xc2>
    1602:	55 95       	asr	r21
    1604:	47 95       	ror	r20
    1606:	8a 95       	dec	r24
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <GetPinValue+0xbe>
    160a:	ca 01       	movw	r24, r20
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	11 c0       	rjmp	.+34     	; 0x1634 <GetPinValue+0xf0>
		case PORTD: value = GET_BIT(PIND_REG,PinId);break;
    1612:	e0 e3       	ldi	r30, 0x30	; 48
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a9 01       	movw	r20, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <GetPinValue+0xe6>
    1626:	55 95       	asr	r21
    1628:	47 95       	ror	r20
    162a:	8a 95       	dec	r24
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <GetPinValue+0xe2>
    162e:	ca 01       	movw	r24, r20
    1630:	81 70       	andi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//report error massage
	}
	return value;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <GetPressedKey>:
					   {'c','0','=','-'}};



u8 GetPressedKey(void)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <GetPressedKey+0x6>
    164c:	0f 92       	push	r0
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	u8 col;
	u8 row;
	u8 PressedKey = 0;
    1652:	19 82       	std	Y+1, r1	; 0x01
	for(col = Col1 ; col <= Col4 ; col++)
    1654:	1b 82       	std	Y+3, r1	; 0x03
    1656:	37 c0       	rjmp	.+110    	; 0x16c6 <GetPressedKey+0x80>
	{
		SetPinValue(col,KPD_PORT,LOW);
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	40 e0       	ldi	r20, 0x00	; 0
    165e:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
		for(row = Row1; row <= Row4; row++)
    1662:	84 e0       	ldi	r24, 0x04	; 4
    1664:	8a 83       	std	Y+2, r24	; 0x02
    1666:	24 c0       	rjmp	.+72     	; 0x16b0 <GetPressedKey+0x6a>
		{
			if(GetPinValue(row,KPD_PORT) == LOW)
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GetPinValue>
    1670:	88 23       	and	r24, r24
    1672:	d9 f4       	brne	.+54     	; 0x16aa <GetPressedKey+0x64>
			{
				PressedKey = SwitchValue[row-4][col];
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	ac 01       	movw	r20, r24
    167c:	44 50       	subi	r20, 0x04	; 4
    167e:	50 40       	sbci	r21, 0x00	; 0
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	ca 01       	movw	r24, r20
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	82 0f       	add	r24, r18
    1692:	93 1f       	adc	r25, r19
    1694:	fc 01       	movw	r30, r24
    1696:	e9 56       	subi	r30, 0x69	; 105
    1698:	fe 4f       	sbci	r31, 0xFE	; 254
    169a:	80 81       	ld	r24, Z
    169c:	89 83       	std	Y+1, r24	; 0x01
				while(GetPinValue(row,KPD_PORT) == LOW);
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	0e 94 a2 0a 	call	0x1544	; 0x1544 <GetPinValue>
    16a6:	88 23       	and	r24, r24
    16a8:	d1 f3       	breq	.-12     	; 0x169e <GetPressedKey+0x58>
	u8 row;
	u8 PressedKey = 0;
	for(col = Col1 ; col <= Col4 ; col++)
	{
		SetPinValue(col,KPD_PORT,LOW);
		for(row = Row1; row <= Row4; row++)
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	8f 5f       	subi	r24, 0xFF	; 255
    16ae:	8a 83       	std	Y+2, r24	; 0x02
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	88 30       	cpi	r24, 0x08	; 8
    16b4:	c8 f2       	brcs	.-78     	; 0x1668 <GetPressedKey+0x22>
				PressedKey = SwitchValue[row-4][col];
				while(GetPinValue(row,KPD_PORT) == LOW);
				//_delay_ms(50);
			}
		}
		SetPinValue(col,KPD_PORT,HIGH);
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
u8 GetPressedKey(void)
{
	u8 col;
	u8 row;
	u8 PressedKey = 0;
	for(col = Col1 ; col <= Col4 ; col++)
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	8f 5f       	subi	r24, 0xFF	; 255
    16c4:	8b 83       	std	Y+3, r24	; 0x03
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	84 30       	cpi	r24, 0x04	; 4
    16ca:	30 f2       	brcs	.-116    	; 0x1658 <GetPressedKey+0x12>
			}
		}
		SetPinValue(col,KPD_PORT,HIGH);
	}

	return PressedKey;
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <LCD_Init>:
#include"DIO.h"
#include"LCD.h"

u8 x = 0;
void LCD_Init(void)
{
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	c6 54       	subi	r28, 0x46	; 70
    16e8:	d0 40       	sbci	r29, 0x00	; 0
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	fe 01       	movw	r30, r28
    16f6:	ed 5b       	subi	r30, 0xBD	; 189
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a0 ef       	ldi	r26, 0xF0	; 240
    1700:	b1 e4       	ldi	r27, 0x41	; 65
    1702:	80 83       	st	Z, r24
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	a2 83       	std	Z+2, r26	; 0x02
    1708:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170a:	8e 01       	movw	r16, r28
    170c:	01 5c       	subi	r16, 0xC1	; 193
    170e:	1f 4f       	sbci	r17, 0xFF	; 255
    1710:	fe 01       	movw	r30, r28
    1712:	ed 5b       	subi	r30, 0xBD	; 189
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	60 81       	ld	r22, Z
    1718:	71 81       	ldd	r23, Z+1	; 0x01
    171a:	82 81       	ldd	r24, Z+2	; 0x02
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	4a ef       	ldi	r20, 0xFA	; 250
    1724:	54 e4       	ldi	r21, 0x44	; 68
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	f8 01       	movw	r30, r16
    1730:	80 83       	st	Z, r24
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	a2 83       	std	Z+2, r26	; 0x02
    1736:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1738:	fe 01       	movw	r30, r28
    173a:	ff 96       	adiw	r30, 0x3f	; 63
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	2c f4       	brge	.+10     	; 0x175e <LCD_Init+0x84>
		__ticks = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9e af       	std	Y+62, r25	; 0x3e
    175a:	8d af       	std	Y+61, r24	; 0x3d
    175c:	46 c0       	rjmp	.+140    	; 0x17ea <LCD_Init+0x110>
	else if (__tmp > 65535)
    175e:	fe 01       	movw	r30, r28
    1760:	ff 96       	adiw	r30, 0x3f	; 63
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	3f ef       	ldi	r19, 0xFF	; 255
    176e:	4f e7       	ldi	r20, 0x7F	; 127
    1770:	57 e4       	ldi	r21, 0x47	; 71
    1772:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1776:	18 16       	cp	r1, r24
    1778:	64 f5       	brge	.+88     	; 0x17d2 <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177a:	fe 01       	movw	r30, r28
    177c:	ed 5b       	subi	r30, 0xBD	; 189
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e2       	ldi	r20, 0x20	; 32
    178e:	51 e4       	ldi	r21, 0x41	; 65
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9e af       	std	Y+62, r25	; 0x3e
    17a6:	8d af       	std	Y+61, r24	; 0x3d
    17a8:	0f c0       	rjmp	.+30     	; 0x17c8 <LCD_Init+0xee>
    17aa:	88 ec       	ldi	r24, 0xC8	; 200
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9c af       	std	Y+60, r25	; 0x3c
    17b0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    17b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <LCD_Init+0xdc>
    17ba:	9c af       	std	Y+60, r25	; 0x3c
    17bc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17be:	8d ad       	ldd	r24, Y+61	; 0x3d
    17c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	9e af       	std	Y+62, r25	; 0x3e
    17c6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	69 f7       	brne	.-38     	; 0x17aa <LCD_Init+0xd0>
    17d0:	16 c0       	rjmp	.+44     	; 0x17fe <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d2:	fe 01       	movw	r30, r28
    17d4:	ff 96       	adiw	r30, 0x3f	; 63
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	9e af       	std	Y+62, r25	; 0x3e
    17e8:	8d af       	std	Y+61, r24	; 0x3d
    17ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ee:	9a af       	std	Y+58, r25	; 0x3a
    17f0:	89 af       	std	Y+57, r24	; 0x39
    17f2:	89 ad       	ldd	r24, Y+57	; 0x39
    17f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <LCD_Init+0x11c>
    17fa:	9a af       	std	Y+58, r25	; 0x3a
    17fc:	89 af       	std	Y+57, r24	; 0x39
	/*delay 30 ms to ensure That LCD Initialized and power on*/
	_delay_ms(30);
	/*Return Home*/

	/*Function SET (8bit/2-line/5x7 dot character)*/
	LCD_Function_Set();
    17fe:	0e 94 2c 18 	call	0x3058	; 0x3058 <LCD_Function_Set>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e8       	ldi	r26, 0x80	; 128
    1808:	bf e3       	ldi	r27, 0x3F	; 63
    180a:	8d ab       	std	Y+53, r24	; 0x35
    180c:	9e ab       	std	Y+54, r25	; 0x36
    180e:	af ab       	std	Y+55, r26	; 0x37
    1810:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	6d a9       	ldd	r22, Y+53	; 0x35
    1814:	7e a9       	ldd	r23, Y+54	; 0x36
    1816:	8f a9       	ldd	r24, Y+55	; 0x37
    1818:	98 ad       	ldd	r25, Y+56	; 0x38
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a ef       	ldi	r20, 0xFA	; 250
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	89 ab       	std	Y+49, r24	; 0x31
    182c:	9a ab       	std	Y+50, r25	; 0x32
    182e:	ab ab       	std	Y+51, r26	; 0x33
    1830:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1832:	69 a9       	ldd	r22, Y+49	; 0x31
    1834:	7a a9       	ldd	r23, Y+50	; 0x32
    1836:	8b a9       	ldd	r24, Y+51	; 0x33
    1838:	9c a9       	ldd	r25, Y+52	; 0x34
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <LCD_Init+0x17a>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	98 ab       	std	Y+48, r25	; 0x30
    1850:	8f a7       	std	Y+47, r24	; 0x2f
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <LCD_Init+0x1f8>
	else if (__tmp > 65535)
    1854:	69 a9       	ldd	r22, Y+49	; 0x31
    1856:	7a a9       	ldd	r23, Y+50	; 0x32
    1858:	8b a9       	ldd	r24, Y+51	; 0x33
    185a:	9c a9       	ldd	r25, Y+52	; 0x34
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <LCD_Init+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	6d a9       	ldd	r22, Y+53	; 0x35
    186e:	7e a9       	ldd	r23, Y+54	; 0x36
    1870:	8f a9       	ldd	r24, Y+55	; 0x37
    1872:	98 ad       	ldd	r25, Y+56	; 0x38
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	98 ab       	std	Y+48, r25	; 0x30
    1892:	8f a7       	std	Y+47, r24	; 0x2f
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <LCD_Init+0x1da>
    1896:	88 ec       	ldi	r24, 0xC8	; 200
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9e a7       	std	Y+46, r25	; 0x2e
    189c:	8d a7       	std	Y+45, r24	; 0x2d
    189e:	8d a5       	ldd	r24, Y+45	; 0x2d
    18a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_Init+0x1c8>
    18a6:	9e a7       	std	Y+46, r25	; 0x2e
    18a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ac:	98 a9       	ldd	r25, Y+48	; 0x30
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	98 ab       	std	Y+48, r25	; 0x30
    18b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b6:	98 a9       	ldd	r25, Y+48	; 0x30
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <LCD_Init+0x1bc>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <LCD_Init+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	69 a9       	ldd	r22, Y+49	; 0x31
    18c0:	7a a9       	ldd	r23, Y+50	; 0x32
    18c2:	8b a9       	ldd	r24, Y+51	; 0x33
    18c4:	9c a9       	ldd	r25, Y+52	; 0x34
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	98 ab       	std	Y+48, r25	; 0x30
    18d0:	8f a7       	std	Y+47, r24	; 0x2f
    18d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d4:	98 a9       	ldd	r25, Y+48	; 0x30
    18d6:	9c a7       	std	Y+44, r25	; 0x2c
    18d8:	8b a7       	std	Y+43, r24	; 0x2b
    18da:	8b a5       	ldd	r24, Y+43	; 0x2b
    18dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <LCD_Init+0x204>
    18e2:	9c a7       	std	Y+44, r25	; 0x2c
    18e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/*Display ON/OFF Control*/
	LCD_Display_Control(ON,ON,ON);
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	41 e0       	ldi	r20, 0x01	; 1
    18ec:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_Display_Control>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e8       	ldi	r26, 0x80	; 128
    18f6:	bf e3       	ldi	r27, 0x3F	; 63
    18f8:	8f a3       	std	Y+39, r24	; 0x27
    18fa:	98 a7       	std	Y+40, r25	; 0x28
    18fc:	a9 a7       	std	Y+41, r26	; 0x29
    18fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	6f a1       	ldd	r22, Y+39	; 0x27
    1902:	78 a5       	ldd	r23, Y+40	; 0x28
    1904:	89 a5       	ldd	r24, Y+41	; 0x29
    1906:	9a a5       	ldd	r25, Y+42	; 0x2a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a ef       	ldi	r20, 0xFA	; 250
    190e:	54 e4       	ldi	r21, 0x44	; 68
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8b a3       	std	Y+35, r24	; 0x23
    191a:	9c a3       	std	Y+36, r25	; 0x24
    191c:	ad a3       	std	Y+37, r26	; 0x25
    191e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1920:	6b a1       	ldd	r22, Y+35	; 0x23
    1922:	7c a1       	ldd	r23, Y+36	; 0x24
    1924:	8d a1       	ldd	r24, Y+37	; 0x25
    1926:	9e a1       	ldd	r25, Y+38	; 0x26
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <LCD_Init+0x268>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9a a3       	std	Y+34, r25	; 0x22
    193e:	89 a3       	std	Y+33, r24	; 0x21
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <LCD_Init+0x2e6>
	else if (__tmp > 65535)
    1942:	6b a1       	ldd	r22, Y+35	; 0x23
    1944:	7c a1       	ldd	r23, Y+36	; 0x24
    1946:	8d a1       	ldd	r24, Y+37	; 0x25
    1948:	9e a1       	ldd	r25, Y+38	; 0x26
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <LCD_Init+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	6f a1       	ldd	r22, Y+39	; 0x27
    195c:	78 a5       	ldd	r23, Y+40	; 0x28
    195e:	89 a5       	ldd	r24, Y+41	; 0x29
    1960:	9a a5       	ldd	r25, Y+42	; 0x2a
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9a a3       	std	Y+34, r25	; 0x22
    1980:	89 a3       	std	Y+33, r24	; 0x21
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <LCD_Init+0x2c8>
    1984:	88 ec       	ldi	r24, 0xC8	; 200
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	98 a3       	std	Y+32, r25	; 0x20
    198a:	8f 8f       	std	Y+31, r24	; 0x1f
    198c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    198e:	98 a1       	ldd	r25, Y+32	; 0x20
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_Init+0x2b6>
    1994:	98 a3       	std	Y+32, r25	; 0x20
    1996:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	89 a1       	ldd	r24, Y+33	; 0x21
    199a:	9a a1       	ldd	r25, Y+34	; 0x22
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9a a3       	std	Y+34, r25	; 0x22
    19a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	89 a1       	ldd	r24, Y+33	; 0x21
    19a4:	9a a1       	ldd	r25, Y+34	; 0x22
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <LCD_Init+0x2aa>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <LCD_Init+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6b a1       	ldd	r22, Y+35	; 0x23
    19ae:	7c a1       	ldd	r23, Y+36	; 0x24
    19b0:	8d a1       	ldd	r24, Y+37	; 0x25
    19b2:	9e a1       	ldd	r25, Y+38	; 0x26
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9a a3       	std	Y+34, r25	; 0x22
    19be:	89 a3       	std	Y+33, r24	; 0x21
    19c0:	89 a1       	ldd	r24, Y+33	; 0x21
    19c2:	9a a1       	ldd	r25, Y+34	; 0x22
    19c4:	9e 8f       	std	Y+30, r25	; 0x1e
    19c6:	8d 8f       	std	Y+29, r24	; 0x1d
    19c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_Init+0x2f2>
    19d0:	9e 8f       	std	Y+30, r25	; 0x1e
    19d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Clear Screen*/
	LCD_Clear_Screen();
    19d4:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_Clear_Screen>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	a0 e0       	ldi	r26, 0x00	; 0
    19de:	b0 e4       	ldi	r27, 0x40	; 64
    19e0:	89 8f       	std	Y+25, r24	; 0x19
    19e2:	9a 8f       	std	Y+26, r25	; 0x1a
    19e4:	ab 8f       	std	Y+27, r26	; 0x1b
    19e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a ef       	ldi	r20, 0xFA	; 250
    19f6:	54 e4       	ldi	r21, 0x44	; 68
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8d 8b       	std	Y+21, r24	; 0x15
    1a02:	9e 8b       	std	Y+22, r25	; 0x16
    1a04:	af 8b       	std	Y+23, r26	; 0x17
    1a06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a08:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <LCD_Init+0x350>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9c 8b       	std	Y+20, r25	; 0x14
    1a26:	8b 8b       	std	Y+19, r24	; 0x13
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <LCD_Init+0x3ce>
	else if (__tmp > 65535)
    1a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a30:	98 8d       	ldd	r25, Y+24	; 0x18
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	4c f5       	brge	.+82     	; 0x1a94 <LCD_Init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	69 8d       	ldd	r22, Y+25	; 0x19
    1a44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <LCD_Init+0x3b0>
    1a6c:	88 ec       	ldi	r24, 0xC8	; 200
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9a 8b       	std	Y+18, r25	; 0x12
    1a72:	89 8b       	std	Y+17, r24	; 0x11
    1a74:	89 89       	ldd	r24, Y+17	; 0x11
    1a76:	9a 89       	ldd	r25, Y+18	; 0x12
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_Init+0x39e>
    1a7c:	9a 8b       	std	Y+18, r25	; 0x12
    1a7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	8b 89       	ldd	r24, Y+19	; 0x13
    1a82:	9c 89       	ldd	r25, Y+20	; 0x14
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <LCD_Init+0x392>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <LCD_Init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a94:	6d 89       	ldd	r22, Y+21	; 0x15
    1a96:	7e 89       	ldd	r23, Y+22	; 0x16
    1a98:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9c 8b       	std	Y+20, r25	; 0x14
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
    1aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1aac:	98 8b       	std	Y+16, r25	; 0x10
    1aae:	8f 87       	std	Y+15, r24	; 0x0f
    1ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab2:	98 89       	ldd	r25, Y+16	; 0x10
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <LCD_Init+0x3da>
    1ab8:	98 8b       	std	Y+16, r25	; 0x10
    1aba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/*Entry Mode SET*/
	LCD_EntryMode();
    1abc:	0e 94 a7 18 	call	0x314e	; 0x314e <LCD_EntryMode>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	a0 e8       	ldi	r26, 0x80	; 128
    1ac6:	bf e3       	ldi	r27, 0x3F	; 63
    1ac8:	8b 87       	std	Y+11, r24	; 0x0b
    1aca:	9c 87       	std	Y+12, r25	; 0x0c
    1acc:	ad 87       	std	Y+13, r26	; 0x0d
    1ace:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	4a ef       	ldi	r20, 0xFA	; 250
    1ade:	54 e4       	ldi	r21, 0x44	; 68
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	8f 83       	std	Y+7, r24	; 0x07
    1aea:	98 87       	std	Y+8, r25	; 0x08
    1aec:	a9 87       	std	Y+9, r26	; 0x09
    1aee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af0:	6f 81       	ldd	r22, Y+7	; 0x07
    1af2:	78 85       	ldd	r23, Y+8	; 0x08
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e8       	ldi	r20, 0x80	; 128
    1afe:	5f e3       	ldi	r21, 0x3F	; 63
    1b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b04:	88 23       	and	r24, r24
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <LCD_Init+0x438>
		__ticks = 1;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	3f c0       	rjmp	.+126    	; 0x1b90 <LCD_Init+0x4b6>
	else if (__tmp > 65535)
    1b12:	6f 81       	ldd	r22, Y+7	; 0x07
    1b14:	78 85       	ldd	r23, Y+8	; 0x08
    1b16:	89 85       	ldd	r24, Y+9	; 0x09
    1b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	3f ef       	ldi	r19, 0xFF	; 255
    1b1e:	4f e7       	ldi	r20, 0x7F	; 127
    1b20:	57 e4       	ldi	r21, 0x47	; 71
    1b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b26:	18 16       	cp	r1, r24
    1b28:	4c f5       	brge	.+82     	; 0x1b7c <LCD_Init+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e2       	ldi	r20, 0x20	; 32
    1b38:	51 e4       	ldi	r21, 0x41	; 65
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <LCD_Init+0x498>
    1b54:	88 ec       	ldi	r24, 0xC8	; 200
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9c 83       	std	Y+4, r25	; 0x04
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <LCD_Init+0x486>
    1b64:	9c 83       	std	Y+4, r25	; 0x04
    1b66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	9e 81       	ldd	r25, Y+6	; 0x06
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	69 f7       	brne	.-38     	; 0x1b54 <LCD_Init+0x47a>
    1b7a:	14 c0       	rjmp	.+40     	; 0x1ba4 <LCD_Init+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7e:	78 85       	ldd	r23, Y+8	; 0x08
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_Init+0x4c2>
    1ba0:	9a 83       	std	Y+2, r25	; 0x02
    1ba2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	x = 1;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	80 93 a8 01 	sts	0x01A8, r24

}
    1baa:	ca 5b       	subi	r28, 0xBA	; 186
    1bac:	df 4f       	sbci	r29, 0xFF	; 255
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	08 95       	ret

00001bc2 <LCD_Write_Cmd>:
void LCD_Write_Cmd(u8 cmd)
{
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	cf 56       	subi	r28, 0x6F	; 111
    1bd0:	d0 40       	sbci	r29, 0x00	; 0
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e1 59       	subi	r30, 0x91	; 145
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
	/*Set RS Pin to LOW*/
	SetPinValue(RS,Control_Port,LOW);
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	62 e0       	ldi	r22, 0x02	; 2
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
	/*Set RW Pin to LOW*/
	SetPinValue(RW,Control_Port,LOW);
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	62 e0       	ldi	r22, 0x02	; 2
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>

	/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
	SetPinValue(PIN4,Data_Port,GET_BIT(cmd,4));
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	e1 59       	subi	r30, 0x91	; 145
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	82 95       	swap	r24
    1c02:	8f 70       	andi	r24, 0x0F	; 15
    1c04:	98 2f       	mov	r25, r24
    1c06:	91 70       	andi	r25, 0x01	; 1
    1c08:	84 e0       	ldi	r24, 0x04	; 4
    1c0a:	63 e0       	ldi	r22, 0x03	; 3
    1c0c:	49 2f       	mov	r20, r25
    1c0e:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
	SetPinValue(PIN5,Data_Port,GET_BIT(cmd,5));
    1c12:	fe 01       	movw	r30, r28
    1c14:	e1 59       	subi	r30, 0x91	; 145
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 81       	ld	r24, Z
    1c1a:	82 95       	swap	r24
    1c1c:	86 95       	lsr	r24
    1c1e:	87 70       	andi	r24, 0x07	; 7
    1c20:	98 2f       	mov	r25, r24
    1c22:	91 70       	andi	r25, 0x01	; 1
    1c24:	85 e0       	ldi	r24, 0x05	; 5
    1c26:	63 e0       	ldi	r22, 0x03	; 3
    1c28:	49 2f       	mov	r20, r25
    1c2a:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
	SetPinValue(PIN6,Data_Port,GET_BIT(cmd,6));
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e1 59       	subi	r30, 0x91	; 145
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 81       	ld	r24, Z
    1c36:	82 95       	swap	r24
    1c38:	86 95       	lsr	r24
    1c3a:	86 95       	lsr	r24
    1c3c:	83 70       	andi	r24, 0x03	; 3
    1c3e:	98 2f       	mov	r25, r24
    1c40:	91 70       	andi	r25, 0x01	; 1
    1c42:	86 e0       	ldi	r24, 0x06	; 6
    1c44:	63 e0       	ldi	r22, 0x03	; 3
    1c46:	49 2f       	mov	r20, r25
    1c48:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
	SetPinValue(PIN7,Data_Port,GET_BIT(cmd,7));
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e1 59       	subi	r30, 0x91	; 145
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	80 81       	ld	r24, Z
    1c54:	98 2f       	mov	r25, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	99 27       	eor	r25, r25
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	87 e0       	ldi	r24, 0x07	; 7
    1c5e:	63 e0       	ldi	r22, 0x03	; 3
    1c60:	49 2f       	mov	r20, r25
    1c62:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>

	/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
	SetPinValue(E,Control_Port,HIGH);
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	62 e0       	ldi	r22, 0x02	; 2
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
    1c70:	fe 01       	movw	r30, r28
    1c72:	e5 59       	subi	r30, 0x95	; 149
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e8       	ldi	r26, 0x80	; 128
    1c7c:	bf e3       	ldi	r27, 0x3F	; 63
    1c7e:	80 83       	st	Z, r24
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	a2 83       	std	Z+2, r26	; 0x02
    1c84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c86:	8e 01       	movw	r16, r28
    1c88:	09 59       	subi	r16, 0x99	; 153
    1c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e5 59       	subi	r30, 0x95	; 149
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	60 81       	ld	r22, Z
    1c94:	71 81       	ldd	r23, Z+1	; 0x01
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	2b ea       	ldi	r18, 0xAB	; 171
    1c9c:	3a ea       	ldi	r19, 0xAA	; 170
    1c9e:	4a e2       	ldi	r20, 0x2A	; 42
    1ca0:	50 e4       	ldi	r21, 0x40	; 64
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	f8 01       	movw	r30, r16
    1cac:	80 83       	st	Z, r24
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	a2 83       	std	Z+2, r26	; 0x02
    1cb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e9 59       	subi	r30, 0x99	; 153
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	34 f4       	brge	.+12     	; 0x1cde <LCD_Write_Cmd+0x11c>
		__ticks = 1;
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	ea 59       	subi	r30, 0x9A	; 154
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	80 83       	st	Z, r24
    1cdc:	e0 c0       	rjmp	.+448    	; 0x1e9e <LCD_Write_Cmd+0x2dc>
	else if (__tmp > 255)
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e9 59       	subi	r30, 0x99	; 153
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	53 e4       	ldi	r21, 0x43	; 67
    1cf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	0c f0       	brlt	.+2      	; 0x1cfe <LCD_Write_Cmd+0x13c>
    1cfc:	c0 c0       	rjmp	.+384    	; 0x1e7e <LCD_Write_Cmd+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e5 59       	subi	r30, 0x95	; 149
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	4a e7       	ldi	r20, 0x7A	; 122
    1d12:	54 e4       	ldi	r21, 0x44	; 68
    1d14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	ee 59       	subi	r30, 0x9E	; 158
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 83       	st	Z, r24
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	a2 83       	std	Z+2, r26	; 0x02
    1d28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2a:	8e 01       	movw	r16, r28
    1d2c:	02 5a       	subi	r16, 0xA2	; 162
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d30:	fe 01       	movw	r30, r28
    1d32:	ee 59       	subi	r30, 0x9E	; 158
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	60 81       	ld	r22, Z
    1d38:	71 81       	ldd	r23, Z+1	; 0x01
    1d3a:	82 81       	ldd	r24, Z+2	; 0x02
    1d3c:	93 81       	ldd	r25, Z+3	; 0x03
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	4a ef       	ldi	r20, 0xFA	; 250
    1d44:	54 e4       	ldi	r21, 0x44	; 68
    1d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	f8 01       	movw	r30, r16
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	a2 83       	std	Z+2, r26	; 0x02
    1d56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e2 5a       	subi	r30, 0xA2	; 162
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e8       	ldi	r20, 0x80	; 128
    1d6c:	5f e3       	ldi	r21, 0x3F	; 63
    1d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d72:	88 23       	and	r24, r24
    1d74:	44 f4       	brge	.+16     	; 0x1d86 <LCD_Write_Cmd+0x1c4>
		__ticks = 1;
    1d76:	fe 01       	movw	r30, r28
    1d78:	e4 5a       	subi	r30, 0xA4	; 164
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
    1d84:	64 c0       	rjmp	.+200    	; 0x1e4e <LCD_Write_Cmd+0x28c>
	else if (__tmp > 65535)
    1d86:	fe 01       	movw	r30, r28
    1d88:	e2 5a       	subi	r30, 0xA2	; 162
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	0c f0       	brlt	.+2      	; 0x1da6 <LCD_Write_Cmd+0x1e4>
    1da4:	43 c0       	rjmp	.+134    	; 0x1e2c <LCD_Write_Cmd+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da6:	fe 01       	movw	r30, r28
    1da8:	ee 59       	subi	r30, 0x9E	; 158
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8e 01       	movw	r16, r28
    1dc6:	04 5a       	subi	r16, 0xA4	; 164
    1dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	1f c0       	rjmp	.+62     	; 0x1e1c <LCD_Write_Cmd+0x25a>
    1dde:	fe 01       	movw	r30, r28
    1de0:	e6 5a       	subi	r30, 0xA6	; 166
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	88 ec       	ldi	r24, 0xC8	; 200
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	80 83       	st	Z, r24
    1dec:	fe 01       	movw	r30, r28
    1dee:	e6 5a       	subi	r30, 0xA6	; 166
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCD_Write_Cmd+0x234>
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e6 5a       	subi	r30, 0xA6	; 166
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	de 01       	movw	r26, r28
    1e06:	a4 5a       	subi	r26, 0xA4	; 164
    1e08:	bf 4f       	sbci	r27, 0xFF	; 255
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e4 5a       	subi	r30, 0xA4	; 164
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	80 81       	ld	r24, Z
    1e12:	91 81       	ldd	r25, Z+1	; 0x01
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	11 96       	adiw	r26, 0x01	; 1
    1e18:	9c 93       	st	X, r25
    1e1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	e4 5a       	subi	r30, 0xA4	; 164
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	d1 f6       	brne	.-76     	; 0x1dde <LCD_Write_Cmd+0x21c>
    1e2a:	4b c0       	rjmp	.+150    	; 0x1ec2 <LCD_Write_Cmd+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	8e 01       	movw	r16, r28
    1e2e:	04 5a       	subi	r16, 0xA4	; 164
    1e30:	1f 4f       	sbci	r17, 0xFF	; 255
    1e32:	fe 01       	movw	r30, r28
    1e34:	e2 5a       	subi	r30, 0xA2	; 162
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	f8 01       	movw	r30, r16
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
    1e4e:	de 01       	movw	r26, r28
    1e50:	a8 5a       	subi	r26, 0xA8	; 168
    1e52:	bf 4f       	sbci	r27, 0xFF	; 255
    1e54:	fe 01       	movw	r30, r28
    1e56:	e4 5a       	subi	r30, 0xA4	; 164
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	11 96       	adiw	r26, 0x01	; 1
    1e60:	9c 93       	st	X, r25
    1e62:	8e 93       	st	-X, r24
    1e64:	fe 01       	movw	r30, r28
    1e66:	e8 5a       	subi	r30, 0xA8	; 168
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_Write_Cmd+0x2ac>
    1e72:	fe 01       	movw	r30, r28
    1e74:	e8 5a       	subi	r30, 0xA8	; 168
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	22 c0       	rjmp	.+68     	; 0x1ec2 <LCD_Write_Cmd+0x300>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e7e:	8e 01       	movw	r16, r28
    1e80:	0a 59       	subi	r16, 0x9A	; 154
    1e82:	1f 4f       	sbci	r17, 0xFF	; 255
    1e84:	fe 01       	movw	r30, r28
    1e86:	e9 59       	subi	r30, 0x99	; 153
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 83       	st	Z, r24
    1e9e:	de 01       	movw	r26, r28
    1ea0:	a9 5a       	subi	r26, 0xA9	; 169
    1ea2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ea 59       	subi	r30, 0x9A	; 154
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 81       	ld	r24, Z
    1eac:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e9 5a       	subi	r30, 0xA9	; 169
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8a 95       	dec	r24
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_Write_Cmd+0x2f4>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e9 5a       	subi	r30, 0xA9	; 169
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 83       	st	Z, r24
	_delay_us(1);
	SetPinValue(E,Control_Port,LOW);
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	62 e0       	ldi	r22, 0x02	; 2
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ed 5a       	subi	r30, 0xAD	; 173
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a0 e8       	ldi	r26, 0x80	; 128
    1ed8:	bf e3       	ldi	r27, 0x3F	; 63
    1eda:	80 83       	st	Z, r24
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	a2 83       	std	Z+2, r26	; 0x02
    1ee0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ee2:	8e 01       	movw	r16, r28
    1ee4:	01 5b       	subi	r16, 0xB1	; 177
    1ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee8:	fe 01       	movw	r30, r28
    1eea:	ed 5a       	subi	r30, 0xAD	; 173
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	2b ea       	ldi	r18, 0xAB	; 171
    1ef8:	3a ea       	ldi	r19, 0xAA	; 170
    1efa:	4a e2       	ldi	r20, 0x2A	; 42
    1efc:	50 e4       	ldi	r21, 0x40	; 64
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	f8 01       	movw	r30, r16
    1f08:	80 83       	st	Z, r24
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	a2 83       	std	Z+2, r26	; 0x02
    1f0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f10:	fe 01       	movw	r30, r28
    1f12:	e1 5b       	subi	r30, 0xB1	; 177
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	34 f4       	brge	.+12     	; 0x1f3a <LCD_Write_Cmd+0x378>
		__ticks = 1;
    1f2e:	fe 01       	movw	r30, r28
    1f30:	e2 5b       	subi	r30, 0xB2	; 178
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 83       	st	Z, r24
    1f38:	e0 c0       	rjmp	.+448    	; 0x20fa <LCD_Write_Cmd+0x538>
	else if (__tmp > 255)
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e1 5b       	subi	r30, 0xB1	; 177
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4f e7       	ldi	r20, 0x7F	; 127
    1f4e:	53 e4       	ldi	r21, 0x43	; 67
    1f50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f54:	18 16       	cp	r1, r24
    1f56:	0c f0       	brlt	.+2      	; 0x1f5a <LCD_Write_Cmd+0x398>
    1f58:	c0 c0       	rjmp	.+384    	; 0x20da <LCD_Write_Cmd+0x518>
	{
		_delay_ms(__us / 1000.0);
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	ed 5a       	subi	r30, 0xAD	; 173
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a e7       	ldi	r20, 0x7A	; 122
    1f6e:	54 e4       	ldi	r21, 0x44	; 68
    1f70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e6 5b       	subi	r30, 0xB6	; 182
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 83       	st	Z, r24
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	a2 83       	std	Z+2, r26	; 0x02
    1f84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f86:	8e 01       	movw	r16, r28
    1f88:	0a 5b       	subi	r16, 0xBA	; 186
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e6 5b       	subi	r30, 0xB6	; 182
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	4a ef       	ldi	r20, 0xFA	; 250
    1fa0:	54 e4       	ldi	r21, 0x44	; 68
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	f8 01       	movw	r30, r16
    1fac:	80 83       	st	Z, r24
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	a2 83       	std	Z+2, r26	; 0x02
    1fb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ea 5b       	subi	r30, 0xBA	; 186
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	60 81       	ld	r22, Z
    1fbc:	71 81       	ldd	r23, Z+1	; 0x01
    1fbe:	82 81       	ldd	r24, Z+2	; 0x02
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	44 f4       	brge	.+16     	; 0x1fe2 <LCD_Write_Cmd+0x420>
		__ticks = 1;
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ec 5b       	subi	r30, 0xBC	; 188
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
    1fe0:	64 c0       	rjmp	.+200    	; 0x20aa <LCD_Write_Cmd+0x4e8>
	else if (__tmp > 65535)
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ea 5b       	subi	r30, 0xBA	; 186
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	0c f0       	brlt	.+2      	; 0x2002 <LCD_Write_Cmd+0x440>
    2000:	43 c0       	rjmp	.+134    	; 0x2088 <LCD_Write_Cmd+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2002:	fe 01       	movw	r30, r28
    2004:	e6 5b       	subi	r30, 0xB6	; 182
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8e 01       	movw	r16, r28
    2022:	0c 5b       	subi	r16, 0xBC	; 188
    2024:	1f 4f       	sbci	r17, 0xFF	; 255
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	f8 01       	movw	r30, r16
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
    2038:	1f c0       	rjmp	.+62     	; 0x2078 <LCD_Write_Cmd+0x4b6>
    203a:	fe 01       	movw	r30, r28
    203c:	ee 5b       	subi	r30, 0xBE	; 190
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2048:	fe 01       	movw	r30, r28
    204a:	ee 5b       	subi	r30, 0xBE	; 190
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_Write_Cmd+0x490>
    2056:	fe 01       	movw	r30, r28
    2058:	ee 5b       	subi	r30, 0xBE	; 190
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	de 01       	movw	r26, r28
    2062:	ac 5b       	subi	r26, 0xBC	; 188
    2064:	bf 4f       	sbci	r27, 0xFF	; 255
    2066:	fe 01       	movw	r30, r28
    2068:	ec 5b       	subi	r30, 0xBC	; 188
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	91 81       	ldd	r25, Z+1	; 0x01
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	11 96       	adiw	r26, 0x01	; 1
    2074:	9c 93       	st	X, r25
    2076:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	fe 01       	movw	r30, r28
    207a:	ec 5b       	subi	r30, 0xBC	; 188
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	d1 f6       	brne	.-76     	; 0x203a <LCD_Write_Cmd+0x478>
    2086:	42 c0       	rjmp	.+132    	; 0x210c <LCD_Write_Cmd+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	8e 01       	movw	r16, r28
    208a:	0c 5b       	subi	r16, 0xBC	; 188
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	fe 01       	movw	r30, r28
    2090:	ea 5b       	subi	r30, 0xBA	; 186
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	f8 01       	movw	r30, r16
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
    20aa:	de 01       	movw	r26, r28
    20ac:	a0 5c       	subi	r26, 0xC0	; 192
    20ae:	bf 4f       	sbci	r27, 0xFF	; 255
    20b0:	fe 01       	movw	r30, r28
    20b2:	ec 5b       	subi	r30, 0xBC	; 188
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	11 96       	adiw	r26, 0x01	; 1
    20bc:	9c 93       	st	X, r25
    20be:	8e 93       	st	-X, r24
    20c0:	fe 01       	movw	r30, r28
    20c2:	e0 5c       	subi	r30, 0xC0	; 192
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_Write_Cmd+0x508>
    20ce:	fe 01       	movw	r30, r28
    20d0:	e0 5c       	subi	r30, 0xC0	; 192
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
    20d8:	19 c0       	rjmp	.+50     	; 0x210c <LCD_Write_Cmd+0x54a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20da:	8e 01       	movw	r16, r28
    20dc:	02 5b       	subi	r16, 0xB2	; 178
    20de:	1f 4f       	sbci	r17, 0xFF	; 255
    20e0:	fe 01       	movw	r30, r28
    20e2:	e1 5b       	subi	r30, 0xB1	; 177
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	f8 01       	movw	r30, r16
    20f8:	80 83       	st	Z, r24
    20fa:	fe 01       	movw	r30, r28
    20fc:	e2 5b       	subi	r30, 0xB2	; 178
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	80 81       	ld	r24, Z
    2102:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2104:	8f ad       	ldd	r24, Y+63	; 0x3f
    2106:	8a 95       	dec	r24
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_Write_Cmd+0x544>
    210a:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	if(x)
    210c:	80 91 a8 01 	lds	r24, 0x01A8
    2110:	88 23       	and	r24, r24
    2112:	09 f4       	brne	.+2      	; 0x2116 <LCD_Write_Cmd+0x554>
    2114:	b8 c1       	rjmp	.+880    	; 0x2486 <LCD_Write_Cmd+0x8c4>
	{
		/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
		SetPinValue(PIN4,Data_Port,GET_BIT(cmd,0));
    2116:	fe 01       	movw	r30, r28
    2118:	e1 59       	subi	r30, 0x91	; 145
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 81       	ld	r24, Z
    211e:	98 2f       	mov	r25, r24
    2120:	91 70       	andi	r25, 0x01	; 1
    2122:	84 e0       	ldi	r24, 0x04	; 4
    2124:	63 e0       	ldi	r22, 0x03	; 3
    2126:	49 2f       	mov	r20, r25
    2128:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
		SetPinValue(PIN5,Data_Port,GET_BIT(cmd,1));
    212c:	fe 01       	movw	r30, r28
    212e:	e1 59       	subi	r30, 0x91	; 145
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	86 95       	lsr	r24
    2136:	98 2f       	mov	r25, r24
    2138:	91 70       	andi	r25, 0x01	; 1
    213a:	85 e0       	ldi	r24, 0x05	; 5
    213c:	63 e0       	ldi	r22, 0x03	; 3
    213e:	49 2f       	mov	r20, r25
    2140:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
		SetPinValue(PIN6,Data_Port,GET_BIT(cmd,2));
    2144:	fe 01       	movw	r30, r28
    2146:	e1 59       	subi	r30, 0x91	; 145
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	86 95       	lsr	r24
    214e:	86 95       	lsr	r24
    2150:	98 2f       	mov	r25, r24
    2152:	91 70       	andi	r25, 0x01	; 1
    2154:	86 e0       	ldi	r24, 0x06	; 6
    2156:	63 e0       	ldi	r22, 0x03	; 3
    2158:	49 2f       	mov	r20, r25
    215a:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
		SetPinValue(PIN7,Data_Port,GET_BIT(cmd,3));
    215e:	fe 01       	movw	r30, r28
    2160:	e1 59       	subi	r30, 0x91	; 145
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 81       	ld	r24, Z
    2166:	86 95       	lsr	r24
    2168:	86 95       	lsr	r24
    216a:	86 95       	lsr	r24
    216c:	98 2f       	mov	r25, r24
    216e:	91 70       	andi	r25, 0x01	; 1
    2170:	87 e0       	ldi	r24, 0x07	; 7
    2172:	63 e0       	ldi	r22, 0x03	; 3
    2174:	49 2f       	mov	r20, r25
    2176:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>

		/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
		SetPinValue(E,Control_Port,HIGH);
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	62 e0       	ldi	r22, 0x02	; 2
    217e:	41 e0       	ldi	r20, 0x01	; 1
    2180:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a0 e8       	ldi	r26, 0x80	; 128
    218a:	bf e3       	ldi	r27, 0x3F	; 63
    218c:	8b af       	std	Y+59, r24	; 0x3b
    218e:	9c af       	std	Y+60, r25	; 0x3c
    2190:	ad af       	std	Y+61, r26	; 0x3d
    2192:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2194:	6b ad       	ldd	r22, Y+59	; 0x3b
    2196:	7c ad       	ldd	r23, Y+60	; 0x3c
    2198:	8d ad       	ldd	r24, Y+61	; 0x3d
    219a:	9e ad       	ldd	r25, Y+62	; 0x3e
    219c:	2b ea       	ldi	r18, 0xAB	; 171
    219e:	3a ea       	ldi	r19, 0xAA	; 170
    21a0:	4a e2       	ldi	r20, 0x2A	; 42
    21a2:	50 e4       	ldi	r21, 0x40	; 64
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8f ab       	std	Y+55, r24	; 0x37
    21ae:	98 af       	std	Y+56, r25	; 0x38
    21b0:	a9 af       	std	Y+57, r26	; 0x39
    21b2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    21b4:	6f a9       	ldd	r22, Y+55	; 0x37
    21b6:	78 ad       	ldd	r23, Y+56	; 0x38
    21b8:	89 ad       	ldd	r24, Y+57	; 0x39
    21ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	1c f4       	brge	.+6      	; 0x21d2 <LCD_Write_Cmd+0x610>
		__ticks = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	8e ab       	std	Y+54, r24	; 0x36
    21d0:	91 c0       	rjmp	.+290    	; 0x22f4 <LCD_Write_Cmd+0x732>
	else if (__tmp > 255)
    21d2:	6f a9       	ldd	r22, Y+55	; 0x37
    21d4:	78 ad       	ldd	r23, Y+56	; 0x38
    21d6:	89 ad       	ldd	r24, Y+57	; 0x39
    21d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4f e7       	ldi	r20, 0x7F	; 127
    21e0:	53 e4       	ldi	r21, 0x43	; 67
    21e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	0c f0       	brlt	.+2      	; 0x21ec <LCD_Write_Cmd+0x62a>
    21ea:	7b c0       	rjmp	.+246    	; 0x22e2 <LCD_Write_Cmd+0x720>
	{
		_delay_ms(__us / 1000.0);
    21ec:	6b ad       	ldd	r22, Y+59	; 0x3b
    21ee:	7c ad       	ldd	r23, Y+60	; 0x3c
    21f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    21f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	4a e7       	ldi	r20, 0x7A	; 122
    21fa:	54 e4       	ldi	r21, 0x44	; 68
    21fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	8a ab       	std	Y+50, r24	; 0x32
    2206:	9b ab       	std	Y+51, r25	; 0x33
    2208:	ac ab       	std	Y+52, r26	; 0x34
    220a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220c:	6a a9       	ldd	r22, Y+50	; 0x32
    220e:	7b a9       	ldd	r23, Y+51	; 0x33
    2210:	8c a9       	ldd	r24, Y+52	; 0x34
    2212:	9d a9       	ldd	r25, Y+53	; 0x35
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	4a ef       	ldi	r20, 0xFA	; 250
    221a:	54 e4       	ldi	r21, 0x44	; 68
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	8e a7       	std	Y+46, r24	; 0x2e
    2226:	9f a7       	std	Y+47, r25	; 0x2f
    2228:	a8 ab       	std	Y+48, r26	; 0x30
    222a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    222c:	6e a5       	ldd	r22, Y+46	; 0x2e
    222e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2230:	88 a9       	ldd	r24, Y+48	; 0x30
    2232:	99 a9       	ldd	r25, Y+49	; 0x31
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e8       	ldi	r20, 0x80	; 128
    223a:	5f e3       	ldi	r21, 0x3F	; 63
    223c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2240:	88 23       	and	r24, r24
    2242:	2c f4       	brge	.+10     	; 0x224e <LCD_Write_Cmd+0x68c>
		__ticks = 1;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9d a7       	std	Y+45, r25	; 0x2d
    224a:	8c a7       	std	Y+44, r24	; 0x2c
    224c:	3f c0       	rjmp	.+126    	; 0x22cc <LCD_Write_Cmd+0x70a>
	else if (__tmp > 65535)
    224e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2250:	7f a5       	ldd	r23, Y+47	; 0x2f
    2252:	88 a9       	ldd	r24, Y+48	; 0x30
    2254:	99 a9       	ldd	r25, Y+49	; 0x31
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	3f ef       	ldi	r19, 0xFF	; 255
    225a:	4f e7       	ldi	r20, 0x7F	; 127
    225c:	57 e4       	ldi	r21, 0x47	; 71
    225e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2262:	18 16       	cp	r1, r24
    2264:	4c f5       	brge	.+82     	; 0x22b8 <LCD_Write_Cmd+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2266:	6a a9       	ldd	r22, Y+50	; 0x32
    2268:	7b a9       	ldd	r23, Y+51	; 0x33
    226a:	8c a9       	ldd	r24, Y+52	; 0x34
    226c:	9d a9       	ldd	r25, Y+53	; 0x35
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e2       	ldi	r20, 0x20	; 32
    2274:	51 e4       	ldi	r21, 0x41	; 65
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	bc 01       	movw	r22, r24
    2280:	cd 01       	movw	r24, r26
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9d a7       	std	Y+45, r25	; 0x2d
    228c:	8c a7       	std	Y+44, r24	; 0x2c
    228e:	0f c0       	rjmp	.+30     	; 0x22ae <LCD_Write_Cmd+0x6ec>
    2290:	88 ec       	ldi	r24, 0xC8	; 200
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9b a7       	std	Y+43, r25	; 0x2b
    2296:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2298:	8a a5       	ldd	r24, Y+42	; 0x2a
    229a:	9b a5       	ldd	r25, Y+43	; 0x2b
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <LCD_Write_Cmd+0x6da>
    22a0:	9b a7       	std	Y+43, r25	; 0x2b
    22a2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a4:	8c a5       	ldd	r24, Y+44	; 0x2c
    22a6:	9d a5       	ldd	r25, Y+45	; 0x2d
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	9d a7       	std	Y+45, r25	; 0x2d
    22ac:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    22b0:	9d a5       	ldd	r25, Y+45	; 0x2d
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	69 f7       	brne	.-38     	; 0x2290 <LCD_Write_Cmd+0x6ce>
    22b6:	24 c0       	rjmp	.+72     	; 0x2300 <LCD_Write_Cmd+0x73e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b8:	6e a5       	ldd	r22, Y+46	; 0x2e
    22ba:	7f a5       	ldd	r23, Y+47	; 0x2f
    22bc:	88 a9       	ldd	r24, Y+48	; 0x30
    22be:	99 a9       	ldd	r25, Y+49	; 0x31
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9d a7       	std	Y+45, r25	; 0x2d
    22ca:	8c a7       	std	Y+44, r24	; 0x2c
    22cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    22ce:	9d a5       	ldd	r25, Y+45	; 0x2d
    22d0:	99 a7       	std	Y+41, r25	; 0x29
    22d2:	88 a7       	std	Y+40, r24	; 0x28
    22d4:	88 a5       	ldd	r24, Y+40	; 0x28
    22d6:	99 a5       	ldd	r25, Y+41	; 0x29
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <LCD_Write_Cmd+0x716>
    22dc:	99 a7       	std	Y+41, r25	; 0x29
    22de:	88 a7       	std	Y+40, r24	; 0x28
    22e0:	0f c0       	rjmp	.+30     	; 0x2300 <LCD_Write_Cmd+0x73e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22e2:	6f a9       	ldd	r22, Y+55	; 0x37
    22e4:	78 ad       	ldd	r23, Y+56	; 0x38
    22e6:	89 ad       	ldd	r24, Y+57	; 0x39
    22e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	8e ab       	std	Y+54, r24	; 0x36
    22f4:	8e a9       	ldd	r24, Y+54	; 0x36
    22f6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22f8:	8f a1       	ldd	r24, Y+39	; 0x27
    22fa:	8a 95       	dec	r24
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <LCD_Write_Cmd+0x738>
    22fe:	8f a3       	std	Y+39, r24	; 0x27
		_delay_us(1);
		SetPinValue(E,Control_Port,LOW);
    2300:	82 e0       	ldi	r24, 0x02	; 2
    2302:	62 e0       	ldi	r22, 0x02	; 2
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a0 e8       	ldi	r26, 0x80	; 128
    2310:	bf e3       	ldi	r27, 0x3F	; 63
    2312:	8b a3       	std	Y+35, r24	; 0x23
    2314:	9c a3       	std	Y+36, r25	; 0x24
    2316:	ad a3       	std	Y+37, r26	; 0x25
    2318:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    231a:	6b a1       	ldd	r22, Y+35	; 0x23
    231c:	7c a1       	ldd	r23, Y+36	; 0x24
    231e:	8d a1       	ldd	r24, Y+37	; 0x25
    2320:	9e a1       	ldd	r25, Y+38	; 0x26
    2322:	2b ea       	ldi	r18, 0xAB	; 171
    2324:	3a ea       	ldi	r19, 0xAA	; 170
    2326:	4a e2       	ldi	r20, 0x2A	; 42
    2328:	50 e4       	ldi	r21, 0x40	; 64
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8f 8f       	std	Y+31, r24	; 0x1f
    2334:	98 a3       	std	Y+32, r25	; 0x20
    2336:	a9 a3       	std	Y+33, r26	; 0x21
    2338:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    233a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    233c:	78 a1       	ldd	r23, Y+32	; 0x20
    233e:	89 a1       	ldd	r24, Y+33	; 0x21
    2340:	9a a1       	ldd	r25, Y+34	; 0x22
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234e:	88 23       	and	r24, r24
    2350:	1c f4       	brge	.+6      	; 0x2358 <LCD_Write_Cmd+0x796>
		__ticks = 1;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	8e 8f       	std	Y+30, r24	; 0x1e
    2356:	91 c0       	rjmp	.+290    	; 0x247a <LCD_Write_Cmd+0x8b8>
	else if (__tmp > 255)
    2358:	6f 8d       	ldd	r22, Y+31	; 0x1f
    235a:	78 a1       	ldd	r23, Y+32	; 0x20
    235c:	89 a1       	ldd	r24, Y+33	; 0x21
    235e:	9a a1       	ldd	r25, Y+34	; 0x22
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	53 e4       	ldi	r21, 0x43	; 67
    2368:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	0c f0       	brlt	.+2      	; 0x2372 <LCD_Write_Cmd+0x7b0>
    2370:	7b c0       	rjmp	.+246    	; 0x2468 <LCD_Write_Cmd+0x8a6>
	{
		_delay_ms(__us / 1000.0);
    2372:	6b a1       	ldd	r22, Y+35	; 0x23
    2374:	7c a1       	ldd	r23, Y+36	; 0x24
    2376:	8d a1       	ldd	r24, Y+37	; 0x25
    2378:	9e a1       	ldd	r25, Y+38	; 0x26
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4a e7       	ldi	r20, 0x7A	; 122
    2380:	54 e4       	ldi	r21, 0x44	; 68
    2382:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	8a 8f       	std	Y+26, r24	; 0x1a
    238c:	9b 8f       	std	Y+27, r25	; 0x1b
    238e:	ac 8f       	std	Y+28, r26	; 0x1c
    2390:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2392:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2394:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2396:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2398:	9d 8d       	ldd	r25, Y+29	; 0x1d
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a ef       	ldi	r20, 0xFA	; 250
    23a0:	54 e4       	ldi	r21, 0x44	; 68
    23a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8e 8b       	std	Y+22, r24	; 0x16
    23ac:	9f 8b       	std	Y+23, r25	; 0x17
    23ae:	a8 8f       	std	Y+24, r26	; 0x18
    23b0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    23b2:	6e 89       	ldd	r22, Y+22	; 0x16
    23b4:	7f 89       	ldd	r23, Y+23	; 0x17
    23b6:	88 8d       	ldd	r24, Y+24	; 0x18
    23b8:	99 8d       	ldd	r25, Y+25	; 0x19
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e8       	ldi	r20, 0x80	; 128
    23c0:	5f e3       	ldi	r21, 0x3F	; 63
    23c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <LCD_Write_Cmd+0x812>
		__ticks = 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	9d 8b       	std	Y+21, r25	; 0x15
    23d0:	8c 8b       	std	Y+20, r24	; 0x14
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <LCD_Write_Cmd+0x890>
	else if (__tmp > 65535)
    23d4:	6e 89       	ldd	r22, Y+22	; 0x16
    23d6:	7f 89       	ldd	r23, Y+23	; 0x17
    23d8:	88 8d       	ldd	r24, Y+24	; 0x18
    23da:	99 8d       	ldd	r25, Y+25	; 0x19
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	57 e4       	ldi	r21, 0x47	; 71
    23e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	4c f5       	brge	.+82     	; 0x243e <LCD_Write_Cmd+0x87c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23ee:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23f2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e2       	ldi	r20, 0x20	; 32
    23fa:	51 e4       	ldi	r21, 0x41	; 65
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9d 8b       	std	Y+21, r25	; 0x15
    2412:	8c 8b       	std	Y+20, r24	; 0x14
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <LCD_Write_Cmd+0x872>
    2416:	88 ec       	ldi	r24, 0xC8	; 200
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9b 8b       	std	Y+19, r25	; 0x13
    241c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    241e:	8a 89       	ldd	r24, Y+18	; 0x12
    2420:	9b 89       	ldd	r25, Y+19	; 0x13
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_Write_Cmd+0x860>
    2426:	9b 8b       	std	Y+19, r25	; 0x13
    2428:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242a:	8c 89       	ldd	r24, Y+20	; 0x14
    242c:	9d 89       	ldd	r25, Y+21	; 0x15
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	9d 8b       	std	Y+21, r25	; 0x15
    2432:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	8c 89       	ldd	r24, Y+20	; 0x14
    2436:	9d 89       	ldd	r25, Y+21	; 0x15
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	69 f7       	brne	.-38     	; 0x2416 <LCD_Write_Cmd+0x854>
    243c:	24 c0       	rjmp	.+72     	; 0x2486 <LCD_Write_Cmd+0x8c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	6e 89       	ldd	r22, Y+22	; 0x16
    2440:	7f 89       	ldd	r23, Y+23	; 0x17
    2442:	88 8d       	ldd	r24, Y+24	; 0x18
    2444:	99 8d       	ldd	r25, Y+25	; 0x19
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	9d 8b       	std	Y+21, r25	; 0x15
    2450:	8c 8b       	std	Y+20, r24	; 0x14
    2452:	8c 89       	ldd	r24, Y+20	; 0x14
    2454:	9d 89       	ldd	r25, Y+21	; 0x15
    2456:	99 8b       	std	Y+17, r25	; 0x11
    2458:	88 8b       	std	Y+16, r24	; 0x10
    245a:	88 89       	ldd	r24, Y+16	; 0x10
    245c:	99 89       	ldd	r25, Y+17	; 0x11
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <LCD_Write_Cmd+0x89c>
    2462:	99 8b       	std	Y+17, r25	; 0x11
    2464:	88 8b       	std	Y+16, r24	; 0x10
    2466:	0f c0       	rjmp	.+30     	; 0x2486 <LCD_Write_Cmd+0x8c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2468:	6f 8d       	ldd	r22, Y+31	; 0x1f
    246a:	78 a1       	ldd	r23, Y+32	; 0x20
    246c:	89 a1       	ldd	r24, Y+33	; 0x21
    246e:	9a a1       	ldd	r25, Y+34	; 0x22
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	8e 8f       	std	Y+30, r24	; 0x1e
    247a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    247c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    247e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2480:	8a 95       	dec	r24
    2482:	f1 f7       	brne	.-4      	; 0x2480 <LCD_Write_Cmd+0x8be>
    2484:	8f 87       	std	Y+15, r24	; 0x0f
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	a0 e0       	ldi	r26, 0x00	; 0
    248c:	b0 e4       	ldi	r27, 0x40	; 64
    248e:	8b 87       	std	Y+11, r24	; 0x0b
    2490:	9c 87       	std	Y+12, r25	; 0x0c
    2492:	ad 87       	std	Y+13, r26	; 0x0d
    2494:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2496:	6b 85       	ldd	r22, Y+11	; 0x0b
    2498:	7c 85       	ldd	r23, Y+12	; 0x0c
    249a:	8d 85       	ldd	r24, Y+13	; 0x0d
    249c:	9e 85       	ldd	r25, Y+14	; 0x0e
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	4a ef       	ldi	r20, 0xFA	; 250
    24a4:	54 e4       	ldi	r21, 0x44	; 68
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	8f 83       	std	Y+7, r24	; 0x07
    24b0:	98 87       	std	Y+8, r25	; 0x08
    24b2:	a9 87       	std	Y+9, r26	; 0x09
    24b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24b6:	6f 81       	ldd	r22, Y+7	; 0x07
    24b8:	78 85       	ldd	r23, Y+8	; 0x08
    24ba:	89 85       	ldd	r24, Y+9	; 0x09
    24bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e8       	ldi	r20, 0x80	; 128
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ca:	88 23       	and	r24, r24
    24cc:	2c f4       	brge	.+10     	; 0x24d8 <LCD_Write_Cmd+0x916>
		__ticks = 1;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
    24d6:	3f c0       	rjmp	.+126    	; 0x2556 <LCD_Write_Cmd+0x994>
	else if (__tmp > 65535)
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	3f ef       	ldi	r19, 0xFF	; 255
    24e4:	4f e7       	ldi	r20, 0x7F	; 127
    24e6:	57 e4       	ldi	r21, 0x47	; 71
    24e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ec:	18 16       	cp	r1, r24
    24ee:	4c f5       	brge	.+82     	; 0x2542 <LCD_Write_Cmd+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e2       	ldi	r20, 0x20	; 32
    24fe:	51 e4       	ldi	r21, 0x41	; 65
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	bc 01       	movw	r22, r24
    250a:	cd 01       	movw	r24, r26
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	0f c0       	rjmp	.+30     	; 0x2538 <LCD_Write_Cmd+0x976>
    251a:	88 ec       	ldi	r24, 0xC8	; 200
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	9c 83       	std	Y+4, r25	; 0x04
    2520:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	9c 81       	ldd	r25, Y+4	; 0x04
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <LCD_Write_Cmd+0x964>
    252a:	9c 83       	std	Y+4, r25	; 0x04
    252c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	69 f7       	brne	.-38     	; 0x251a <LCD_Write_Cmd+0x958>
    2540:	14 c0       	rjmp	.+40     	; 0x256a <LCD_Write_Cmd+0x9a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2542:	6f 81       	ldd	r22, Y+7	; 0x07
    2544:	78 85       	ldd	r23, Y+8	; 0x08
    2546:	89 85       	ldd	r24, Y+9	; 0x09
    2548:	9a 85       	ldd	r25, Y+10	; 0x0a
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	9e 81       	ldd	r25, Y+6	; 0x06
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <LCD_Write_Cmd+0x9a0>
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
	}

	//wait 2 ms after every instruction
	_delay_ms(2);
}
    256a:	c1 59       	subi	r28, 0x91	; 145
    256c:	df 4f       	sbci	r29, 0xFF	; 255
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	1f 91       	pop	r17
    257e:	0f 91       	pop	r16
    2580:	08 95       	ret

00002582 <LCD_Write_Char>:


void LCD_Write_Char(u8 chr)
{
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	c9 57       	subi	r28, 0x79	; 121
    2590:	d0 40       	sbci	r29, 0x00	; 0
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	fe 01       	movw	r30, r28
    259e:	e7 58       	subi	r30, 0x87	; 135
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 83       	st	Z, r24
	/*Set RS Pin to HIGH*/
	SetPinValue(RS,Control_Port,HIGH);
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	62 e0       	ldi	r22, 0x02	; 2
    25a8:	41 e0       	ldi	r20, 0x01	; 1
    25aa:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
	/*Set RW Pin to LOW*/
	SetPinValue(RW,Control_Port,LOW);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	62 e0       	ldi	r22, 0x02	; 2
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>

	/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
	SetPinValue(PIN4,Data_Port,GET_BIT(chr,4));
    25b8:	fe 01       	movw	r30, r28
    25ba:	e7 58       	subi	r30, 0x87	; 135
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 81       	ld	r24, Z
    25c0:	82 95       	swap	r24
    25c2:	8f 70       	andi	r24, 0x0F	; 15
    25c4:	98 2f       	mov	r25, r24
    25c6:	91 70       	andi	r25, 0x01	; 1
    25c8:	84 e0       	ldi	r24, 0x04	; 4
    25ca:	63 e0       	ldi	r22, 0x03	; 3
    25cc:	49 2f       	mov	r20, r25
    25ce:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
	SetPinValue(PIN5,Data_Port,GET_BIT(chr,5));
    25d2:	fe 01       	movw	r30, r28
    25d4:	e7 58       	subi	r30, 0x87	; 135
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	82 95       	swap	r24
    25dc:	86 95       	lsr	r24
    25de:	87 70       	andi	r24, 0x07	; 7
    25e0:	98 2f       	mov	r25, r24
    25e2:	91 70       	andi	r25, 0x01	; 1
    25e4:	85 e0       	ldi	r24, 0x05	; 5
    25e6:	63 e0       	ldi	r22, 0x03	; 3
    25e8:	49 2f       	mov	r20, r25
    25ea:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
	SetPinValue(PIN6,Data_Port,GET_BIT(chr,6));
    25ee:	fe 01       	movw	r30, r28
    25f0:	e7 58       	subi	r30, 0x87	; 135
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 81       	ld	r24, Z
    25f6:	82 95       	swap	r24
    25f8:	86 95       	lsr	r24
    25fa:	86 95       	lsr	r24
    25fc:	83 70       	andi	r24, 0x03	; 3
    25fe:	98 2f       	mov	r25, r24
    2600:	91 70       	andi	r25, 0x01	; 1
    2602:	86 e0       	ldi	r24, 0x06	; 6
    2604:	63 e0       	ldi	r22, 0x03	; 3
    2606:	49 2f       	mov	r20, r25
    2608:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
	SetPinValue(PIN7,Data_Port,GET_BIT(chr,7));
    260c:	fe 01       	movw	r30, r28
    260e:	e7 58       	subi	r30, 0x87	; 135
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	80 81       	ld	r24, Z
    2614:	98 2f       	mov	r25, r24
    2616:	99 1f       	adc	r25, r25
    2618:	99 27       	eor	r25, r25
    261a:	99 1f       	adc	r25, r25
    261c:	87 e0       	ldi	r24, 0x07	; 7
    261e:	63 e0       	ldi	r22, 0x03	; 3
    2620:	49 2f       	mov	r20, r25
    2622:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>

	/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
	SetPinValue(E,Control_Port,HIGH);
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	62 e0       	ldi	r22, 0x02	; 2
    262a:	41 e0       	ldi	r20, 0x01	; 1
    262c:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
    2630:	fe 01       	movw	r30, r28
    2632:	eb 58       	subi	r30, 0x8B	; 139
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	a0 e8       	ldi	r26, 0x80	; 128
    263c:	bf e3       	ldi	r27, 0x3F	; 63
    263e:	80 83       	st	Z, r24
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	a2 83       	std	Z+2, r26	; 0x02
    2644:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2646:	8e 01       	movw	r16, r28
    2648:	0f 58       	subi	r16, 0x8F	; 143
    264a:	1f 4f       	sbci	r17, 0xFF	; 255
    264c:	fe 01       	movw	r30, r28
    264e:	eb 58       	subi	r30, 0x8B	; 139
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	2b ea       	ldi	r18, 0xAB	; 171
    265c:	3a ea       	ldi	r19, 0xAA	; 170
    265e:	4a e2       	ldi	r20, 0x2A	; 42
    2660:	50 e4       	ldi	r21, 0x40	; 64
    2662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	f8 01       	movw	r30, r16
    266c:	80 83       	st	Z, r24
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	a2 83       	std	Z+2, r26	; 0x02
    2672:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2674:	fe 01       	movw	r30, r28
    2676:	ef 58       	subi	r30, 0x8F	; 143
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	60 81       	ld	r22, Z
    267c:	71 81       	ldd	r23, Z+1	; 0x01
    267e:	82 81       	ldd	r24, Z+2	; 0x02
    2680:	93 81       	ldd	r25, Z+3	; 0x03
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e8       	ldi	r20, 0x80	; 128
    2688:	5f e3       	ldi	r21, 0x3F	; 63
    268a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    268e:	88 23       	and	r24, r24
    2690:	34 f4       	brge	.+12     	; 0x269e <LCD_Write_Char+0x11c>
		__ticks = 1;
    2692:	fe 01       	movw	r30, r28
    2694:	e0 59       	subi	r30, 0x90	; 144
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	80 83       	st	Z, r24
    269c:	e0 c0       	rjmp	.+448    	; 0x285e <LCD_Write_Char+0x2dc>
	else if (__tmp > 255)
    269e:	fe 01       	movw	r30, r28
    26a0:	ef 58       	subi	r30, 0x8F	; 143
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	4f e7       	ldi	r20, 0x7F	; 127
    26b2:	53 e4       	ldi	r21, 0x43	; 67
    26b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	0c f0       	brlt	.+2      	; 0x26be <LCD_Write_Char+0x13c>
    26bc:	c0 c0       	rjmp	.+384    	; 0x283e <LCD_Write_Char+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    26be:	fe 01       	movw	r30, r28
    26c0:	eb 58       	subi	r30, 0x8B	; 139
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	60 81       	ld	r22, Z
    26c6:	71 81       	ldd	r23, Z+1	; 0x01
    26c8:	82 81       	ldd	r24, Z+2	; 0x02
    26ca:	93 81       	ldd	r25, Z+3	; 0x03
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	4a e7       	ldi	r20, 0x7A	; 122
    26d2:	54 e4       	ldi	r21, 0x44	; 68
    26d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	fe 01       	movw	r30, r28
    26de:	e4 59       	subi	r30, 0x94	; 148
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	80 83       	st	Z, r24
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	a2 83       	std	Z+2, r26	; 0x02
    26e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ea:	8e 01       	movw	r16, r28
    26ec:	08 59       	subi	r16, 0x98	; 152
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
    26f0:	fe 01       	movw	r30, r28
    26f2:	e4 59       	subi	r30, 0x94	; 148
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	60 81       	ld	r22, Z
    26f8:	71 81       	ldd	r23, Z+1	; 0x01
    26fa:	82 81       	ldd	r24, Z+2	; 0x02
    26fc:	93 81       	ldd	r25, Z+3	; 0x03
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	4a ef       	ldi	r20, 0xFA	; 250
    2704:	54 e4       	ldi	r21, 0x44	; 68
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	f8 01       	movw	r30, r16
    2710:	80 83       	st	Z, r24
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	a2 83       	std	Z+2, r26	; 0x02
    2716:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2718:	fe 01       	movw	r30, r28
    271a:	e8 59       	subi	r30, 0x98	; 152
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2732:	88 23       	and	r24, r24
    2734:	44 f4       	brge	.+16     	; 0x2746 <LCD_Write_Char+0x1c4>
		__ticks = 1;
    2736:	fe 01       	movw	r30, r28
    2738:	ea 59       	subi	r30, 0x9A	; 154
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	80 83       	st	Z, r24
    2744:	64 c0       	rjmp	.+200    	; 0x280e <LCD_Write_Char+0x28c>
	else if (__tmp > 65535)
    2746:	fe 01       	movw	r30, r28
    2748:	e8 59       	subi	r30, 0x98	; 152
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	60 81       	ld	r22, Z
    274e:	71 81       	ldd	r23, Z+1	; 0x01
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	93 81       	ldd	r25, Z+3	; 0x03
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	3f ef       	ldi	r19, 0xFF	; 255
    2758:	4f e7       	ldi	r20, 0x7F	; 127
    275a:	57 e4       	ldi	r21, 0x47	; 71
    275c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2760:	18 16       	cp	r1, r24
    2762:	0c f0       	brlt	.+2      	; 0x2766 <LCD_Write_Char+0x1e4>
    2764:	43 c0       	rjmp	.+134    	; 0x27ec <LCD_Write_Char+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2766:	fe 01       	movw	r30, r28
    2768:	e4 59       	subi	r30, 0x94	; 148
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	60 81       	ld	r22, Z
    276e:	71 81       	ldd	r23, Z+1	; 0x01
    2770:	82 81       	ldd	r24, Z+2	; 0x02
    2772:	93 81       	ldd	r25, Z+3	; 0x03
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e2       	ldi	r20, 0x20	; 32
    277a:	51 e4       	ldi	r21, 0x41	; 65
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	8e 01       	movw	r16, r28
    2786:	0a 59       	subi	r16, 0x9A	; 154
    2788:	1f 4f       	sbci	r17, 0xFF	; 255
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	f8 01       	movw	r30, r16
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
    279c:	1f c0       	rjmp	.+62     	; 0x27dc <LCD_Write_Char+0x25a>
    279e:	fe 01       	movw	r30, r28
    27a0:	ec 59       	subi	r30, 0x9C	; 156
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	80 83       	st	Z, r24
    27ac:	fe 01       	movw	r30, r28
    27ae:	ec 59       	subi	r30, 0x9C	; 156
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	91 81       	ldd	r25, Z+1	; 0x01
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <LCD_Write_Char+0x234>
    27ba:	fe 01       	movw	r30, r28
    27bc:	ec 59       	subi	r30, 0x9C	; 156
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	91 83       	std	Z+1, r25	; 0x01
    27c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c4:	de 01       	movw	r26, r28
    27c6:	aa 59       	subi	r26, 0x9A	; 154
    27c8:	bf 4f       	sbci	r27, 0xFF	; 255
    27ca:	fe 01       	movw	r30, r28
    27cc:	ea 59       	subi	r30, 0x9A	; 154
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	11 96       	adiw	r26, 0x01	; 1
    27d8:	9c 93       	st	X, r25
    27da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27dc:	fe 01       	movw	r30, r28
    27de:	ea 59       	subi	r30, 0x9A	; 154
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 81       	ld	r24, Z
    27e4:	91 81       	ldd	r25, Z+1	; 0x01
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	d1 f6       	brne	.-76     	; 0x279e <LCD_Write_Char+0x21c>
    27ea:	4b c0       	rjmp	.+150    	; 0x2882 <LCD_Write_Char+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ec:	8e 01       	movw	r16, r28
    27ee:	0a 59       	subi	r16, 0x9A	; 154
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	e8 59       	subi	r30, 0x98	; 152
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	f8 01       	movw	r30, r16
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
    280e:	de 01       	movw	r26, r28
    2810:	ae 59       	subi	r26, 0x9E	; 158
    2812:	bf 4f       	sbci	r27, 0xFF	; 255
    2814:	fe 01       	movw	r30, r28
    2816:	ea 59       	subi	r30, 0x9A	; 154
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	11 96       	adiw	r26, 0x01	; 1
    2820:	9c 93       	st	X, r25
    2822:	8e 93       	st	-X, r24
    2824:	fe 01       	movw	r30, r28
    2826:	ee 59       	subi	r30, 0x9E	; 158
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_Write_Char+0x2ac>
    2832:	fe 01       	movw	r30, r28
    2834:	ee 59       	subi	r30, 0x9E	; 158
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	80 83       	st	Z, r24
    283c:	22 c0       	rjmp	.+68     	; 0x2882 <LCD_Write_Char+0x300>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    283e:	8e 01       	movw	r16, r28
    2840:	00 59       	subi	r16, 0x90	; 144
    2842:	1f 4f       	sbci	r17, 0xFF	; 255
    2844:	fe 01       	movw	r30, r28
    2846:	ef 58       	subi	r30, 0x8F	; 143
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	60 81       	ld	r22, Z
    284c:	71 81       	ldd	r23, Z+1	; 0x01
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	93 81       	ldd	r25, Z+3	; 0x03
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	f8 01       	movw	r30, r16
    285c:	80 83       	st	Z, r24
    285e:	de 01       	movw	r26, r28
    2860:	af 59       	subi	r26, 0x9F	; 159
    2862:	bf 4f       	sbci	r27, 0xFF	; 255
    2864:	fe 01       	movw	r30, r28
    2866:	e0 59       	subi	r30, 0x90	; 144
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    286e:	fe 01       	movw	r30, r28
    2870:	ef 59       	subi	r30, 0x9F	; 159
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 81       	ld	r24, Z
    2876:	8a 95       	dec	r24
    2878:	f1 f7       	brne	.-4      	; 0x2876 <LCD_Write_Char+0x2f4>
    287a:	fe 01       	movw	r30, r28
    287c:	ef 59       	subi	r30, 0x9F	; 159
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 83       	st	Z, r24
	_delay_us(1);
	SetPinValue(E,Control_Port,LOW);
    2882:	82 e0       	ldi	r24, 0x02	; 2
    2884:	62 e0       	ldi	r22, 0x02	; 2
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
    288c:	fe 01       	movw	r30, r28
    288e:	e3 5a       	subi	r30, 0xA3	; 163
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	a0 e8       	ldi	r26, 0x80	; 128
    2898:	bf e3       	ldi	r27, 0x3F	; 63
    289a:	80 83       	st	Z, r24
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	a2 83       	std	Z+2, r26	; 0x02
    28a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28a2:	8e 01       	movw	r16, r28
    28a4:	07 5a       	subi	r16, 0xA7	; 167
    28a6:	1f 4f       	sbci	r17, 0xFF	; 255
    28a8:	fe 01       	movw	r30, r28
    28aa:	e3 5a       	subi	r30, 0xA3	; 163
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	60 81       	ld	r22, Z
    28b0:	71 81       	ldd	r23, Z+1	; 0x01
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	2b ea       	ldi	r18, 0xAB	; 171
    28b8:	3a ea       	ldi	r19, 0xAA	; 170
    28ba:	4a e2       	ldi	r20, 0x2A	; 42
    28bc:	50 e4       	ldi	r21, 0x40	; 64
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	f8 01       	movw	r30, r16
    28c8:	80 83       	st	Z, r24
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	a2 83       	std	Z+2, r26	; 0x02
    28ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28d0:	fe 01       	movw	r30, r28
    28d2:	e7 5a       	subi	r30, 0xA7	; 167
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	60 81       	ld	r22, Z
    28d8:	71 81       	ldd	r23, Z+1	; 0x01
    28da:	82 81       	ldd	r24, Z+2	; 0x02
    28dc:	93 81       	ldd	r25, Z+3	; 0x03
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e8       	ldi	r20, 0x80	; 128
    28e4:	5f e3       	ldi	r21, 0x3F	; 63
    28e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ea:	88 23       	and	r24, r24
    28ec:	34 f4       	brge	.+12     	; 0x28fa <LCD_Write_Char+0x378>
		__ticks = 1;
    28ee:	fe 01       	movw	r30, r28
    28f0:	e8 5a       	subi	r30, 0xA8	; 168
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	80 83       	st	Z, r24
    28f8:	e0 c0       	rjmp	.+448    	; 0x2aba <LCD_Write_Char+0x538>
	else if (__tmp > 255)
    28fa:	fe 01       	movw	r30, r28
    28fc:	e7 5a       	subi	r30, 0xA7	; 167
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	4f e7       	ldi	r20, 0x7F	; 127
    290e:	53 e4       	ldi	r21, 0x43	; 67
    2910:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2914:	18 16       	cp	r1, r24
    2916:	0c f0       	brlt	.+2      	; 0x291a <LCD_Write_Char+0x398>
    2918:	c0 c0       	rjmp	.+384    	; 0x2a9a <LCD_Write_Char+0x518>
	{
		_delay_ms(__us / 1000.0);
    291a:	fe 01       	movw	r30, r28
    291c:	e3 5a       	subi	r30, 0xA3	; 163
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	60 81       	ld	r22, Z
    2922:	71 81       	ldd	r23, Z+1	; 0x01
    2924:	82 81       	ldd	r24, Z+2	; 0x02
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	4a e7       	ldi	r20, 0x7A	; 122
    292e:	54 e4       	ldi	r21, 0x44	; 68
    2930:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	fe 01       	movw	r30, r28
    293a:	ec 5a       	subi	r30, 0xAC	; 172
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	80 83       	st	Z, r24
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	a2 83       	std	Z+2, r26	; 0x02
    2944:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2946:	8e 01       	movw	r16, r28
    2948:	00 5b       	subi	r16, 0xB0	; 176
    294a:	1f 4f       	sbci	r17, 0xFF	; 255
    294c:	fe 01       	movw	r30, r28
    294e:	ec 5a       	subi	r30, 0xAC	; 172
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	4a ef       	ldi	r20, 0xFA	; 250
    2960:	54 e4       	ldi	r21, 0x44	; 68
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	f8 01       	movw	r30, r16
    296c:	80 83       	st	Z, r24
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	a2 83       	std	Z+2, r26	; 0x02
    2972:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2974:	fe 01       	movw	r30, r28
    2976:	e0 5b       	subi	r30, 0xB0	; 176
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e8       	ldi	r20, 0x80	; 128
    2988:	5f e3       	ldi	r21, 0x3F	; 63
    298a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    298e:	88 23       	and	r24, r24
    2990:	44 f4       	brge	.+16     	; 0x29a2 <LCD_Write_Char+0x420>
		__ticks = 1;
    2992:	fe 01       	movw	r30, r28
    2994:	e2 5b       	subi	r30, 0xB2	; 178
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	64 c0       	rjmp	.+200    	; 0x2a6a <LCD_Write_Char+0x4e8>
	else if (__tmp > 65535)
    29a2:	fe 01       	movw	r30, r28
    29a4:	e0 5b       	subi	r30, 0xB0	; 176
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	3f ef       	ldi	r19, 0xFF	; 255
    29b4:	4f e7       	ldi	r20, 0x7F	; 127
    29b6:	57 e4       	ldi	r21, 0x47	; 71
    29b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29bc:	18 16       	cp	r1, r24
    29be:	0c f0       	brlt	.+2      	; 0x29c2 <LCD_Write_Char+0x440>
    29c0:	43 c0       	rjmp	.+134    	; 0x2a48 <LCD_Write_Char+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c2:	fe 01       	movw	r30, r28
    29c4:	ec 5a       	subi	r30, 0xAC	; 172
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	60 81       	ld	r22, Z
    29ca:	71 81       	ldd	r23, Z+1	; 0x01
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e2       	ldi	r20, 0x20	; 32
    29d6:	51 e4       	ldi	r21, 0x41	; 65
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	8e 01       	movw	r16, r28
    29e2:	02 5b       	subi	r16, 0xB2	; 178
    29e4:	1f 4f       	sbci	r17, 0xFF	; 255
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	f8 01       	movw	r30, r16
    29f4:	91 83       	std	Z+1, r25	; 0x01
    29f6:	80 83       	st	Z, r24
    29f8:	1f c0       	rjmp	.+62     	; 0x2a38 <LCD_Write_Char+0x4b6>
    29fa:	fe 01       	movw	r30, r28
    29fc:	e4 5b       	subi	r30, 0xB4	; 180
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	88 ec       	ldi	r24, 0xC8	; 200
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e4 5b       	subi	r30, 0xB4	; 180
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_Write_Char+0x490>
    2a16:	fe 01       	movw	r30, r28
    2a18:	e4 5b       	subi	r30, 0xB4	; 180
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	91 83       	std	Z+1, r25	; 0x01
    2a1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	de 01       	movw	r26, r28
    2a22:	a2 5b       	subi	r26, 0xB2	; 178
    2a24:	bf 4f       	sbci	r27, 0xFF	; 255
    2a26:	fe 01       	movw	r30, r28
    2a28:	e2 5b       	subi	r30, 0xB2	; 178
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	91 81       	ldd	r25, Z+1	; 0x01
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	11 96       	adiw	r26, 0x01	; 1
    2a34:	9c 93       	st	X, r25
    2a36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e2 5b       	subi	r30, 0xB2	; 178
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 81       	ld	r24, Z
    2a40:	91 81       	ldd	r25, Z+1	; 0x01
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	d1 f6       	brne	.-76     	; 0x29fa <LCD_Write_Char+0x478>
    2a46:	4b c0       	rjmp	.+150    	; 0x2ade <LCD_Write_Char+0x55c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a48:	8e 01       	movw	r16, r28
    2a4a:	02 5b       	subi	r16, 0xB2	; 178
    2a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e0 5b       	subi	r30, 0xB0	; 176
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	f8 01       	movw	r30, r16
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	80 83       	st	Z, r24
    2a6a:	de 01       	movw	r26, r28
    2a6c:	a6 5b       	subi	r26, 0xB6	; 182
    2a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a70:	fe 01       	movw	r30, r28
    2a72:	e2 5b       	subi	r30, 0xB2	; 178
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	11 96       	adiw	r26, 0x01	; 1
    2a7c:	9c 93       	st	X, r25
    2a7e:	8e 93       	st	-X, r24
    2a80:	fe 01       	movw	r30, r28
    2a82:	e6 5b       	subi	r30, 0xB6	; 182
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 81       	ld	r24, Z
    2a88:	91 81       	ldd	r25, Z+1	; 0x01
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <LCD_Write_Char+0x508>
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e6 5b       	subi	r30, 0xB6	; 182
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	80 83       	st	Z, r24
    2a98:	22 c0       	rjmp	.+68     	; 0x2ade <LCD_Write_Char+0x55c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	08 5a       	subi	r16, 0xA8	; 168
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e7 5a       	subi	r30, 0xA7	; 167
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	80 83       	st	Z, r24
    2aba:	de 01       	movw	r26, r28
    2abc:	a7 5b       	subi	r26, 0xB7	; 183
    2abe:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e8 5a       	subi	r30, 0xA8	; 168
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2aca:	fe 01       	movw	r30, r28
    2acc:	e7 5b       	subi	r30, 0xB7	; 183
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	8a 95       	dec	r24
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <LCD_Write_Char+0x550>
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e7 5b       	subi	r30, 0xB7	; 183
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	80 83       	st	Z, r24
	_delay_us(1);

	/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
	SetPinValue(PIN4,Data_Port,GET_BIT(chr,0));
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e7 58       	subi	r30, 0x87	; 135
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	80 81       	ld	r24, Z
    2ae6:	98 2f       	mov	r25, r24
    2ae8:	91 70       	andi	r25, 0x01	; 1
    2aea:	84 e0       	ldi	r24, 0x04	; 4
    2aec:	63 e0       	ldi	r22, 0x03	; 3
    2aee:	49 2f       	mov	r20, r25
    2af0:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
	SetPinValue(PIN5,Data_Port,GET_BIT(chr,1));
    2af4:	fe 01       	movw	r30, r28
    2af6:	e7 58       	subi	r30, 0x87	; 135
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	86 95       	lsr	r24
    2afe:	98 2f       	mov	r25, r24
    2b00:	91 70       	andi	r25, 0x01	; 1
    2b02:	85 e0       	ldi	r24, 0x05	; 5
    2b04:	63 e0       	ldi	r22, 0x03	; 3
    2b06:	49 2f       	mov	r20, r25
    2b08:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
	SetPinValue(PIN6,Data_Port,GET_BIT(chr,2));
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e7 58       	subi	r30, 0x87	; 135
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 81       	ld	r24, Z
    2b14:	86 95       	lsr	r24
    2b16:	86 95       	lsr	r24
    2b18:	98 2f       	mov	r25, r24
    2b1a:	91 70       	andi	r25, 0x01	; 1
    2b1c:	86 e0       	ldi	r24, 0x06	; 6
    2b1e:	63 e0       	ldi	r22, 0x03	; 3
    2b20:	49 2f       	mov	r20, r25
    2b22:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
	SetPinValue(PIN7,Data_Port,GET_BIT(chr,3));
    2b26:	fe 01       	movw	r30, r28
    2b28:	e7 58       	subi	r30, 0x87	; 135
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	80 81       	ld	r24, Z
    2b2e:	86 95       	lsr	r24
    2b30:	86 95       	lsr	r24
    2b32:	86 95       	lsr	r24
    2b34:	98 2f       	mov	r25, r24
    2b36:	91 70       	andi	r25, 0x01	; 1
    2b38:	87 e0       	ldi	r24, 0x07	; 7
    2b3a:	63 e0       	ldi	r22, 0x03	; 3
    2b3c:	49 2f       	mov	r20, r25
    2b3e:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>

	/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
	SetPinValue(E,Control_Port,HIGH);
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	62 e0       	ldi	r22, 0x02	; 2
    2b46:	41 e0       	ldi	r20, 0x01	; 1
    2b48:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	eb 5b       	subi	r30, 0xBB	; 187
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	a0 e8       	ldi	r26, 0x80	; 128
    2b58:	bf e3       	ldi	r27, 0x3F	; 63
    2b5a:	80 83       	st	Z, r24
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	a2 83       	std	Z+2, r26	; 0x02
    2b60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b62:	8e 01       	movw	r16, r28
    2b64:	0f 5b       	subi	r16, 0xBF	; 191
    2b66:	1f 4f       	sbci	r17, 0xFF	; 255
    2b68:	fe 01       	movw	r30, r28
    2b6a:	eb 5b       	subi	r30, 0xBB	; 187
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	60 81       	ld	r22, Z
    2b70:	71 81       	ldd	r23, Z+1	; 0x01
    2b72:	82 81       	ldd	r24, Z+2	; 0x02
    2b74:	93 81       	ldd	r25, Z+3	; 0x03
    2b76:	2b ea       	ldi	r18, 0xAB	; 171
    2b78:	3a ea       	ldi	r19, 0xAA	; 170
    2b7a:	4a e2       	ldi	r20, 0x2A	; 42
    2b7c:	50 e4       	ldi	r21, 0x40	; 64
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	f8 01       	movw	r30, r16
    2b88:	80 83       	st	Z, r24
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	a2 83       	std	Z+2, r26	; 0x02
    2b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b90:	fe 01       	movw	r30, r28
    2b92:	ef 5b       	subi	r30, 0xBF	; 191
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	60 81       	ld	r22, Z
    2b98:	71 81       	ldd	r23, Z+1	; 0x01
    2b9a:	82 81       	ldd	r24, Z+2	; 0x02
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e8       	ldi	r20, 0x80	; 128
    2ba4:	5f e3       	ldi	r21, 0x3F	; 63
    2ba6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2baa:	88 23       	and	r24, r24
    2bac:	34 f4       	brge	.+12     	; 0x2bba <LCD_Write_Char+0x638>
		__ticks = 1;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e0 5c       	subi	r30, 0xC0	; 192
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	80 83       	st	Z, r24
    2bb8:	9d c0       	rjmp	.+314    	; 0x2cf4 <LCD_Write_Char+0x772>
	else if (__tmp > 255)
    2bba:	fe 01       	movw	r30, r28
    2bbc:	ef 5b       	subi	r30, 0xBF	; 191
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	60 81       	ld	r22, Z
    2bc2:	71 81       	ldd	r23, Z+1	; 0x01
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	4f e7       	ldi	r20, 0x7F	; 127
    2bce:	53 e4       	ldi	r21, 0x43	; 67
    2bd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd4:	18 16       	cp	r1, r24
    2bd6:	0c f0       	brlt	.+2      	; 0x2bda <LCD_Write_Char+0x658>
    2bd8:	7e c0       	rjmp	.+252    	; 0x2cd6 <LCD_Write_Char+0x754>
	{
		_delay_ms(__us / 1000.0);
    2bda:	fe 01       	movw	r30, r28
    2bdc:	eb 5b       	subi	r30, 0xBB	; 187
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	60 81       	ld	r22, Z
    2be2:	71 81       	ldd	r23, Z+1	; 0x01
    2be4:	82 81       	ldd	r24, Z+2	; 0x02
    2be6:	93 81       	ldd	r25, Z+3	; 0x03
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	4a e7       	ldi	r20, 0x7A	; 122
    2bee:	54 e4       	ldi	r21, 0x44	; 68
    2bf0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	8c af       	std	Y+60, r24	; 0x3c
    2bfa:	9d af       	std	Y+61, r25	; 0x3d
    2bfc:	ae af       	std	Y+62, r26	; 0x3e
    2bfe:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	6c ad       	ldd	r22, Y+60	; 0x3c
    2c02:	7d ad       	ldd	r23, Y+61	; 0x3d
    2c04:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c06:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a ef       	ldi	r20, 0xFA	; 250
    2c0e:	54 e4       	ldi	r21, 0x44	; 68
    2c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	88 af       	std	Y+56, r24	; 0x38
    2c1a:	99 af       	std	Y+57, r25	; 0x39
    2c1c:	aa af       	std	Y+58, r26	; 0x3a
    2c1e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2c20:	68 ad       	ldd	r22, Y+56	; 0x38
    2c22:	79 ad       	ldd	r23, Y+57	; 0x39
    2c24:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c26:	9b ad       	ldd	r25, Y+59	; 0x3b
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	5f e3       	ldi	r21, 0x3F	; 63
    2c30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <LCD_Write_Char+0x6c0>
		__ticks = 1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9f ab       	std	Y+55, r25	; 0x37
    2c3e:	8e ab       	std	Y+54, r24	; 0x36
    2c40:	3f c0       	rjmp	.+126    	; 0x2cc0 <LCD_Write_Char+0x73e>
	else if (__tmp > 65535)
    2c42:	68 ad       	ldd	r22, Y+56	; 0x38
    2c44:	79 ad       	ldd	r23, Y+57	; 0x39
    2c46:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c48:	9b ad       	ldd	r25, Y+59	; 0x3b
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	3f ef       	ldi	r19, 0xFF	; 255
    2c4e:	4f e7       	ldi	r20, 0x7F	; 127
    2c50:	57 e4       	ldi	r21, 0x47	; 71
    2c52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c56:	18 16       	cp	r1, r24
    2c58:	4c f5       	brge	.+82     	; 0x2cac <LCD_Write_Char+0x72a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5a:	6c ad       	ldd	r22, Y+60	; 0x3c
    2c5c:	7d ad       	ldd	r23, Y+61	; 0x3d
    2c5e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c60:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e2       	ldi	r20, 0x20	; 32
    2c68:	51 e4       	ldi	r21, 0x41	; 65
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9f ab       	std	Y+55, r25	; 0x37
    2c80:	8e ab       	std	Y+54, r24	; 0x36
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <LCD_Write_Char+0x720>
    2c84:	88 ec       	ldi	r24, 0xC8	; 200
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9d ab       	std	Y+53, r25	; 0x35
    2c8a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c8c:	8c a9       	ldd	r24, Y+52	; 0x34
    2c8e:	9d a9       	ldd	r25, Y+53	; 0x35
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <LCD_Write_Char+0x70e>
    2c94:	9d ab       	std	Y+53, r25	; 0x35
    2c96:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c98:	8e a9       	ldd	r24, Y+54	; 0x36
    2c9a:	9f a9       	ldd	r25, Y+55	; 0x37
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9f ab       	std	Y+55, r25	; 0x37
    2ca0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca2:	8e a9       	ldd	r24, Y+54	; 0x36
    2ca4:	9f a9       	ldd	r25, Y+55	; 0x37
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <LCD_Write_Char+0x702>
    2caa:	2d c0       	rjmp	.+90     	; 0x2d06 <LCD_Write_Char+0x784>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cac:	68 ad       	ldd	r22, Y+56	; 0x38
    2cae:	79 ad       	ldd	r23, Y+57	; 0x39
    2cb0:	8a ad       	ldd	r24, Y+58	; 0x3a
    2cb2:	9b ad       	ldd	r25, Y+59	; 0x3b
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9f ab       	std	Y+55, r25	; 0x37
    2cbe:	8e ab       	std	Y+54, r24	; 0x36
    2cc0:	8e a9       	ldd	r24, Y+54	; 0x36
    2cc2:	9f a9       	ldd	r25, Y+55	; 0x37
    2cc4:	9b ab       	std	Y+51, r25	; 0x33
    2cc6:	8a ab       	std	Y+50, r24	; 0x32
    2cc8:	8a a9       	ldd	r24, Y+50	; 0x32
    2cca:	9b a9       	ldd	r25, Y+51	; 0x33
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <LCD_Write_Char+0x74a>
    2cd0:	9b ab       	std	Y+51, r25	; 0x33
    2cd2:	8a ab       	std	Y+50, r24	; 0x32
    2cd4:	18 c0       	rjmp	.+48     	; 0x2d06 <LCD_Write_Char+0x784>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	ef 5b       	subi	r30, 0xBF	; 191
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	60 81       	ld	r22, Z
    2cde:	71 81       	ldd	r23, Z+1	; 0x01
    2ce0:	82 81       	ldd	r24, Z+2	; 0x02
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	fe 01       	movw	r30, r28
    2cee:	e0 5c       	subi	r30, 0xC0	; 192
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 83       	st	Z, r24
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e0 5c       	subi	r30, 0xC0	; 192
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cfe:	89 a9       	ldd	r24, Y+49	; 0x31
    2d00:	8a 95       	dec	r24
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <LCD_Write_Char+0x77e>
    2d04:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	SetPinValue(E,Control_Port,LOW);
    2d06:	82 e0       	ldi	r24, 0x02	; 2
    2d08:	62 e0       	ldi	r22, 0x02	; 2
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	0e 94 2c 07 	call	0xe58	; 0xe58 <SetPinValue>
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	a0 e8       	ldi	r26, 0x80	; 128
    2d16:	bf e3       	ldi	r27, 0x3F	; 63
    2d18:	8d a7       	std	Y+45, r24	; 0x2d
    2d1a:	9e a7       	std	Y+46, r25	; 0x2e
    2d1c:	af a7       	std	Y+47, r26	; 0x2f
    2d1e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d20:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d22:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d26:	98 a9       	ldd	r25, Y+48	; 0x30
    2d28:	2b ea       	ldi	r18, 0xAB	; 171
    2d2a:	3a ea       	ldi	r19, 0xAA	; 170
    2d2c:	4a e2       	ldi	r20, 0x2A	; 42
    2d2e:	50 e4       	ldi	r21, 0x40	; 64
    2d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	89 a7       	std	Y+41, r24	; 0x29
    2d3a:	9a a7       	std	Y+42, r25	; 0x2a
    2d3c:	ab a7       	std	Y+43, r26	; 0x2b
    2d3e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2d40:	69 a5       	ldd	r22, Y+41	; 0x29
    2d42:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d44:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d46:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e8       	ldi	r20, 0x80	; 128
    2d4e:	5f e3       	ldi	r21, 0x3F	; 63
    2d50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d54:	88 23       	and	r24, r24
    2d56:	1c f4       	brge	.+6      	; 0x2d5e <LCD_Write_Char+0x7dc>
		__ticks = 1;
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	88 a7       	std	Y+40, r24	; 0x28
    2d5c:	91 c0       	rjmp	.+290    	; 0x2e80 <LCD_Write_Char+0x8fe>
	else if (__tmp > 255)
    2d5e:	69 a5       	ldd	r22, Y+41	; 0x29
    2d60:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d62:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d64:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	4f e7       	ldi	r20, 0x7F	; 127
    2d6c:	53 e4       	ldi	r21, 0x43	; 67
    2d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d72:	18 16       	cp	r1, r24
    2d74:	0c f0       	brlt	.+2      	; 0x2d78 <LCD_Write_Char+0x7f6>
    2d76:	7b c0       	rjmp	.+246    	; 0x2e6e <LCD_Write_Char+0x8ec>
	{
		_delay_ms(__us / 1000.0);
    2d78:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d7a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	4a e7       	ldi	r20, 0x7A	; 122
    2d86:	54 e4       	ldi	r21, 0x44	; 68
    2d88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	8c a3       	std	Y+36, r24	; 0x24
    2d92:	9d a3       	std	Y+37, r25	; 0x25
    2d94:	ae a3       	std	Y+38, r26	; 0x26
    2d96:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d98:	6c a1       	ldd	r22, Y+36	; 0x24
    2d9a:	7d a1       	ldd	r23, Y+37	; 0x25
    2d9c:	8e a1       	ldd	r24, Y+38	; 0x26
    2d9e:	9f a1       	ldd	r25, Y+39	; 0x27
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	4a ef       	ldi	r20, 0xFA	; 250
    2da6:	54 e4       	ldi	r21, 0x44	; 68
    2da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	88 a3       	std	Y+32, r24	; 0x20
    2db2:	99 a3       	std	Y+33, r25	; 0x21
    2db4:	aa a3       	std	Y+34, r26	; 0x22
    2db6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2db8:	68 a1       	ldd	r22, Y+32	; 0x20
    2dba:	79 a1       	ldd	r23, Y+33	; 0x21
    2dbc:	8a a1       	ldd	r24, Y+34	; 0x22
    2dbe:	9b a1       	ldd	r25, Y+35	; 0x23
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e8       	ldi	r20, 0x80	; 128
    2dc6:	5f e3       	ldi	r21, 0x3F	; 63
    2dc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dcc:	88 23       	and	r24, r24
    2dce:	2c f4       	brge	.+10     	; 0x2dda <LCD_Write_Char+0x858>
		__ticks = 1;
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	9f 8f       	std	Y+31, r25	; 0x1f
    2dd6:	8e 8f       	std	Y+30, r24	; 0x1e
    2dd8:	3f c0       	rjmp	.+126    	; 0x2e58 <LCD_Write_Char+0x8d6>
	else if (__tmp > 65535)
    2dda:	68 a1       	ldd	r22, Y+32	; 0x20
    2ddc:	79 a1       	ldd	r23, Y+33	; 0x21
    2dde:	8a a1       	ldd	r24, Y+34	; 0x22
    2de0:	9b a1       	ldd	r25, Y+35	; 0x23
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	3f ef       	ldi	r19, 0xFF	; 255
    2de6:	4f e7       	ldi	r20, 0x7F	; 127
    2de8:	57 e4       	ldi	r21, 0x47	; 71
    2dea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dee:	18 16       	cp	r1, r24
    2df0:	4c f5       	brge	.+82     	; 0x2e44 <LCD_Write_Char+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df2:	6c a1       	ldd	r22, Y+36	; 0x24
    2df4:	7d a1       	ldd	r23, Y+37	; 0x25
    2df6:	8e a1       	ldd	r24, Y+38	; 0x26
    2df8:	9f a1       	ldd	r25, Y+39	; 0x27
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e2       	ldi	r20, 0x20	; 32
    2e00:	51 e4       	ldi	r21, 0x41	; 65
    2e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	9f 8f       	std	Y+31, r25	; 0x1f
    2e18:	8e 8f       	std	Y+30, r24	; 0x1e
    2e1a:	0f c0       	rjmp	.+30     	; 0x2e3a <LCD_Write_Char+0x8b8>
    2e1c:	88 ec       	ldi	r24, 0xC8	; 200
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	9d 8f       	std	Y+29, r25	; 0x1d
    2e22:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e26:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	f1 f7       	brne	.-4      	; 0x2e28 <LCD_Write_Char+0x8a6>
    2e2c:	9d 8f       	std	Y+29, r25	; 0x1d
    2e2e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	9f 8f       	std	Y+31, r25	; 0x1f
    2e38:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	69 f7       	brne	.-38     	; 0x2e1c <LCD_Write_Char+0x89a>
    2e42:	24 c0       	rjmp	.+72     	; 0x2e8c <LCD_Write_Char+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e44:	68 a1       	ldd	r22, Y+32	; 0x20
    2e46:	79 a1       	ldd	r23, Y+33	; 0x21
    2e48:	8a a1       	ldd	r24, Y+34	; 0x22
    2e4a:	9b a1       	ldd	r25, Y+35	; 0x23
    2e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	9f 8f       	std	Y+31, r25	; 0x1f
    2e56:	8e 8f       	std	Y+30, r24	; 0x1e
    2e58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e5c:	9b 8f       	std	Y+27, r25	; 0x1b
    2e5e:	8a 8f       	std	Y+26, r24	; 0x1a
    2e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e62:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <LCD_Write_Char+0x8e2>
    2e68:	9b 8f       	std	Y+27, r25	; 0x1b
    2e6a:	8a 8f       	std	Y+26, r24	; 0x1a
    2e6c:	0f c0       	rjmp	.+30     	; 0x2e8c <LCD_Write_Char+0x90a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e6e:	69 a5       	ldd	r22, Y+41	; 0x29
    2e70:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	88 a7       	std	Y+40, r24	; 0x28
    2e80:	88 a5       	ldd	r24, Y+40	; 0x28
    2e82:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e84:	89 8d       	ldd	r24, Y+25	; 0x19
    2e86:	8a 95       	dec	r24
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <LCD_Write_Char+0x904>
    2e8a:	89 8f       	std	Y+25, r24	; 0x19
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	a8 ec       	ldi	r26, 0xC8	; 200
    2e92:	b2 e4       	ldi	r27, 0x42	; 66
    2e94:	8d 8b       	std	Y+21, r24	; 0x15
    2e96:	9e 8b       	std	Y+22, r25	; 0x16
    2e98:	af 8b       	std	Y+23, r26	; 0x17
    2e9a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea4:	2b ea       	ldi	r18, 0xAB	; 171
    2ea6:	3a ea       	ldi	r19, 0xAA	; 170
    2ea8:	4a e2       	ldi	r20, 0x2A	; 42
    2eaa:	50 e4       	ldi	r21, 0x40	; 64
    2eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	89 8b       	std	Y+17, r24	; 0x11
    2eb6:	9a 8b       	std	Y+18, r25	; 0x12
    2eb8:	ab 8b       	std	Y+19, r26	; 0x13
    2eba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ebc:	69 89       	ldd	r22, Y+17	; 0x11
    2ebe:	7a 89       	ldd	r23, Y+18	; 0x12
    2ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	40 e8       	ldi	r20, 0x80	; 128
    2eca:	5f e3       	ldi	r21, 0x3F	; 63
    2ecc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed0:	88 23       	and	r24, r24
    2ed2:	1c f4       	brge	.+6      	; 0x2eda <LCD_Write_Char+0x958>
		__ticks = 1;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	88 8b       	std	Y+16, r24	; 0x10
    2ed8:	91 c0       	rjmp	.+290    	; 0x2ffc <LCD_Write_Char+0xa7a>
	else if (__tmp > 255)
    2eda:	69 89       	ldd	r22, Y+17	; 0x11
    2edc:	7a 89       	ldd	r23, Y+18	; 0x12
    2ede:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	53 e4       	ldi	r21, 0x43	; 67
    2eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	0c f0       	brlt	.+2      	; 0x2ef4 <LCD_Write_Char+0x972>
    2ef2:	7b c0       	rjmp	.+246    	; 0x2fea <LCD_Write_Char+0xa68>
	{
		_delay_ms(__us / 1000.0);
    2ef4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ef6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef8:	8f 89       	ldd	r24, Y+23	; 0x17
    2efa:	98 8d       	ldd	r25, Y+24	; 0x18
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a e7       	ldi	r20, 0x7A	; 122
    2f02:	54 e4       	ldi	r21, 0x44	; 68
    2f04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8c 87       	std	Y+12, r24	; 0x0c
    2f0e:	9d 87       	std	Y+13, r25	; 0x0d
    2f10:	ae 87       	std	Y+14, r26	; 0x0e
    2f12:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f14:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f16:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f18:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	4a ef       	ldi	r20, 0xFA	; 250
    2f22:	54 e4       	ldi	r21, 0x44	; 68
    2f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	88 87       	std	Y+8, r24	; 0x08
    2f2e:	99 87       	std	Y+9, r25	; 0x09
    2f30:	aa 87       	std	Y+10, r26	; 0x0a
    2f32:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f34:	68 85       	ldd	r22, Y+8	; 0x08
    2f36:	79 85       	ldd	r23, Y+9	; 0x09
    2f38:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e8       	ldi	r20, 0x80	; 128
    2f42:	5f e3       	ldi	r21, 0x3F	; 63
    2f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f48:	88 23       	and	r24, r24
    2f4a:	2c f4       	brge	.+10     	; 0x2f56 <LCD_Write_Char+0x9d4>
		__ticks = 1;
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	9f 83       	std	Y+7, r25	; 0x07
    2f52:	8e 83       	std	Y+6, r24	; 0x06
    2f54:	3f c0       	rjmp	.+126    	; 0x2fd4 <LCD_Write_Char+0xa52>
	else if (__tmp > 65535)
    2f56:	68 85       	ldd	r22, Y+8	; 0x08
    2f58:	79 85       	ldd	r23, Y+9	; 0x09
    2f5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	3f ef       	ldi	r19, 0xFF	; 255
    2f62:	4f e7       	ldi	r20, 0x7F	; 127
    2f64:	57 e4       	ldi	r21, 0x47	; 71
    2f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f6a:	18 16       	cp	r1, r24
    2f6c:	4c f5       	brge	.+82     	; 0x2fc0 <LCD_Write_Char+0xa3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f70:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f72:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f74:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e2       	ldi	r20, 0x20	; 32
    2f7c:	51 e4       	ldi	r21, 0x41	; 65
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	bc 01       	movw	r22, r24
    2f88:	cd 01       	movw	r24, r26
    2f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	9f 83       	std	Y+7, r25	; 0x07
    2f94:	8e 83       	std	Y+6, r24	; 0x06
    2f96:	0f c0       	rjmp	.+30     	; 0x2fb6 <LCD_Write_Char+0xa34>
    2f98:	88 ec       	ldi	r24, 0xC8	; 200
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	9d 83       	std	Y+5, r25	; 0x05
    2f9e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <LCD_Write_Char+0xa22>
    2fa8:	9d 83       	std	Y+5, r25	; 0x05
    2faa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fac:	8e 81       	ldd	r24, Y+6	; 0x06
    2fae:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	9f 83       	std	Y+7, r25	; 0x07
    2fb4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb8:	9f 81       	ldd	r25, Y+7	; 0x07
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	69 f7       	brne	.-38     	; 0x2f98 <LCD_Write_Char+0xa16>
    2fbe:	24 c0       	rjmp	.+72     	; 0x3008 <LCD_Write_Char+0xa86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc0:	68 85       	ldd	r22, Y+8	; 0x08
    2fc2:	79 85       	ldd	r23, Y+9	; 0x09
    2fc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	9f 83       	std	Y+7, r25	; 0x07
    2fd2:	8e 83       	std	Y+6, r24	; 0x06
    2fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fd8:	9b 83       	std	Y+3, r25	; 0x03
    2fda:	8a 83       	std	Y+2, r24	; 0x02
    2fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fde:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <LCD_Write_Char+0xa5e>
    2fe4:	9b 83       	std	Y+3, r25	; 0x03
    2fe6:	8a 83       	std	Y+2, r24	; 0x02
    2fe8:	0f c0       	rjmp	.+30     	; 0x3008 <LCD_Write_Char+0xa86>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fea:	69 89       	ldd	r22, Y+17	; 0x11
    2fec:	7a 89       	ldd	r23, Y+18	; 0x12
    2fee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	88 8b       	std	Y+16, r24	; 0x10
    2ffc:	88 89       	ldd	r24, Y+16	; 0x10
    2ffe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	8a 95       	dec	r24
    3004:	f1 f7       	brne	.-4      	; 0x3002 <LCD_Write_Char+0xa80>
    3006:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

	//wait 2 ms after every instruction
	_delay_us(100);
}
    3008:	c7 58       	subi	r28, 0x87	; 135
    300a:	df 4f       	sbci	r29, 0xFF	; 255
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	08 95       	ret

00003020 <LCD_Write_String>:

void LCD_Write_String(u8* str)
{
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	00 d0       	rcall	.+0      	; 0x3026 <LCD_Write_String+0x6>
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	9a 83       	std	Y+2, r25	; 0x02
    302c:	89 83       	std	Y+1, r24	; 0x01
    302e:	0a c0       	rjmp	.+20     	; 0x3044 <LCD_Write_String+0x24>
	while(*str)
	{
		LCD_Write_Char(*str);
    3030:	e9 81       	ldd	r30, Y+1	; 0x01
    3032:	fa 81       	ldd	r31, Y+2	; 0x02
    3034:	80 81       	ld	r24, Z
    3036:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
		str++;
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	9a 81       	ldd	r25, Y+2	; 0x02
    303e:	01 96       	adiw	r24, 0x01	; 1
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}

void LCD_Write_String(u8* str)
{
	while(*str)
    3044:	e9 81       	ldd	r30, Y+1	; 0x01
    3046:	fa 81       	ldd	r31, Y+2	; 0x02
    3048:	80 81       	ld	r24, Z
    304a:	88 23       	and	r24, r24
    304c:	89 f7       	brne	.-30     	; 0x3030 <LCD_Write_String+0x10>
	{
		LCD_Write_Char(*str);
		str++;
	}
}
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	08 95       	ret

00003058 <LCD_Function_Set>:


void LCD_Function_Set()
{
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
	LCD_Write_Cmd(0x20);
    3060:	80 e2       	ldi	r24, 0x20	; 32
    3062:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x20);
    3066:	80 e2       	ldi	r24, 0x20	; 32
    3068:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x80);
    306c:	80 e8       	ldi	r24, 0x80	; 128
    306e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
}
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <LCD_Display_Control>:

void LCD_Display_Control(u8 display,u8 cursor,u8 blinking)
{
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	00 d0       	rcall	.+0      	; 0x307e <LCD_Display_Control+0x6>
    307e:	0f 92       	push	r0
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	89 83       	std	Y+1, r24	; 0x01
    3086:	6a 83       	std	Y+2, r22	; 0x02
    3088:	4b 83       	std	Y+3, r20	; 0x03
	if(display == ON && cursor == ON && blinking == ON)
    308a:	89 81       	ldd	r24, Y+1	; 0x01
    308c:	81 30       	cpi	r24, 0x01	; 1
    308e:	69 f4       	brne	.+26     	; 0x30aa <LCD_Display_Control+0x32>
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	81 30       	cpi	r24, 0x01	; 1
    3094:	51 f4       	brne	.+20     	; 0x30aa <LCD_Display_Control+0x32>
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	81 30       	cpi	r24, 0x01	; 1
    309a:	39 f4       	brne	.+14     	; 0x30aa <LCD_Display_Control+0x32>
	{
		LCD_Write_Cmd(0x00);
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
		LCD_Write_Cmd(0xF0);
    30a2:	80 ef       	ldi	r24, 0xF0	; 240
    30a4:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
    30a8:	3f c0       	rjmp	.+126    	; 0x3128 <LCD_Display_Control+0xb0>
	}

	else if(display == ON && cursor == OFF && blinking == OFF)
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	81 30       	cpi	r24, 0x01	; 1
    30ae:	69 f4       	brne	.+26     	; 0x30ca <LCD_Display_Control+0x52>
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	88 23       	and	r24, r24
    30b4:	51 f4       	brne	.+20     	; 0x30ca <LCD_Display_Control+0x52>
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	88 23       	and	r24, r24
    30ba:	39 f4       	brne	.+14     	; 0x30ca <LCD_Display_Control+0x52>
	{
		LCD_Write_Cmd(0x00);
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
		LCD_Write_Cmd(0xC0);
    30c2:	80 ec       	ldi	r24, 0xC0	; 192
    30c4:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
    30c8:	2f c0       	rjmp	.+94     	; 0x3128 <LCD_Display_Control+0xb0>
	}
	else if(display == ON && cursor == ON && blinking == OFF)
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	81 30       	cpi	r24, 0x01	; 1
    30ce:	69 f4       	brne	.+26     	; 0x30ea <LCD_Display_Control+0x72>
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	81 30       	cpi	r24, 0x01	; 1
    30d4:	51 f4       	brne	.+20     	; 0x30ea <LCD_Display_Control+0x72>
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	88 23       	and	r24, r24
    30da:	39 f4       	brne	.+14     	; 0x30ea <LCD_Display_Control+0x72>
	{
		LCD_Write_Cmd(0x00);
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
		LCD_Write_Cmd(0xE0);
    30e2:	80 ee       	ldi	r24, 0xE0	; 224
    30e4:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
    30e8:	1f c0       	rjmp	.+62     	; 0x3128 <LCD_Display_Control+0xb0>
	}
	else if(display == ON && cursor == OFF && blinking == ON)
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	81 30       	cpi	r24, 0x01	; 1
    30ee:	69 f4       	brne	.+26     	; 0x310a <LCD_Display_Control+0x92>
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	88 23       	and	r24, r24
    30f4:	51 f4       	brne	.+20     	; 0x310a <LCD_Display_Control+0x92>
    30f6:	8b 81       	ldd	r24, Y+3	; 0x03
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	39 f4       	brne	.+14     	; 0x310a <LCD_Display_Control+0x92>
	{
		LCD_Write_Cmd(0x00);
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
		LCD_Write_Cmd(0xD0);
    3102:	80 ed       	ldi	r24, 0xD0	; 208
    3104:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
    3108:	0f c0       	rjmp	.+30     	; 0x3128 <LCD_Display_Control+0xb0>
	}
	else if(display == OFF && cursor == OFF && blinking == OFF)
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	88 23       	and	r24, r24
    310e:	61 f4       	brne	.+24     	; 0x3128 <LCD_Display_Control+0xb0>
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	88 23       	and	r24, r24
    3114:	49 f4       	brne	.+18     	; 0x3128 <LCD_Display_Control+0xb0>
    3116:	8b 81       	ldd	r24, Y+3	; 0x03
    3118:	88 23       	and	r24, r24
    311a:	31 f4       	brne	.+12     	; 0x3128 <LCD_Display_Control+0xb0>
	{
		LCD_Write_Cmd(0x00);
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
		LCD_Write_Cmd(0x80);
    3122:	80 e8       	ldi	r24, 0x80	; 128
    3124:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
	}

}
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	0f 90       	pop	r0
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <LCD_Clear_Screen>:

void LCD_Clear_Screen()
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
	LCD_Write_Cmd(0x00);
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x01);
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
}
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <LCD_EntryMode>:

void LCD_EntryMode()
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
	LCD_Write_Cmd(0x00);
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x60);
    315c:	80 e6       	ldi	r24, 0x60	; 96
    315e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
}
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <LCD_GoTo_XY>:

void LCD_GoTo_XY(u8 x,u8 y)
{
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	00 d0       	rcall	.+0      	; 0x316e <LCD_GoTo_XY+0x6>
    316e:	00 d0       	rcall	.+0      	; 0x3170 <LCD_GoTo_XY+0x8>
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	89 83       	std	Y+1, r24	; 0x01
    3176:	6a 83       	std	Y+2, r22	; 0x02
	switch(x)
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	28 2f       	mov	r18, r24
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	3c 83       	std	Y+4, r19	; 0x04
    3180:	2b 83       	std	Y+3, r18	; 0x03
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	9c 81       	ldd	r25, Y+4	; 0x04
    3186:	81 30       	cpi	r24, 0x01	; 1
    3188:	91 05       	cpc	r25, r1
    318a:	31 f0       	breq	.+12     	; 0x3198 <LCD_GoTo_XY+0x30>
    318c:	2b 81       	ldd	r18, Y+3	; 0x03
    318e:	3c 81       	ldd	r19, Y+4	; 0x04
    3190:	22 30       	cpi	r18, 0x02	; 2
    3192:	31 05       	cpc	r19, r1
    3194:	31 f0       	breq	.+12     	; 0x31a2 <LCD_GoTo_XY+0x3a>
    3196:	09 c0       	rjmp	.+18     	; 0x31aa <LCD_GoTo_XY+0x42>
	{
	case 1:
		LCD_Write_Cmd(y+127);
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	81 58       	subi	r24, 0x81	; 129
    319c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
    31a0:	04 c0       	rjmp	.+8      	; 0x31aa <LCD_GoTo_XY+0x42>
		break;
	case 2:
		LCD_Write_Cmd(y+191);
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	81 54       	subi	r24, 0x41	; 65
    31a6:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
		break;
	}
}
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	08 95       	ret

000031b8 <LCD_ClearLine>:

void LCD_ClearLine(u8 line)
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	0f 92       	push	r0
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	89 83       	std	Y+1, r24	; 0x01
	LCD_GoTo_XY(line,1);
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	61 e0       	ldi	r22, 0x01	; 1
    31c8:	0e 94 b4 18 	call	0x3168	; 0x3168 <LCD_GoTo_XY>
	LCD_Write_String("                ");
    31cc:	80 e6       	ldi	r24, 0x60	; 96
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
}
    31d4:	0f 90       	pop	r0
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <LCD_Cursor_Shift>:


void LCD_Cursor_Shift(unsigned char direction)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	0f 92       	push	r0
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	89 83       	std	Y+1, r24	; 0x01
	if (direction == RIGHT)
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	81 30       	cpi	r24, 0x01	; 1
    31ec:	21 f4       	brne	.+8      	; 0x31f6 <LCD_Cursor_Shift+0x1a>
	{
		LCD_Write_Cmd(0x14);				// shift cursor 1 step to right
    31ee:	84 e1       	ldi	r24, 0x14	; 20
    31f0:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
    31f4:	06 c0       	rjmp	.+12     	; 0x3202 <LCD_Cursor_Shift+0x26>
	}
	else if (direction == LEFT)
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	88 23       	and	r24, r24
    31fa:	19 f4       	brne	.+6      	; 0x3202 <LCD_Cursor_Shift+0x26>
	{
		LCD_Write_Cmd(0x10);				// shift cursor 1 step to left
    31fc:	80 e1       	ldi	r24, 0x10	; 16
    31fe:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
	}
}
    3202:	0f 90       	pop	r0
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <LCD_Display_Shift>:


void LCD_Display_Shift(unsigned char direction)
{
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	0f 92       	push	r0
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	89 83       	std	Y+1, r24	; 0x01
	if (direction == RIGHT)
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	81 30       	cpi	r24, 0x01	; 1
    321a:	21 f4       	brne	.+8      	; 0x3224 <LCD_Display_Shift+0x1a>
	{
		LCD_Write_Cmd(0x1c);				// shift data on LCD 1 step to right
    321c:	8c e1       	ldi	r24, 0x1C	; 28
    321e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
    3222:	06 c0       	rjmp	.+12     	; 0x3230 <LCD_Display_Shift+0x26>
	}
	else if (direction == LEFT)
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	88 23       	and	r24, r24
    3228:	19 f4       	brne	.+6      	; 0x3230 <LCD_Display_Shift+0x26>
	{
		LCD_Write_Cmd(0x18);				// shift data on LCD 1 step to left
    322a:	88 e1       	ldi	r24, 0x18	; 24
    322c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
	}
}
    3230:	0f 90       	pop	r0
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	08 95       	ret

00003238 <LCD_WriteExtraChar>:

void LCD_WriteExtraChar (u8* ExtraChar,u8 Y,u8 X)
{
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	64 97       	sbiw	r28, 0x14	; 20
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	9a 8b       	std	Y+18, r25	; 0x12
    324e:	89 8b       	std	Y+17, r24	; 0x11
    3250:	6b 8b       	std	Y+19, r22	; 0x13
    3252:	4c 8b       	std	Y+20, r20	; 0x14
    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_Write_Cmd(64);
    3254:	80 e4       	ldi	r24, 0x40	; 64
    3256:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    325a:	18 8a       	std	Y+16, r1	; 0x10
    325c:	0e c0       	rjmp	.+28     	; 0x327a <LCD_WriteExtraChar+0x42>
	{
		LCD_Write_Char(ExtraChar[iteration1]);
    325e:	88 89       	ldd	r24, Y+16	; 0x10
    3260:	28 2f       	mov	r18, r24
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	89 89       	ldd	r24, Y+17	; 0x11
    3266:	9a 89       	ldd	r25, Y+18	; 0x12
    3268:	fc 01       	movw	r30, r24
    326a:	e2 0f       	add	r30, r18
    326c:	f3 1f       	adc	r31, r19
    326e:	80 81       	ld	r24, Z
    3270:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
{
    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_Write_Cmd(64);
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    3274:	88 89       	ldd	r24, Y+16	; 0x10
    3276:	8f 5f       	subi	r24, 0xFF	; 255
    3278:	88 8b       	std	Y+16, r24	; 0x10
    327a:	88 89       	ldd	r24, Y+16	; 0x10
    327c:	80 34       	cpi	r24, 0x40	; 64
    327e:	78 f3       	brcs	.-34     	; 0x325e <LCD_WriteExtraChar+0x26>
	{
		LCD_Write_Char(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_Write_Cmd(128);
    3280:	80 e8       	ldi	r24, 0x80	; 128
    3282:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Write_Cmd>
	LCD_GoTo_XY(Y,X);
    3286:	8b 89       	ldd	r24, Y+19	; 0x13
    3288:	6c 89       	ldd	r22, Y+20	; 0x14
    328a:	0e 94 b4 18 	call	0x3168	; 0x3168 <LCD_GoTo_XY>
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    328e:	1f 86       	std	Y+15, r1	; 0x0f
    3290:	78 c0       	rjmp	.+240    	; 0x3382 <LCD_WriteExtraChar+0x14a>
	{
		/* Write bytes of DDRAM */
		LCD_Write_Char(iteration2);
    3292:	8f 85       	ldd	r24, Y+15	; 0x0f
    3294:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	a0 ea       	ldi	r26, 0xA0	; 160
    329e:	b0 e4       	ldi	r27, 0x40	; 64
    32a0:	8b 87       	std	Y+11, r24	; 0x0b
    32a2:	9c 87       	std	Y+12, r25	; 0x0c
    32a4:	ad 87       	std	Y+13, r26	; 0x0d
    32a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	4a ef       	ldi	r20, 0xFA	; 250
    32b6:	54 e4       	ldi	r21, 0x44	; 68
    32b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	8f 83       	std	Y+7, r24	; 0x07
    32c2:	98 87       	std	Y+8, r25	; 0x08
    32c4:	a9 87       	std	Y+9, r26	; 0x09
    32c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ca:	78 85       	ldd	r23, Y+8	; 0x08
    32cc:	89 85       	ldd	r24, Y+9	; 0x09
    32ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	40 e8       	ldi	r20, 0x80	; 128
    32d6:	5f e3       	ldi	r21, 0x3F	; 63
    32d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32dc:	88 23       	and	r24, r24
    32de:	2c f4       	brge	.+10     	; 0x32ea <LCD_WriteExtraChar+0xb2>
		__ticks = 1;
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	9e 83       	std	Y+6, r25	; 0x06
    32e6:	8d 83       	std	Y+5, r24	; 0x05
    32e8:	3f c0       	rjmp	.+126    	; 0x3368 <LCD_WriteExtraChar+0x130>
	else if (__tmp > 65535)
    32ea:	6f 81       	ldd	r22, Y+7	; 0x07
    32ec:	78 85       	ldd	r23, Y+8	; 0x08
    32ee:	89 85       	ldd	r24, Y+9	; 0x09
    32f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	3f ef       	ldi	r19, 0xFF	; 255
    32f6:	4f e7       	ldi	r20, 0x7F	; 127
    32f8:	57 e4       	ldi	r21, 0x47	; 71
    32fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32fe:	18 16       	cp	r1, r24
    3300:	4c f5       	brge	.+82     	; 0x3354 <LCD_WriteExtraChar+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3302:	6b 85       	ldd	r22, Y+11	; 0x0b
    3304:	7c 85       	ldd	r23, Y+12	; 0x0c
    3306:	8d 85       	ldd	r24, Y+13	; 0x0d
    3308:	9e 85       	ldd	r25, Y+14	; 0x0e
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e2       	ldi	r20, 0x20	; 32
    3310:	51 e4       	ldi	r21, 0x41	; 65
    3312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	bc 01       	movw	r22, r24
    331c:	cd 01       	movw	r24, r26
    331e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	9e 83       	std	Y+6, r25	; 0x06
    3328:	8d 83       	std	Y+5, r24	; 0x05
    332a:	0f c0       	rjmp	.+30     	; 0x334a <LCD_WriteExtraChar+0x112>
    332c:	88 ec       	ldi	r24, 0xC8	; 200
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	9c 83       	std	Y+4, r25	; 0x04
    3332:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	9c 81       	ldd	r25, Y+4	; 0x04
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <LCD_WriteExtraChar+0x100>
    333c:	9c 83       	std	Y+4, r25	; 0x04
    333e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	9e 81       	ldd	r25, Y+6	; 0x06
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	9e 83       	std	Y+6, r25	; 0x06
    3348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334a:	8d 81       	ldd	r24, Y+5	; 0x05
    334c:	9e 81       	ldd	r25, Y+6	; 0x06
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	69 f7       	brne	.-38     	; 0x332c <LCD_WriteExtraChar+0xf4>
    3352:	14 c0       	rjmp	.+40     	; 0x337c <LCD_WriteExtraChar+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3354:	6f 81       	ldd	r22, Y+7	; 0x07
    3356:	78 85       	ldd	r23, Y+8	; 0x08
    3358:	89 85       	ldd	r24, Y+9	; 0x09
    335a:	9a 85       	ldd	r25, Y+10	; 0x0a
    335c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	9e 83       	std	Y+6, r25	; 0x06
    3366:	8d 83       	std	Y+5, r24	; 0x05
    3368:	8d 81       	ldd	r24, Y+5	; 0x05
    336a:	9e 81       	ldd	r25, Y+6	; 0x06
    336c:	9a 83       	std	Y+2, r25	; 0x02
    336e:	89 83       	std	Y+1, r24	; 0x01
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	9a 81       	ldd	r25, Y+2	; 0x02
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <LCD_WriteExtraChar+0x13c>
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_Write_Cmd(128);
	LCD_GoTo_XY(Y,X);
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    337c:	8f 85       	ldd	r24, Y+15	; 0x0f
    337e:	8f 5f       	subi	r24, 0xFF	; 255
    3380:	8f 87       	std	Y+15, r24	; 0x0f
    3382:	8f 85       	ldd	r24, Y+15	; 0x0f
    3384:	88 30       	cpi	r24, 0x08	; 8
    3386:	08 f4       	brcc	.+2      	; 0x338a <LCD_WriteExtraChar+0x152>
    3388:	84 cf       	rjmp	.-248    	; 0x3292 <LCD_WriteExtraChar+0x5a>
		/* Write bytes of DDRAM */
		LCD_Write_Char(iteration2);

		_delay_ms(5);
	}
}
    338a:	64 96       	adiw	r28, 0x14	; 20
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
    3396:	cf 91       	pop	r28
    3398:	df 91       	pop	r29
    339a:	08 95       	ret

0000339c <LCD_Print_Int>:

void LCD_Print_Int(f32 integer)
{
    339c:	ef 92       	push	r14
    339e:	ff 92       	push	r15
    33a0:	0f 93       	push	r16
    33a2:	1f 93       	push	r17
    33a4:	df 93       	push	r29
    33a6:	cf 93       	push	r28
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	e6 97       	sbiw	r28, 0x36	; 54
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	de bf       	out	0x3e, r29	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	cd bf       	out	0x3d, r28	; 61
    33b8:	69 8b       	std	Y+17, r22	; 0x11
    33ba:	7a 8b       	std	Y+18, r23	; 0x12
    33bc:	8b 8b       	std	Y+19, r24	; 0x13
    33be:	9c 8b       	std	Y+20, r25	; 0x14
	s32 fraction = 0;
    33c0:	1d 86       	std	Y+13, r1	; 0x0d
    33c2:	1e 86       	std	Y+14, r1	; 0x0e
    33c4:	1f 86       	std	Y+15, r1	; 0x0f
    33c6:	18 8a       	std	Y+16, r1	; 0x10
	s32 thousands = 0;
    33c8:	19 86       	std	Y+9, r1	; 0x09
    33ca:	1a 86       	std	Y+10, r1	; 0x0a
    33cc:	1b 86       	std	Y+11, r1	; 0x0b
    33ce:	1c 86       	std	Y+12, r1	; 0x0c
	s32 dozens = 0;
    33d0:	1d 82       	std	Y+5, r1	; 0x05
    33d2:	1e 82       	std	Y+6, r1	; 0x06
    33d4:	1f 82       	std	Y+7, r1	; 0x07
    33d6:	18 86       	std	Y+8, r1	; 0x08
	s32 ones = 0;
    33d8:	19 82       	std	Y+1, r1	; 0x01
    33da:	1a 82       	std	Y+2, r1	; 0x02
    33dc:	1b 82       	std	Y+3, r1	; 0x03
    33de:	1c 82       	std	Y+4, r1	; 0x04
	if(integer<=1000 && integer>=0)
    33e0:	1e 8a       	std	Y+22, r1	; 0x16
    33e2:	69 89       	ldd	r22, Y+17	; 0x11
    33e4:	7a 89       	ldd	r23, Y+18	; 0x12
    33e6:	8b 89       	ldd	r24, Y+19	; 0x13
    33e8:	9c 89       	ldd	r25, Y+20	; 0x14
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	4a e7       	ldi	r20, 0x7A	; 122
    33f0:	54 e4       	ldi	r21, 0x44	; 68
    33f2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    33f6:	18 16       	cp	r1, r24
    33f8:	14 f0       	brlt	.+4      	; 0x33fe <LCD_Print_Int+0x62>
    33fa:	01 e0       	ldi	r16, 0x01	; 1
    33fc:	0e 8b       	std	Y+22, r16	; 0x16
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	1e 89       	ldd	r17, Y+22	; 0x16
    3402:	81 27       	eor	r24, r17
    3404:	88 23       	and	r24, r24
    3406:	09 f0       	breq	.+2      	; 0x340a <LCD_Print_Int+0x6e>
    3408:	5b c3       	rjmp	.+1718   	; 0x3ac0 <LCD_Print_Int+0x724>
    340a:	1d 8a       	std	Y+21, r1	; 0x15
    340c:	69 89       	ldd	r22, Y+17	; 0x11
    340e:	7a 89       	ldd	r23, Y+18	; 0x12
    3410:	8b 89       	ldd	r24, Y+19	; 0x13
    3412:	9c 89       	ldd	r25, Y+20	; 0x14
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e0       	ldi	r20, 0x00	; 0
    341a:	50 e0       	ldi	r21, 0x00	; 0
    341c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    3420:	88 23       	and	r24, r24
    3422:	14 f0       	brlt	.+4      	; 0x3428 <LCD_Print_Int+0x8c>
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	8d 8b       	std	Y+21, r24	; 0x15
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	9d 89       	ldd	r25, Y+21	; 0x15
    342c:	89 27       	eor	r24, r25
    342e:	88 23       	and	r24, r24
    3430:	09 f0       	breq	.+2      	; 0x3434 <LCD_Print_Int+0x98>
    3432:	46 c3       	rjmp	.+1676   	; 0x3ac0 <LCD_Print_Int+0x724>
	{
		fraction = integer*10;
    3434:	69 89       	ldd	r22, Y+17	; 0x11
    3436:	7a 89       	ldd	r23, Y+18	; 0x12
    3438:	8b 89       	ldd	r24, Y+19	; 0x13
    343a:	9c 89       	ldd	r25, Y+20	; 0x14
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e2       	ldi	r20, 0x20	; 32
    3442:	51 e4       	ldi	r21, 0x41	; 65
    3444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	bc 01       	movw	r22, r24
    344e:	cd 01       	movw	r24, r26
    3450:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	8d 87       	std	Y+13, r24	; 0x0d
    345a:	9e 87       	std	Y+14, r25	; 0x0e
    345c:	af 87       	std	Y+15, r26	; 0x0f
    345e:	b8 8b       	std	Y+16, r27	; 0x10
		fraction = fraction%10;
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	af 85       	ldd	r26, Y+15	; 0x0f
    3466:	b8 89       	ldd	r27, Y+16	; 0x10
    3468:	2a e0       	ldi	r18, 0x0A	; 10
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e0       	ldi	r20, 0x00	; 0
    346e:	50 e0       	ldi	r21, 0x00	; 0
    3470:	bc 01       	movw	r22, r24
    3472:	cd 01       	movw	r24, r26
    3474:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	8d 87       	std	Y+13, r24	; 0x0d
    347e:	9e 87       	std	Y+14, r25	; 0x0e
    3480:	af 87       	std	Y+15, r26	; 0x0f
    3482:	b8 8b       	std	Y+16, r27	; 0x10
		thousands = (s32)integer%10;
    3484:	69 89       	ldd	r22, Y+17	; 0x11
    3486:	7a 89       	ldd	r23, Y+18	; 0x12
    3488:	8b 89       	ldd	r24, Y+19	; 0x13
    348a:	9c 89       	ldd	r25, Y+20	; 0x14
    348c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	2a e0       	ldi	r18, 0x0A	; 10
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	40 e0       	ldi	r20, 0x00	; 0
    349a:	50 e0       	ldi	r21, 0x00	; 0
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	89 87       	std	Y+9, r24	; 0x09
    34aa:	9a 87       	std	Y+10, r25	; 0x0a
    34ac:	ab 87       	std	Y+11, r26	; 0x0b
    34ae:	bc 87       	std	Y+12, r27	; 0x0c
		dozens = (((s32)integer-thousands)/10)%10;
    34b0:	69 89       	ldd	r22, Y+17	; 0x11
    34b2:	7a 89       	ldd	r23, Y+18	; 0x12
    34b4:	8b 89       	ldd	r24, Y+19	; 0x13
    34b6:	9c 89       	ldd	r25, Y+20	; 0x14
    34b8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    34bc:	9b 01       	movw	r18, r22
    34be:	ac 01       	movw	r20, r24
    34c0:	89 85       	ldd	r24, Y+9	; 0x09
    34c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c4:	ab 85       	ldd	r26, Y+11	; 0x0b
    34c6:	bc 85       	ldd	r27, Y+12	; 0x0c
    34c8:	79 01       	movw	r14, r18
    34ca:	8a 01       	movw	r16, r20
    34cc:	e8 1a       	sub	r14, r24
    34ce:	f9 0a       	sbc	r15, r25
    34d0:	0a 0b       	sbc	r16, r26
    34d2:	1b 0b       	sbc	r17, r27
    34d4:	d8 01       	movw	r26, r16
    34d6:	c7 01       	movw	r24, r14
    34d8:	2a e0       	ldi	r18, 0x0A	; 10
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	50 e0       	ldi	r21, 0x00	; 0
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    34e8:	da 01       	movw	r26, r20
    34ea:	c9 01       	movw	r24, r18
    34ec:	2a e0       	ldi	r18, 0x0A	; 10
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	40 e0       	ldi	r20, 0x00	; 0
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	bc 01       	movw	r22, r24
    34f6:	cd 01       	movw	r24, r26
    34f8:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	8d 83       	std	Y+5, r24	; 0x05
    3502:	9e 83       	std	Y+6, r25	; 0x06
    3504:	af 83       	std	Y+7, r26	; 0x07
    3506:	b8 87       	std	Y+8, r27	; 0x08
		ones = (((s32)integer-dozens)/100)%10;
    3508:	69 89       	ldd	r22, Y+17	; 0x11
    350a:	7a 89       	ldd	r23, Y+18	; 0x12
    350c:	8b 89       	ldd	r24, Y+19	; 0x13
    350e:	9c 89       	ldd	r25, Y+20	; 0x14
    3510:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3514:	9b 01       	movw	r18, r22
    3516:	ac 01       	movw	r20, r24
    3518:	8d 81       	ldd	r24, Y+5	; 0x05
    351a:	9e 81       	ldd	r25, Y+6	; 0x06
    351c:	af 81       	ldd	r26, Y+7	; 0x07
    351e:	b8 85       	ldd	r27, Y+8	; 0x08
    3520:	79 01       	movw	r14, r18
    3522:	8a 01       	movw	r16, r20
    3524:	e8 1a       	sub	r14, r24
    3526:	f9 0a       	sbc	r15, r25
    3528:	0a 0b       	sbc	r16, r26
    352a:	1b 0b       	sbc	r17, r27
    352c:	d8 01       	movw	r26, r16
    352e:	c7 01       	movw	r24, r14
    3530:	24 e6       	ldi	r18, 0x64	; 100
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	bc 01       	movw	r22, r24
    353a:	cd 01       	movw	r24, r26
    353c:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    3540:	da 01       	movw	r26, r20
    3542:	c9 01       	movw	r24, r18
    3544:	2a e0       	ldi	r18, 0x0A	; 10
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 e0       	ldi	r20, 0x00	; 0
    354a:	50 e0       	ldi	r21, 0x00	; 0
    354c:	bc 01       	movw	r22, r24
    354e:	cd 01       	movw	r24, r26
    3550:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	89 83       	std	Y+1, r24	; 0x01
    355a:	9a 83       	std	Y+2, r25	; 0x02
    355c:	ab 83       	std	Y+3, r26	; 0x03
    355e:	bc 83       	std	Y+4, r27	; 0x04

		switch(ones)
    3560:	89 81       	ldd	r24, Y+1	; 0x01
    3562:	9a 81       	ldd	r25, Y+2	; 0x02
    3564:	ab 81       	ldd	r26, Y+3	; 0x03
    3566:	bc 81       	ldd	r27, Y+4	; 0x04
    3568:	8f 8b       	std	Y+23, r24	; 0x17
    356a:	98 8f       	std	Y+24, r25	; 0x18
    356c:	a9 8f       	std	Y+25, r26	; 0x19
    356e:	ba 8f       	std	Y+26, r27	; 0x1a
    3570:	8f 89       	ldd	r24, Y+23	; 0x17
    3572:	98 8d       	ldd	r25, Y+24	; 0x18
    3574:	a9 8d       	ldd	r26, Y+25	; 0x19
    3576:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3578:	85 30       	cpi	r24, 0x05	; 5
    357a:	91 05       	cpc	r25, r1
    357c:	a1 05       	cpc	r26, r1
    357e:	b1 05       	cpc	r27, r1
    3580:	09 f4       	brne	.+2      	; 0x3584 <LCD_Print_Int+0x1e8>
    3582:	6e c0       	rjmp	.+220    	; 0x3660 <LCD_Print_Int+0x2c4>
    3584:	8f 89       	ldd	r24, Y+23	; 0x17
    3586:	98 8d       	ldd	r25, Y+24	; 0x18
    3588:	a9 8d       	ldd	r26, Y+25	; 0x19
    358a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    358c:	86 30       	cpi	r24, 0x06	; 6
    358e:	91 05       	cpc	r25, r1
    3590:	a1 05       	cpc	r26, r1
    3592:	b1 05       	cpc	r27, r1
    3594:	84 f5       	brge	.+96     	; 0x35f6 <LCD_Print_Int+0x25a>
    3596:	8f 89       	ldd	r24, Y+23	; 0x17
    3598:	98 8d       	ldd	r25, Y+24	; 0x18
    359a:	a9 8d       	ldd	r26, Y+25	; 0x19
    359c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    359e:	82 30       	cpi	r24, 0x02	; 2
    35a0:	91 05       	cpc	r25, r1
    35a2:	a1 05       	cpc	r26, r1
    35a4:	b1 05       	cpc	r27, r1
    35a6:	09 f4       	brne	.+2      	; 0x35aa <LCD_Print_Int+0x20e>
    35a8:	4f c0       	rjmp	.+158    	; 0x3648 <LCD_Print_Int+0x2ac>
    35aa:	8f 89       	ldd	r24, Y+23	; 0x17
    35ac:	98 8d       	ldd	r25, Y+24	; 0x18
    35ae:	a9 8d       	ldd	r26, Y+25	; 0x19
    35b0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    35b2:	83 30       	cpi	r24, 0x03	; 3
    35b4:	91 05       	cpc	r25, r1
    35b6:	a1 05       	cpc	r26, r1
    35b8:	b1 05       	cpc	r27, r1
    35ba:	54 f4       	brge	.+20     	; 0x35d0 <LCD_Print_Int+0x234>
    35bc:	8f 89       	ldd	r24, Y+23	; 0x17
    35be:	98 8d       	ldd	r25, Y+24	; 0x18
    35c0:	a9 8d       	ldd	r26, Y+25	; 0x19
    35c2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    35c4:	81 30       	cpi	r24, 0x01	; 1
    35c6:	91 05       	cpc	r25, r1
    35c8:	a1 05       	cpc	r26, r1
    35ca:	b1 05       	cpc	r27, r1
    35cc:	c9 f1       	breq	.+114    	; 0x3640 <LCD_Print_Int+0x2a4>
    35ce:	5b c0       	rjmp	.+182    	; 0x3686 <LCD_Print_Int+0x2ea>
    35d0:	8f 89       	ldd	r24, Y+23	; 0x17
    35d2:	98 8d       	ldd	r25, Y+24	; 0x18
    35d4:	a9 8d       	ldd	r26, Y+25	; 0x19
    35d6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    35d8:	83 30       	cpi	r24, 0x03	; 3
    35da:	91 05       	cpc	r25, r1
    35dc:	a1 05       	cpc	r26, r1
    35de:	b1 05       	cpc	r27, r1
    35e0:	b9 f1       	breq	.+110    	; 0x3650 <LCD_Print_Int+0x2b4>
    35e2:	8f 89       	ldd	r24, Y+23	; 0x17
    35e4:	98 8d       	ldd	r25, Y+24	; 0x18
    35e6:	a9 8d       	ldd	r26, Y+25	; 0x19
    35e8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    35ea:	84 30       	cpi	r24, 0x04	; 4
    35ec:	91 05       	cpc	r25, r1
    35ee:	a1 05       	cpc	r26, r1
    35f0:	b1 05       	cpc	r27, r1
    35f2:	91 f1       	breq	.+100    	; 0x3658 <LCD_Print_Int+0x2bc>
    35f4:	48 c0       	rjmp	.+144    	; 0x3686 <LCD_Print_Int+0x2ea>
    35f6:	8f 89       	ldd	r24, Y+23	; 0x17
    35f8:	98 8d       	ldd	r25, Y+24	; 0x18
    35fa:	a9 8d       	ldd	r26, Y+25	; 0x19
    35fc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    35fe:	87 30       	cpi	r24, 0x07	; 7
    3600:	91 05       	cpc	r25, r1
    3602:	a1 05       	cpc	r26, r1
    3604:	b1 05       	cpc	r27, r1
    3606:	a1 f1       	breq	.+104    	; 0x3670 <LCD_Print_Int+0x2d4>
    3608:	8f 89       	ldd	r24, Y+23	; 0x17
    360a:	98 8d       	ldd	r25, Y+24	; 0x18
    360c:	a9 8d       	ldd	r26, Y+25	; 0x19
    360e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3610:	87 30       	cpi	r24, 0x07	; 7
    3612:	91 05       	cpc	r25, r1
    3614:	a1 05       	cpc	r26, r1
    3616:	b1 05       	cpc	r27, r1
    3618:	3c f1       	brlt	.+78     	; 0x3668 <LCD_Print_Int+0x2cc>
    361a:	8f 89       	ldd	r24, Y+23	; 0x17
    361c:	98 8d       	ldd	r25, Y+24	; 0x18
    361e:	a9 8d       	ldd	r26, Y+25	; 0x19
    3620:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3622:	88 30       	cpi	r24, 0x08	; 8
    3624:	91 05       	cpc	r25, r1
    3626:	a1 05       	cpc	r26, r1
    3628:	b1 05       	cpc	r27, r1
    362a:	31 f1       	breq	.+76     	; 0x3678 <LCD_Print_Int+0x2dc>
    362c:	8f 89       	ldd	r24, Y+23	; 0x17
    362e:	98 8d       	ldd	r25, Y+24	; 0x18
    3630:	a9 8d       	ldd	r26, Y+25	; 0x19
    3632:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3634:	89 30       	cpi	r24, 0x09	; 9
    3636:	91 05       	cpc	r25, r1
    3638:	a1 05       	cpc	r26, r1
    363a:	b1 05       	cpc	r27, r1
    363c:	09 f1       	breq	.+66     	; 0x3680 <LCD_Print_Int+0x2e4>
    363e:	23 c0       	rjmp	.+70     	; 0x3686 <LCD_Print_Int+0x2ea>
		{
		//case 0:LCD_Write_Char('0');break;
		case 1:LCD_Write_Char('1');break;
    3640:	81 e3       	ldi	r24, 0x31	; 49
    3642:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3646:	1f c0       	rjmp	.+62     	; 0x3686 <LCD_Print_Int+0x2ea>
		case 2:LCD_Write_Char('2');break;
    3648:	82 e3       	ldi	r24, 0x32	; 50
    364a:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    364e:	1b c0       	rjmp	.+54     	; 0x3686 <LCD_Print_Int+0x2ea>
		case 3:LCD_Write_Char('3');break;
    3650:	83 e3       	ldi	r24, 0x33	; 51
    3652:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3656:	17 c0       	rjmp	.+46     	; 0x3686 <LCD_Print_Int+0x2ea>
		case 4:LCD_Write_Char('4');break;
    3658:	84 e3       	ldi	r24, 0x34	; 52
    365a:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    365e:	13 c0       	rjmp	.+38     	; 0x3686 <LCD_Print_Int+0x2ea>
		case 5:LCD_Write_Char('5');break;
    3660:	85 e3       	ldi	r24, 0x35	; 53
    3662:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3666:	0f c0       	rjmp	.+30     	; 0x3686 <LCD_Print_Int+0x2ea>
		case 6:LCD_Write_Char('6');break;
    3668:	86 e3       	ldi	r24, 0x36	; 54
    366a:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    366e:	0b c0       	rjmp	.+22     	; 0x3686 <LCD_Print_Int+0x2ea>
		case 7:LCD_Write_Char('7');break;
    3670:	87 e3       	ldi	r24, 0x37	; 55
    3672:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3676:	07 c0       	rjmp	.+14     	; 0x3686 <LCD_Print_Int+0x2ea>
		case 8:LCD_Write_Char('8');break;
    3678:	88 e3       	ldi	r24, 0x38	; 56
    367a:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    367e:	03 c0       	rjmp	.+6      	; 0x3686 <LCD_Print_Int+0x2ea>
		case 9:LCD_Write_Char('9');break;
    3680:	89 e3       	ldi	r24, 0x39	; 57
    3682:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
		}

		switch(dozens)
    3686:	ed 80       	ldd	r14, Y+5	; 0x05
    3688:	fe 80       	ldd	r15, Y+6	; 0x06
    368a:	0f 81       	ldd	r16, Y+7	; 0x07
    368c:	18 85       	ldd	r17, Y+8	; 0x08
    368e:	eb 8e       	std	Y+27, r14	; 0x1b
    3690:	fc 8e       	std	Y+28, r15	; 0x1c
    3692:	0d 8f       	std	Y+29, r16	; 0x1d
    3694:	1e 8f       	std	Y+30, r17	; 0x1e
    3696:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3698:	9c 8d       	ldd	r25, Y+28	; 0x1c
    369a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    369c:	be 8d       	ldd	r27, Y+30	; 0x1e
    369e:	84 30       	cpi	r24, 0x04	; 4
    36a0:	91 05       	cpc	r25, r1
    36a2:	a1 05       	cpc	r26, r1
    36a4:	b1 05       	cpc	r27, r1
    36a6:	09 f4       	brne	.+2      	; 0x36aa <LCD_Print_Int+0x30e>
    36a8:	8d c0       	rjmp	.+282    	; 0x37c4 <LCD_Print_Int+0x428>
    36aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36ae:	ad 8d       	ldd	r26, Y+29	; 0x1d
    36b0:	be 8d       	ldd	r27, Y+30	; 0x1e
    36b2:	85 30       	cpi	r24, 0x05	; 5
    36b4:	91 05       	cpc	r25, r1
    36b6:	a1 05       	cpc	r26, r1
    36b8:	b1 05       	cpc	r27, r1
    36ba:	9c f5       	brge	.+102    	; 0x3722 <LCD_Print_Int+0x386>
    36bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36c0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    36c2:	be 8d       	ldd	r27, Y+30	; 0x1e
    36c4:	81 30       	cpi	r24, 0x01	; 1
    36c6:	91 05       	cpc	r25, r1
    36c8:	a1 05       	cpc	r26, r1
    36ca:	b1 05       	cpc	r27, r1
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <LCD_Print_Int+0x334>
    36ce:	6e c0       	rjmp	.+220    	; 0x37ac <LCD_Print_Int+0x410>
    36d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36d4:	ad 8d       	ldd	r26, Y+29	; 0x1d
    36d6:	be 8d       	ldd	r27, Y+30	; 0x1e
    36d8:	82 30       	cpi	r24, 0x02	; 2
    36da:	91 05       	cpc	r25, r1
    36dc:	a1 05       	cpc	r26, r1
    36de:	b1 05       	cpc	r27, r1
    36e0:	5c f4       	brge	.+22     	; 0x36f8 <LCD_Print_Int+0x35c>
    36e2:	eb 8c       	ldd	r14, Y+27	; 0x1b
    36e4:	fc 8c       	ldd	r15, Y+28	; 0x1c
    36e6:	0d 8d       	ldd	r16, Y+29	; 0x1d
    36e8:	1e 8d       	ldd	r17, Y+30	; 0x1e
    36ea:	e1 14       	cp	r14, r1
    36ec:	f1 04       	cpc	r15, r1
    36ee:	01 05       	cpc	r16, r1
    36f0:	11 05       	cpc	r17, r1
    36f2:	09 f4       	brne	.+2      	; 0x36f6 <LCD_Print_Int+0x35a>
    36f4:	4f c0       	rjmp	.+158    	; 0x3794 <LCD_Print_Int+0x3f8>
    36f6:	7d c0       	rjmp	.+250    	; 0x37f2 <LCD_Print_Int+0x456>
    36f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36fc:	ad 8d       	ldd	r26, Y+29	; 0x1d
    36fe:	be 8d       	ldd	r27, Y+30	; 0x1e
    3700:	82 30       	cpi	r24, 0x02	; 2
    3702:	91 05       	cpc	r25, r1
    3704:	a1 05       	cpc	r26, r1
    3706:	b1 05       	cpc	r27, r1
    3708:	09 f4       	brne	.+2      	; 0x370c <LCD_Print_Int+0x370>
    370a:	54 c0       	rjmp	.+168    	; 0x37b4 <LCD_Print_Int+0x418>
    370c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    370e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3710:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3712:	be 8d       	ldd	r27, Y+30	; 0x1e
    3714:	83 30       	cpi	r24, 0x03	; 3
    3716:	91 05       	cpc	r25, r1
    3718:	a1 05       	cpc	r26, r1
    371a:	b1 05       	cpc	r27, r1
    371c:	09 f4       	brne	.+2      	; 0x3720 <LCD_Print_Int+0x384>
    371e:	4e c0       	rjmp	.+156    	; 0x37bc <LCD_Print_Int+0x420>
    3720:	68 c0       	rjmp	.+208    	; 0x37f2 <LCD_Print_Int+0x456>
    3722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3726:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3728:	be 8d       	ldd	r27, Y+30	; 0x1e
    372a:	87 30       	cpi	r24, 0x07	; 7
    372c:	91 05       	cpc	r25, r1
    372e:	a1 05       	cpc	r26, r1
    3730:	b1 05       	cpc	r27, r1
    3732:	09 f4       	brne	.+2      	; 0x3736 <LCD_Print_Int+0x39a>
    3734:	53 c0       	rjmp	.+166    	; 0x37dc <LCD_Print_Int+0x440>
    3736:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3738:	9c 8d       	ldd	r25, Y+28	; 0x1c
    373a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    373c:	be 8d       	ldd	r27, Y+30	; 0x1e
    373e:	88 30       	cpi	r24, 0x08	; 8
    3740:	91 05       	cpc	r25, r1
    3742:	a1 05       	cpc	r26, r1
    3744:	b1 05       	cpc	r27, r1
    3746:	9c f4       	brge	.+38     	; 0x376e <LCD_Print_Int+0x3d2>
    3748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    374a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    374c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    374e:	be 8d       	ldd	r27, Y+30	; 0x1e
    3750:	85 30       	cpi	r24, 0x05	; 5
    3752:	91 05       	cpc	r25, r1
    3754:	a1 05       	cpc	r26, r1
    3756:	b1 05       	cpc	r27, r1
    3758:	c9 f1       	breq	.+114    	; 0x37cc <LCD_Print_Int+0x430>
    375a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    375c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    375e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3760:	be 8d       	ldd	r27, Y+30	; 0x1e
    3762:	86 30       	cpi	r24, 0x06	; 6
    3764:	91 05       	cpc	r25, r1
    3766:	a1 05       	cpc	r26, r1
    3768:	b1 05       	cpc	r27, r1
    376a:	a1 f1       	breq	.+104    	; 0x37d4 <LCD_Print_Int+0x438>
    376c:	42 c0       	rjmp	.+132    	; 0x37f2 <LCD_Print_Int+0x456>
    376e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3770:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3772:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3774:	be 8d       	ldd	r27, Y+30	; 0x1e
    3776:	88 30       	cpi	r24, 0x08	; 8
    3778:	91 05       	cpc	r25, r1
    377a:	a1 05       	cpc	r26, r1
    377c:	b1 05       	cpc	r27, r1
    377e:	91 f1       	breq	.+100    	; 0x37e4 <LCD_Print_Int+0x448>
    3780:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3782:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3784:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3786:	be 8d       	ldd	r27, Y+30	; 0x1e
    3788:	89 30       	cpi	r24, 0x09	; 9
    378a:	91 05       	cpc	r25, r1
    378c:	a1 05       	cpc	r26, r1
    378e:	b1 05       	cpc	r27, r1
    3790:	69 f1       	breq	.+90     	; 0x37ec <LCD_Print_Int+0x450>
    3792:	2f c0       	rjmp	.+94     	; 0x37f2 <LCD_Print_Int+0x456>
		{

		case 0:
			if(ones == 0)
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	9a 81       	ldd	r25, Y+2	; 0x02
    3798:	ab 81       	ldd	r26, Y+3	; 0x03
    379a:	bc 81       	ldd	r27, Y+4	; 0x04
    379c:	00 97       	sbiw	r24, 0x00	; 0
    379e:	a1 05       	cpc	r26, r1
    37a0:	b1 05       	cpc	r27, r1
    37a2:	39 f1       	breq	.+78     	; 0x37f2 <LCD_Print_Int+0x456>
			{
				break;
			}
			else
			{
				LCD_Write_Char('0');break;
    37a4:	80 e3       	ldi	r24, 0x30	; 48
    37a6:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    37aa:	23 c0       	rjmp	.+70     	; 0x37f2 <LCD_Print_Int+0x456>
			}
		case 1:LCD_Write_Char('1');break;
    37ac:	81 e3       	ldi	r24, 0x31	; 49
    37ae:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    37b2:	1f c0       	rjmp	.+62     	; 0x37f2 <LCD_Print_Int+0x456>
		case 2:LCD_Write_Char('2');break;
    37b4:	82 e3       	ldi	r24, 0x32	; 50
    37b6:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    37ba:	1b c0       	rjmp	.+54     	; 0x37f2 <LCD_Print_Int+0x456>
		case 3:LCD_Write_Char('3');break;
    37bc:	83 e3       	ldi	r24, 0x33	; 51
    37be:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    37c2:	17 c0       	rjmp	.+46     	; 0x37f2 <LCD_Print_Int+0x456>
		case 4:LCD_Write_Char('4');break;
    37c4:	84 e3       	ldi	r24, 0x34	; 52
    37c6:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    37ca:	13 c0       	rjmp	.+38     	; 0x37f2 <LCD_Print_Int+0x456>
		case 5:LCD_Write_Char('5');break;
    37cc:	85 e3       	ldi	r24, 0x35	; 53
    37ce:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    37d2:	0f c0       	rjmp	.+30     	; 0x37f2 <LCD_Print_Int+0x456>
		case 6:LCD_Write_Char('6');break;
    37d4:	86 e3       	ldi	r24, 0x36	; 54
    37d6:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    37da:	0b c0       	rjmp	.+22     	; 0x37f2 <LCD_Print_Int+0x456>
		case 7:LCD_Write_Char('7');break;
    37dc:	87 e3       	ldi	r24, 0x37	; 55
    37de:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    37e2:	07 c0       	rjmp	.+14     	; 0x37f2 <LCD_Print_Int+0x456>
		case 8:LCD_Write_Char('8');break;
    37e4:	88 e3       	ldi	r24, 0x38	; 56
    37e6:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    37ea:	03 c0       	rjmp	.+6      	; 0x37f2 <LCD_Print_Int+0x456>
		case 9:LCD_Write_Char('9');break;
    37ec:	89 e3       	ldi	r24, 0x39	; 57
    37ee:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
		}
		switch(thousands)
    37f2:	e9 84       	ldd	r14, Y+9	; 0x09
    37f4:	fa 84       	ldd	r15, Y+10	; 0x0a
    37f6:	0b 85       	ldd	r16, Y+11	; 0x0b
    37f8:	1c 85       	ldd	r17, Y+12	; 0x0c
    37fa:	ef 8e       	std	Y+31, r14	; 0x1f
    37fc:	f8 a2       	std	Y+32, r15	; 0x20
    37fe:	09 a3       	std	Y+33, r16	; 0x21
    3800:	1a a3       	std	Y+34, r17	; 0x22
    3802:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3804:	98 a1       	ldd	r25, Y+32	; 0x20
    3806:	a9 a1       	ldd	r26, Y+33	; 0x21
    3808:	ba a1       	ldd	r27, Y+34	; 0x22
    380a:	84 30       	cpi	r24, 0x04	; 4
    380c:	91 05       	cpc	r25, r1
    380e:	a1 05       	cpc	r26, r1
    3810:	b1 05       	cpc	r27, r1
    3812:	09 f4       	brne	.+2      	; 0x3816 <LCD_Print_Int+0x47a>
    3814:	85 c0       	rjmp	.+266    	; 0x3920 <LCD_Print_Int+0x584>
    3816:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3818:	98 a1       	ldd	r25, Y+32	; 0x20
    381a:	a9 a1       	ldd	r26, Y+33	; 0x21
    381c:	ba a1       	ldd	r27, Y+34	; 0x22
    381e:	85 30       	cpi	r24, 0x05	; 5
    3820:	91 05       	cpc	r25, r1
    3822:	a1 05       	cpc	r26, r1
    3824:	b1 05       	cpc	r27, r1
    3826:	9c f5       	brge	.+102    	; 0x388e <LCD_Print_Int+0x4f2>
    3828:	8f 8d       	ldd	r24, Y+31	; 0x1f
    382a:	98 a1       	ldd	r25, Y+32	; 0x20
    382c:	a9 a1       	ldd	r26, Y+33	; 0x21
    382e:	ba a1       	ldd	r27, Y+34	; 0x22
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	91 05       	cpc	r25, r1
    3834:	a1 05       	cpc	r26, r1
    3836:	b1 05       	cpc	r27, r1
    3838:	09 f4       	brne	.+2      	; 0x383c <LCD_Print_Int+0x4a0>
    383a:	66 c0       	rjmp	.+204    	; 0x3908 <LCD_Print_Int+0x56c>
    383c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    383e:	98 a1       	ldd	r25, Y+32	; 0x20
    3840:	a9 a1       	ldd	r26, Y+33	; 0x21
    3842:	ba a1       	ldd	r27, Y+34	; 0x22
    3844:	82 30       	cpi	r24, 0x02	; 2
    3846:	91 05       	cpc	r25, r1
    3848:	a1 05       	cpc	r26, r1
    384a:	b1 05       	cpc	r27, r1
    384c:	5c f4       	brge	.+22     	; 0x3864 <LCD_Print_Int+0x4c8>
    384e:	ef 8c       	ldd	r14, Y+31	; 0x1f
    3850:	f8 a0       	ldd	r15, Y+32	; 0x20
    3852:	09 a1       	ldd	r16, Y+33	; 0x21
    3854:	1a a1       	ldd	r17, Y+34	; 0x22
    3856:	e1 14       	cp	r14, r1
    3858:	f1 04       	cpc	r15, r1
    385a:	01 05       	cpc	r16, r1
    385c:	11 05       	cpc	r17, r1
    385e:	09 f4       	brne	.+2      	; 0x3862 <LCD_Print_Int+0x4c6>
    3860:	4f c0       	rjmp	.+158    	; 0x3900 <LCD_Print_Int+0x564>
    3862:	75 c0       	rjmp	.+234    	; 0x394e <LCD_Print_Int+0x5b2>
    3864:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3866:	98 a1       	ldd	r25, Y+32	; 0x20
    3868:	a9 a1       	ldd	r26, Y+33	; 0x21
    386a:	ba a1       	ldd	r27, Y+34	; 0x22
    386c:	82 30       	cpi	r24, 0x02	; 2
    386e:	91 05       	cpc	r25, r1
    3870:	a1 05       	cpc	r26, r1
    3872:	b1 05       	cpc	r27, r1
    3874:	09 f4       	brne	.+2      	; 0x3878 <LCD_Print_Int+0x4dc>
    3876:	4c c0       	rjmp	.+152    	; 0x3910 <LCD_Print_Int+0x574>
    3878:	8f 8d       	ldd	r24, Y+31	; 0x1f
    387a:	98 a1       	ldd	r25, Y+32	; 0x20
    387c:	a9 a1       	ldd	r26, Y+33	; 0x21
    387e:	ba a1       	ldd	r27, Y+34	; 0x22
    3880:	83 30       	cpi	r24, 0x03	; 3
    3882:	91 05       	cpc	r25, r1
    3884:	a1 05       	cpc	r26, r1
    3886:	b1 05       	cpc	r27, r1
    3888:	09 f4       	brne	.+2      	; 0x388c <LCD_Print_Int+0x4f0>
    388a:	46 c0       	rjmp	.+140    	; 0x3918 <LCD_Print_Int+0x57c>
    388c:	60 c0       	rjmp	.+192    	; 0x394e <LCD_Print_Int+0x5b2>
    388e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3890:	98 a1       	ldd	r25, Y+32	; 0x20
    3892:	a9 a1       	ldd	r26, Y+33	; 0x21
    3894:	ba a1       	ldd	r27, Y+34	; 0x22
    3896:	87 30       	cpi	r24, 0x07	; 7
    3898:	91 05       	cpc	r25, r1
    389a:	a1 05       	cpc	r26, r1
    389c:	b1 05       	cpc	r27, r1
    389e:	09 f4       	brne	.+2      	; 0x38a2 <LCD_Print_Int+0x506>
    38a0:	4b c0       	rjmp	.+150    	; 0x3938 <LCD_Print_Int+0x59c>
    38a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38a4:	98 a1       	ldd	r25, Y+32	; 0x20
    38a6:	a9 a1       	ldd	r26, Y+33	; 0x21
    38a8:	ba a1       	ldd	r27, Y+34	; 0x22
    38aa:	88 30       	cpi	r24, 0x08	; 8
    38ac:	91 05       	cpc	r25, r1
    38ae:	a1 05       	cpc	r26, r1
    38b0:	b1 05       	cpc	r27, r1
    38b2:	9c f4       	brge	.+38     	; 0x38da <LCD_Print_Int+0x53e>
    38b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38b6:	98 a1       	ldd	r25, Y+32	; 0x20
    38b8:	a9 a1       	ldd	r26, Y+33	; 0x21
    38ba:	ba a1       	ldd	r27, Y+34	; 0x22
    38bc:	85 30       	cpi	r24, 0x05	; 5
    38be:	91 05       	cpc	r25, r1
    38c0:	a1 05       	cpc	r26, r1
    38c2:	b1 05       	cpc	r27, r1
    38c4:	89 f1       	breq	.+98     	; 0x3928 <LCD_Print_Int+0x58c>
    38c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38c8:	98 a1       	ldd	r25, Y+32	; 0x20
    38ca:	a9 a1       	ldd	r26, Y+33	; 0x21
    38cc:	ba a1       	ldd	r27, Y+34	; 0x22
    38ce:	86 30       	cpi	r24, 0x06	; 6
    38d0:	91 05       	cpc	r25, r1
    38d2:	a1 05       	cpc	r26, r1
    38d4:	b1 05       	cpc	r27, r1
    38d6:	61 f1       	breq	.+88     	; 0x3930 <LCD_Print_Int+0x594>
    38d8:	3a c0       	rjmp	.+116    	; 0x394e <LCD_Print_Int+0x5b2>
    38da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38dc:	98 a1       	ldd	r25, Y+32	; 0x20
    38de:	a9 a1       	ldd	r26, Y+33	; 0x21
    38e0:	ba a1       	ldd	r27, Y+34	; 0x22
    38e2:	88 30       	cpi	r24, 0x08	; 8
    38e4:	91 05       	cpc	r25, r1
    38e6:	a1 05       	cpc	r26, r1
    38e8:	b1 05       	cpc	r27, r1
    38ea:	51 f1       	breq	.+84     	; 0x3940 <LCD_Print_Int+0x5a4>
    38ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38ee:	98 a1       	ldd	r25, Y+32	; 0x20
    38f0:	a9 a1       	ldd	r26, Y+33	; 0x21
    38f2:	ba a1       	ldd	r27, Y+34	; 0x22
    38f4:	89 30       	cpi	r24, 0x09	; 9
    38f6:	91 05       	cpc	r25, r1
    38f8:	a1 05       	cpc	r26, r1
    38fa:	b1 05       	cpc	r27, r1
    38fc:	29 f1       	breq	.+74     	; 0x3948 <LCD_Print_Int+0x5ac>
    38fe:	27 c0       	rjmp	.+78     	; 0x394e <LCD_Print_Int+0x5b2>
		{
		case 0:LCD_Write_Char('0');break;
    3900:	80 e3       	ldi	r24, 0x30	; 48
    3902:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3906:	23 c0       	rjmp	.+70     	; 0x394e <LCD_Print_Int+0x5b2>
		case 1:LCD_Write_Char('1');break;
    3908:	81 e3       	ldi	r24, 0x31	; 49
    390a:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    390e:	1f c0       	rjmp	.+62     	; 0x394e <LCD_Print_Int+0x5b2>
		case 2:LCD_Write_Char('2');break;
    3910:	82 e3       	ldi	r24, 0x32	; 50
    3912:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3916:	1b c0       	rjmp	.+54     	; 0x394e <LCD_Print_Int+0x5b2>
		case 3:LCD_Write_Char('3');break;
    3918:	83 e3       	ldi	r24, 0x33	; 51
    391a:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    391e:	17 c0       	rjmp	.+46     	; 0x394e <LCD_Print_Int+0x5b2>
		case 4:LCD_Write_Char('4');break;
    3920:	84 e3       	ldi	r24, 0x34	; 52
    3922:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3926:	13 c0       	rjmp	.+38     	; 0x394e <LCD_Print_Int+0x5b2>
		case 5:LCD_Write_Char('5');break;
    3928:	85 e3       	ldi	r24, 0x35	; 53
    392a:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    392e:	0f c0       	rjmp	.+30     	; 0x394e <LCD_Print_Int+0x5b2>
		case 6:LCD_Write_Char('6');break;
    3930:	86 e3       	ldi	r24, 0x36	; 54
    3932:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3936:	0b c0       	rjmp	.+22     	; 0x394e <LCD_Print_Int+0x5b2>
		case 7:LCD_Write_Char('7');break;
    3938:	87 e3       	ldi	r24, 0x37	; 55
    393a:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    393e:	07 c0       	rjmp	.+14     	; 0x394e <LCD_Print_Int+0x5b2>
		case 8:LCD_Write_Char('8');break;
    3940:	88 e3       	ldi	r24, 0x38	; 56
    3942:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3946:	03 c0       	rjmp	.+6      	; 0x394e <LCD_Print_Int+0x5b2>
		case 9:LCD_Write_Char('9');break;
    3948:	89 e3       	ldi	r24, 0x39	; 57
    394a:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
		}
		switch(fraction)
    394e:	ed 84       	ldd	r14, Y+13	; 0x0d
    3950:	fe 84       	ldd	r15, Y+14	; 0x0e
    3952:	0f 85       	ldd	r16, Y+15	; 0x0f
    3954:	18 89       	ldd	r17, Y+16	; 0x10
    3956:	eb a2       	std	Y+35, r14	; 0x23
    3958:	fc a2       	std	Y+36, r15	; 0x24
    395a:	0d a3       	std	Y+37, r16	; 0x25
    395c:	1e a3       	std	Y+38, r17	; 0x26
    395e:	8b a1       	ldd	r24, Y+35	; 0x23
    3960:	9c a1       	ldd	r25, Y+36	; 0x24
    3962:	ad a1       	ldd	r26, Y+37	; 0x25
    3964:	be a1       	ldd	r27, Y+38	; 0x26
    3966:	84 30       	cpi	r24, 0x04	; 4
    3968:	91 05       	cpc	r25, r1
    396a:	a1 05       	cpc	r26, r1
    396c:	b1 05       	cpc	r27, r1
    396e:	09 f4       	brne	.+2      	; 0x3972 <LCD_Print_Int+0x5d6>
    3970:	89 c0       	rjmp	.+274    	; 0x3a84 <LCD_Print_Int+0x6e8>
    3972:	8b a1       	ldd	r24, Y+35	; 0x23
    3974:	9c a1       	ldd	r25, Y+36	; 0x24
    3976:	ad a1       	ldd	r26, Y+37	; 0x25
    3978:	be a1       	ldd	r27, Y+38	; 0x26
    397a:	85 30       	cpi	r24, 0x05	; 5
    397c:	91 05       	cpc	r25, r1
    397e:	a1 05       	cpc	r26, r1
    3980:	b1 05       	cpc	r27, r1
    3982:	9c f5       	brge	.+102    	; 0x39ea <LCD_Print_Int+0x64e>
    3984:	8b a1       	ldd	r24, Y+35	; 0x23
    3986:	9c a1       	ldd	r25, Y+36	; 0x24
    3988:	ad a1       	ldd	r26, Y+37	; 0x25
    398a:	be a1       	ldd	r27, Y+38	; 0x26
    398c:	81 30       	cpi	r24, 0x01	; 1
    398e:	91 05       	cpc	r25, r1
    3990:	a1 05       	cpc	r26, r1
    3992:	b1 05       	cpc	r27, r1
    3994:	09 f4       	brne	.+2      	; 0x3998 <LCD_Print_Int+0x5fc>
    3996:	67 c0       	rjmp	.+206    	; 0x3a66 <LCD_Print_Int+0x6ca>
    3998:	8b a1       	ldd	r24, Y+35	; 0x23
    399a:	9c a1       	ldd	r25, Y+36	; 0x24
    399c:	ad a1       	ldd	r26, Y+37	; 0x25
    399e:	be a1       	ldd	r27, Y+38	; 0x26
    39a0:	82 30       	cpi	r24, 0x02	; 2
    39a2:	91 05       	cpc	r25, r1
    39a4:	a1 05       	cpc	r26, r1
    39a6:	b1 05       	cpc	r27, r1
    39a8:	5c f4       	brge	.+22     	; 0x39c0 <LCD_Print_Int+0x624>
    39aa:	eb a0       	ldd	r14, Y+35	; 0x23
    39ac:	fc a0       	ldd	r15, Y+36	; 0x24
    39ae:	0d a1       	ldd	r16, Y+37	; 0x25
    39b0:	1e a1       	ldd	r17, Y+38	; 0x26
    39b2:	e1 14       	cp	r14, r1
    39b4:	f1 04       	cpc	r15, r1
    39b6:	01 05       	cpc	r16, r1
    39b8:	11 05       	cpc	r17, r1
    39ba:	09 f4       	brne	.+2      	; 0x39be <LCD_Print_Int+0x622>
    39bc:	4f c0       	rjmp	.+158    	; 0x3a5c <LCD_Print_Int+0x6c0>
    39be:	de c3       	rjmp	.+1980   	; 0x417c <LCD_Print_Int+0xde0>
    39c0:	8b a1       	ldd	r24, Y+35	; 0x23
    39c2:	9c a1       	ldd	r25, Y+36	; 0x24
    39c4:	ad a1       	ldd	r26, Y+37	; 0x25
    39c6:	be a1       	ldd	r27, Y+38	; 0x26
    39c8:	82 30       	cpi	r24, 0x02	; 2
    39ca:	91 05       	cpc	r25, r1
    39cc:	a1 05       	cpc	r26, r1
    39ce:	b1 05       	cpc	r27, r1
    39d0:	09 f4       	brne	.+2      	; 0x39d4 <LCD_Print_Int+0x638>
    39d2:	4e c0       	rjmp	.+156    	; 0x3a70 <LCD_Print_Int+0x6d4>
    39d4:	8b a1       	ldd	r24, Y+35	; 0x23
    39d6:	9c a1       	ldd	r25, Y+36	; 0x24
    39d8:	ad a1       	ldd	r26, Y+37	; 0x25
    39da:	be a1       	ldd	r27, Y+38	; 0x26
    39dc:	83 30       	cpi	r24, 0x03	; 3
    39de:	91 05       	cpc	r25, r1
    39e0:	a1 05       	cpc	r26, r1
    39e2:	b1 05       	cpc	r27, r1
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <LCD_Print_Int+0x64c>
    39e6:	49 c0       	rjmp	.+146    	; 0x3a7a <LCD_Print_Int+0x6de>
    39e8:	c9 c3       	rjmp	.+1938   	; 0x417c <LCD_Print_Int+0xde0>
    39ea:	8b a1       	ldd	r24, Y+35	; 0x23
    39ec:	9c a1       	ldd	r25, Y+36	; 0x24
    39ee:	ad a1       	ldd	r26, Y+37	; 0x25
    39f0:	be a1       	ldd	r27, Y+38	; 0x26
    39f2:	87 30       	cpi	r24, 0x07	; 7
    39f4:	91 05       	cpc	r25, r1
    39f6:	a1 05       	cpc	r26, r1
    39f8:	b1 05       	cpc	r27, r1
    39fa:	09 f4       	brne	.+2      	; 0x39fe <LCD_Print_Int+0x662>
    39fc:	52 c0       	rjmp	.+164    	; 0x3aa2 <LCD_Print_Int+0x706>
    39fe:	8b a1       	ldd	r24, Y+35	; 0x23
    3a00:	9c a1       	ldd	r25, Y+36	; 0x24
    3a02:	ad a1       	ldd	r26, Y+37	; 0x25
    3a04:	be a1       	ldd	r27, Y+38	; 0x26
    3a06:	88 30       	cpi	r24, 0x08	; 8
    3a08:	91 05       	cpc	r25, r1
    3a0a:	a1 05       	cpc	r26, r1
    3a0c:	b1 05       	cpc	r27, r1
    3a0e:	9c f4       	brge	.+38     	; 0x3a36 <LCD_Print_Int+0x69a>
    3a10:	8b a1       	ldd	r24, Y+35	; 0x23
    3a12:	9c a1       	ldd	r25, Y+36	; 0x24
    3a14:	ad a1       	ldd	r26, Y+37	; 0x25
    3a16:	be a1       	ldd	r27, Y+38	; 0x26
    3a18:	85 30       	cpi	r24, 0x05	; 5
    3a1a:	91 05       	cpc	r25, r1
    3a1c:	a1 05       	cpc	r26, r1
    3a1e:	b1 05       	cpc	r27, r1
    3a20:	b1 f1       	breq	.+108    	; 0x3a8e <LCD_Print_Int+0x6f2>
    3a22:	8b a1       	ldd	r24, Y+35	; 0x23
    3a24:	9c a1       	ldd	r25, Y+36	; 0x24
    3a26:	ad a1       	ldd	r26, Y+37	; 0x25
    3a28:	be a1       	ldd	r27, Y+38	; 0x26
    3a2a:	86 30       	cpi	r24, 0x06	; 6
    3a2c:	91 05       	cpc	r25, r1
    3a2e:	a1 05       	cpc	r26, r1
    3a30:	b1 05       	cpc	r27, r1
    3a32:	91 f1       	breq	.+100    	; 0x3a98 <LCD_Print_Int+0x6fc>
    3a34:	a3 c3       	rjmp	.+1862   	; 0x417c <LCD_Print_Int+0xde0>
    3a36:	8b a1       	ldd	r24, Y+35	; 0x23
    3a38:	9c a1       	ldd	r25, Y+36	; 0x24
    3a3a:	ad a1       	ldd	r26, Y+37	; 0x25
    3a3c:	be a1       	ldd	r27, Y+38	; 0x26
    3a3e:	88 30       	cpi	r24, 0x08	; 8
    3a40:	91 05       	cpc	r25, r1
    3a42:	a1 05       	cpc	r26, r1
    3a44:	b1 05       	cpc	r27, r1
    3a46:	91 f1       	breq	.+100    	; 0x3aac <LCD_Print_Int+0x710>
    3a48:	8b a1       	ldd	r24, Y+35	; 0x23
    3a4a:	9c a1       	ldd	r25, Y+36	; 0x24
    3a4c:	ad a1       	ldd	r26, Y+37	; 0x25
    3a4e:	be a1       	ldd	r27, Y+38	; 0x26
    3a50:	89 30       	cpi	r24, 0x09	; 9
    3a52:	91 05       	cpc	r25, r1
    3a54:	a1 05       	cpc	r26, r1
    3a56:	b1 05       	cpc	r27, r1
    3a58:	71 f1       	breq	.+92     	; 0x3ab6 <LCD_Print_Int+0x71a>
    3a5a:	90 c3       	rjmp	.+1824   	; 0x417c <LCD_Print_Int+0xde0>
		{
		case 0:LCD_Write_String(".0");break;
    3a5c:	81 e7       	ldi	r24, 0x71	; 113
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    3a64:	8b c3       	rjmp	.+1814   	; 0x417c <LCD_Print_Int+0xde0>
		case 1:LCD_Write_String(".1");break;
    3a66:	84 e7       	ldi	r24, 0x74	; 116
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    3a6e:	86 c3       	rjmp	.+1804   	; 0x417c <LCD_Print_Int+0xde0>
		case 2:LCD_Write_String(".2");break;
    3a70:	87 e7       	ldi	r24, 0x77	; 119
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    3a78:	81 c3       	rjmp	.+1794   	; 0x417c <LCD_Print_Int+0xde0>
		case 3:LCD_Write_String(".3");break;
    3a7a:	8a e7       	ldi	r24, 0x7A	; 122
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    3a82:	7c c3       	rjmp	.+1784   	; 0x417c <LCD_Print_Int+0xde0>
		case 4:LCD_Write_String(".4");break;
    3a84:	8d e7       	ldi	r24, 0x7D	; 125
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    3a8c:	77 c3       	rjmp	.+1774   	; 0x417c <LCD_Print_Int+0xde0>
		case 5:LCD_Write_String(".5");break;
    3a8e:	80 e8       	ldi	r24, 0x80	; 128
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    3a96:	72 c3       	rjmp	.+1764   	; 0x417c <LCD_Print_Int+0xde0>
		case 6:LCD_Write_String(".6");break;
    3a98:	83 e8       	ldi	r24, 0x83	; 131
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    3aa0:	6d c3       	rjmp	.+1754   	; 0x417c <LCD_Print_Int+0xde0>
		case 7:LCD_Write_String(".7");break;
    3aa2:	86 e8       	ldi	r24, 0x86	; 134
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    3aaa:	68 c3       	rjmp	.+1744   	; 0x417c <LCD_Print_Int+0xde0>
		case 8:LCD_Write_String(".8");break;
    3aac:	89 e8       	ldi	r24, 0x89	; 137
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    3ab4:	63 c3       	rjmp	.+1734   	; 0x417c <LCD_Print_Int+0xde0>
		case 9:LCD_Write_String(".9");break;
    3ab6:	8c e8       	ldi	r24, 0x8C	; 140
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    3abe:	5e c3       	rjmp	.+1724   	; 0x417c <LCD_Print_Int+0xde0>
		}

	}
	else if(integer<0)
    3ac0:	69 89       	ldd	r22, Y+17	; 0x11
    3ac2:	7a 89       	ldd	r23, Y+18	; 0x12
    3ac4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	40 e0       	ldi	r20, 0x00	; 0
    3ace:	50 e0       	ldi	r21, 0x00	; 0
    3ad0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ad4:	88 23       	and	r24, r24
    3ad6:	0c f0       	brlt	.+2      	; 0x3ada <LCD_Print_Int+0x73e>
    3ad8:	51 c3       	rjmp	.+1698   	; 0x417c <LCD_Print_Int+0xde0>
	{
		integer = (integer)*(-1);
    3ada:	89 89       	ldd	r24, Y+17	; 0x11
    3adc:	9a 89       	ldd	r25, Y+18	; 0x12
    3ade:	ab 89       	ldd	r26, Y+19	; 0x13
    3ae0:	bc 89       	ldd	r27, Y+20	; 0x14
    3ae2:	b0 58       	subi	r27, 0x80	; 128
    3ae4:	89 8b       	std	Y+17, r24	; 0x11
    3ae6:	9a 8b       	std	Y+18, r25	; 0x12
    3ae8:	ab 8b       	std	Y+19, r26	; 0x13
    3aea:	bc 8b       	std	Y+20, r27	; 0x14
		fraction = integer*10;
    3aec:	69 89       	ldd	r22, Y+17	; 0x11
    3aee:	7a 89       	ldd	r23, Y+18	; 0x12
    3af0:	8b 89       	ldd	r24, Y+19	; 0x13
    3af2:	9c 89       	ldd	r25, Y+20	; 0x14
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	40 e2       	ldi	r20, 0x20	; 32
    3afa:	51 e4       	ldi	r21, 0x41	; 65
    3afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	bc 01       	movw	r22, r24
    3b06:	cd 01       	movw	r24, r26
    3b08:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	8d 87       	std	Y+13, r24	; 0x0d
    3b12:	9e 87       	std	Y+14, r25	; 0x0e
    3b14:	af 87       	std	Y+15, r26	; 0x0f
    3b16:	b8 8b       	std	Y+16, r27	; 0x10
		fraction = fraction%10;
    3b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b1c:	af 85       	ldd	r26, Y+15	; 0x0f
    3b1e:	b8 89       	ldd	r27, Y+16	; 0x10
    3b20:	2a e0       	ldi	r18, 0x0A	; 10
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 e0       	ldi	r20, 0x00	; 0
    3b26:	50 e0       	ldi	r21, 0x00	; 0
    3b28:	bc 01       	movw	r22, r24
    3b2a:	cd 01       	movw	r24, r26
    3b2c:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	8d 87       	std	Y+13, r24	; 0x0d
    3b36:	9e 87       	std	Y+14, r25	; 0x0e
    3b38:	af 87       	std	Y+15, r26	; 0x0f
    3b3a:	b8 8b       	std	Y+16, r27	; 0x10
		thousands = (s32)integer%10;
    3b3c:	69 89       	ldd	r22, Y+17	; 0x11
    3b3e:	7a 89       	ldd	r23, Y+18	; 0x12
    3b40:	8b 89       	ldd	r24, Y+19	; 0x13
    3b42:	9c 89       	ldd	r25, Y+20	; 0x14
    3b44:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	2a e0       	ldi	r18, 0x0A	; 10
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	40 e0       	ldi	r20, 0x00	; 0
    3b52:	50 e0       	ldi	r21, 0x00	; 0
    3b54:	bc 01       	movw	r22, r24
    3b56:	cd 01       	movw	r24, r26
    3b58:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	89 87       	std	Y+9, r24	; 0x09
    3b62:	9a 87       	std	Y+10, r25	; 0x0a
    3b64:	ab 87       	std	Y+11, r26	; 0x0b
    3b66:	bc 87       	std	Y+12, r27	; 0x0c
		dozens = (((s32)integer-thousands)/10)%10;
    3b68:	69 89       	ldd	r22, Y+17	; 0x11
    3b6a:	7a 89       	ldd	r23, Y+18	; 0x12
    3b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b70:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3b74:	9b 01       	movw	r18, r22
    3b76:	ac 01       	movw	r20, r24
    3b78:	89 85       	ldd	r24, Y+9	; 0x09
    3b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7c:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b7e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b80:	79 01       	movw	r14, r18
    3b82:	8a 01       	movw	r16, r20
    3b84:	e8 1a       	sub	r14, r24
    3b86:	f9 0a       	sbc	r15, r25
    3b88:	0a 0b       	sbc	r16, r26
    3b8a:	1b 0b       	sbc	r17, r27
    3b8c:	d8 01       	movw	r26, r16
    3b8e:	c7 01       	movw	r24, r14
    3b90:	2a e0       	ldi	r18, 0x0A	; 10
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e0       	ldi	r20, 0x00	; 0
    3b96:	50 e0       	ldi	r21, 0x00	; 0
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    3ba0:	da 01       	movw	r26, r20
    3ba2:	c9 01       	movw	r24, r18
    3ba4:	2a e0       	ldi	r18, 0x0A	; 10
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	40 e0       	ldi	r20, 0x00	; 0
    3baa:	50 e0       	ldi	r21, 0x00	; 0
    3bac:	bc 01       	movw	r22, r24
    3bae:	cd 01       	movw	r24, r26
    3bb0:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	8d 83       	std	Y+5, r24	; 0x05
    3bba:	9e 83       	std	Y+6, r25	; 0x06
    3bbc:	af 83       	std	Y+7, r26	; 0x07
    3bbe:	b8 87       	std	Y+8, r27	; 0x08
		ones = (((s32)integer-dozens)/100)%10;
    3bc0:	69 89       	ldd	r22, Y+17	; 0x11
    3bc2:	7a 89       	ldd	r23, Y+18	; 0x12
    3bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    3bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    3bc8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3bcc:	9b 01       	movw	r18, r22
    3bce:	ac 01       	movw	r20, r24
    3bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd4:	af 81       	ldd	r26, Y+7	; 0x07
    3bd6:	b8 85       	ldd	r27, Y+8	; 0x08
    3bd8:	79 01       	movw	r14, r18
    3bda:	8a 01       	movw	r16, r20
    3bdc:	e8 1a       	sub	r14, r24
    3bde:	f9 0a       	sbc	r15, r25
    3be0:	0a 0b       	sbc	r16, r26
    3be2:	1b 0b       	sbc	r17, r27
    3be4:	d8 01       	movw	r26, r16
    3be6:	c7 01       	movw	r24, r14
    3be8:	24 e6       	ldi	r18, 0x64	; 100
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	40 e0       	ldi	r20, 0x00	; 0
    3bee:	50 e0       	ldi	r21, 0x00	; 0
    3bf0:	bc 01       	movw	r22, r24
    3bf2:	cd 01       	movw	r24, r26
    3bf4:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    3bf8:	da 01       	movw	r26, r20
    3bfa:	c9 01       	movw	r24, r18
    3bfc:	2a e0       	ldi	r18, 0x0A	; 10
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	40 e0       	ldi	r20, 0x00	; 0
    3c02:	50 e0       	ldi	r21, 0x00	; 0
    3c04:	bc 01       	movw	r22, r24
    3c06:	cd 01       	movw	r24, r26
    3c08:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__divmodsi4>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	89 83       	std	Y+1, r24	; 0x01
    3c12:	9a 83       	std	Y+2, r25	; 0x02
    3c14:	ab 83       	std	Y+3, r26	; 0x03
    3c16:	bc 83       	std	Y+4, r27	; 0x04
		LCD_Write_Char('-');
    3c18:	8d e2       	ldi	r24, 0x2D	; 45
    3c1a:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
		switch(ones)
    3c1e:	89 81       	ldd	r24, Y+1	; 0x01
    3c20:	9a 81       	ldd	r25, Y+2	; 0x02
    3c22:	ab 81       	ldd	r26, Y+3	; 0x03
    3c24:	bc 81       	ldd	r27, Y+4	; 0x04
    3c26:	8f a3       	std	Y+39, r24	; 0x27
    3c28:	98 a7       	std	Y+40, r25	; 0x28
    3c2a:	a9 a7       	std	Y+41, r26	; 0x29
    3c2c:	ba a7       	std	Y+42, r27	; 0x2a
    3c2e:	8f a1       	ldd	r24, Y+39	; 0x27
    3c30:	98 a5       	ldd	r25, Y+40	; 0x28
    3c32:	a9 a5       	ldd	r26, Y+41	; 0x29
    3c34:	ba a5       	ldd	r27, Y+42	; 0x2a
    3c36:	85 30       	cpi	r24, 0x05	; 5
    3c38:	91 05       	cpc	r25, r1
    3c3a:	a1 05       	cpc	r26, r1
    3c3c:	b1 05       	cpc	r27, r1
    3c3e:	09 f4       	brne	.+2      	; 0x3c42 <LCD_Print_Int+0x8a6>
    3c40:	6e c0       	rjmp	.+220    	; 0x3d1e <LCD_Print_Int+0x982>
    3c42:	8f a1       	ldd	r24, Y+39	; 0x27
    3c44:	98 a5       	ldd	r25, Y+40	; 0x28
    3c46:	a9 a5       	ldd	r26, Y+41	; 0x29
    3c48:	ba a5       	ldd	r27, Y+42	; 0x2a
    3c4a:	86 30       	cpi	r24, 0x06	; 6
    3c4c:	91 05       	cpc	r25, r1
    3c4e:	a1 05       	cpc	r26, r1
    3c50:	b1 05       	cpc	r27, r1
    3c52:	84 f5       	brge	.+96     	; 0x3cb4 <LCD_Print_Int+0x918>
    3c54:	8f a1       	ldd	r24, Y+39	; 0x27
    3c56:	98 a5       	ldd	r25, Y+40	; 0x28
    3c58:	a9 a5       	ldd	r26, Y+41	; 0x29
    3c5a:	ba a5       	ldd	r27, Y+42	; 0x2a
    3c5c:	82 30       	cpi	r24, 0x02	; 2
    3c5e:	91 05       	cpc	r25, r1
    3c60:	a1 05       	cpc	r26, r1
    3c62:	b1 05       	cpc	r27, r1
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <LCD_Print_Int+0x8cc>
    3c66:	4f c0       	rjmp	.+158    	; 0x3d06 <LCD_Print_Int+0x96a>
    3c68:	8f a1       	ldd	r24, Y+39	; 0x27
    3c6a:	98 a5       	ldd	r25, Y+40	; 0x28
    3c6c:	a9 a5       	ldd	r26, Y+41	; 0x29
    3c6e:	ba a5       	ldd	r27, Y+42	; 0x2a
    3c70:	83 30       	cpi	r24, 0x03	; 3
    3c72:	91 05       	cpc	r25, r1
    3c74:	a1 05       	cpc	r26, r1
    3c76:	b1 05       	cpc	r27, r1
    3c78:	54 f4       	brge	.+20     	; 0x3c8e <LCD_Print_Int+0x8f2>
    3c7a:	8f a1       	ldd	r24, Y+39	; 0x27
    3c7c:	98 a5       	ldd	r25, Y+40	; 0x28
    3c7e:	a9 a5       	ldd	r26, Y+41	; 0x29
    3c80:	ba a5       	ldd	r27, Y+42	; 0x2a
    3c82:	81 30       	cpi	r24, 0x01	; 1
    3c84:	91 05       	cpc	r25, r1
    3c86:	a1 05       	cpc	r26, r1
    3c88:	b1 05       	cpc	r27, r1
    3c8a:	c9 f1       	breq	.+114    	; 0x3cfe <LCD_Print_Int+0x962>
    3c8c:	5b c0       	rjmp	.+182    	; 0x3d44 <LCD_Print_Int+0x9a8>
    3c8e:	8f a1       	ldd	r24, Y+39	; 0x27
    3c90:	98 a5       	ldd	r25, Y+40	; 0x28
    3c92:	a9 a5       	ldd	r26, Y+41	; 0x29
    3c94:	ba a5       	ldd	r27, Y+42	; 0x2a
    3c96:	83 30       	cpi	r24, 0x03	; 3
    3c98:	91 05       	cpc	r25, r1
    3c9a:	a1 05       	cpc	r26, r1
    3c9c:	b1 05       	cpc	r27, r1
    3c9e:	b9 f1       	breq	.+110    	; 0x3d0e <LCD_Print_Int+0x972>
    3ca0:	8f a1       	ldd	r24, Y+39	; 0x27
    3ca2:	98 a5       	ldd	r25, Y+40	; 0x28
    3ca4:	a9 a5       	ldd	r26, Y+41	; 0x29
    3ca6:	ba a5       	ldd	r27, Y+42	; 0x2a
    3ca8:	84 30       	cpi	r24, 0x04	; 4
    3caa:	91 05       	cpc	r25, r1
    3cac:	a1 05       	cpc	r26, r1
    3cae:	b1 05       	cpc	r27, r1
    3cb0:	91 f1       	breq	.+100    	; 0x3d16 <LCD_Print_Int+0x97a>
    3cb2:	48 c0       	rjmp	.+144    	; 0x3d44 <LCD_Print_Int+0x9a8>
    3cb4:	8f a1       	ldd	r24, Y+39	; 0x27
    3cb6:	98 a5       	ldd	r25, Y+40	; 0x28
    3cb8:	a9 a5       	ldd	r26, Y+41	; 0x29
    3cba:	ba a5       	ldd	r27, Y+42	; 0x2a
    3cbc:	87 30       	cpi	r24, 0x07	; 7
    3cbe:	91 05       	cpc	r25, r1
    3cc0:	a1 05       	cpc	r26, r1
    3cc2:	b1 05       	cpc	r27, r1
    3cc4:	a1 f1       	breq	.+104    	; 0x3d2e <LCD_Print_Int+0x992>
    3cc6:	8f a1       	ldd	r24, Y+39	; 0x27
    3cc8:	98 a5       	ldd	r25, Y+40	; 0x28
    3cca:	a9 a5       	ldd	r26, Y+41	; 0x29
    3ccc:	ba a5       	ldd	r27, Y+42	; 0x2a
    3cce:	87 30       	cpi	r24, 0x07	; 7
    3cd0:	91 05       	cpc	r25, r1
    3cd2:	a1 05       	cpc	r26, r1
    3cd4:	b1 05       	cpc	r27, r1
    3cd6:	3c f1       	brlt	.+78     	; 0x3d26 <LCD_Print_Int+0x98a>
    3cd8:	8f a1       	ldd	r24, Y+39	; 0x27
    3cda:	98 a5       	ldd	r25, Y+40	; 0x28
    3cdc:	a9 a5       	ldd	r26, Y+41	; 0x29
    3cde:	ba a5       	ldd	r27, Y+42	; 0x2a
    3ce0:	88 30       	cpi	r24, 0x08	; 8
    3ce2:	91 05       	cpc	r25, r1
    3ce4:	a1 05       	cpc	r26, r1
    3ce6:	b1 05       	cpc	r27, r1
    3ce8:	31 f1       	breq	.+76     	; 0x3d36 <LCD_Print_Int+0x99a>
    3cea:	8f a1       	ldd	r24, Y+39	; 0x27
    3cec:	98 a5       	ldd	r25, Y+40	; 0x28
    3cee:	a9 a5       	ldd	r26, Y+41	; 0x29
    3cf0:	ba a5       	ldd	r27, Y+42	; 0x2a
    3cf2:	89 30       	cpi	r24, 0x09	; 9
    3cf4:	91 05       	cpc	r25, r1
    3cf6:	a1 05       	cpc	r26, r1
    3cf8:	b1 05       	cpc	r27, r1
    3cfa:	09 f1       	breq	.+66     	; 0x3d3e <LCD_Print_Int+0x9a2>
    3cfc:	23 c0       	rjmp	.+70     	; 0x3d44 <LCD_Print_Int+0x9a8>
		{
		//case 0:LCD_Write_Char('0');break;
		case 1:LCD_Write_Char('1');break;
    3cfe:	81 e3       	ldi	r24, 0x31	; 49
    3d00:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3d04:	1f c0       	rjmp	.+62     	; 0x3d44 <LCD_Print_Int+0x9a8>
		case 2:LCD_Write_Char('2');break;
    3d06:	82 e3       	ldi	r24, 0x32	; 50
    3d08:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3d0c:	1b c0       	rjmp	.+54     	; 0x3d44 <LCD_Print_Int+0x9a8>
		case 3:LCD_Write_Char('3');break;
    3d0e:	83 e3       	ldi	r24, 0x33	; 51
    3d10:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3d14:	17 c0       	rjmp	.+46     	; 0x3d44 <LCD_Print_Int+0x9a8>
		case 4:LCD_Write_Char('4');break;
    3d16:	84 e3       	ldi	r24, 0x34	; 52
    3d18:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3d1c:	13 c0       	rjmp	.+38     	; 0x3d44 <LCD_Print_Int+0x9a8>
		case 5:LCD_Write_Char('5');break;
    3d1e:	85 e3       	ldi	r24, 0x35	; 53
    3d20:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3d24:	0f c0       	rjmp	.+30     	; 0x3d44 <LCD_Print_Int+0x9a8>
		case 6:LCD_Write_Char('6');break;
    3d26:	86 e3       	ldi	r24, 0x36	; 54
    3d28:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3d2c:	0b c0       	rjmp	.+22     	; 0x3d44 <LCD_Print_Int+0x9a8>
		case 7:LCD_Write_Char('7');break;
    3d2e:	87 e3       	ldi	r24, 0x37	; 55
    3d30:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3d34:	07 c0       	rjmp	.+14     	; 0x3d44 <LCD_Print_Int+0x9a8>
		case 8:LCD_Write_Char('8');break;
    3d36:	88 e3       	ldi	r24, 0x38	; 56
    3d38:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3d3c:	03 c0       	rjmp	.+6      	; 0x3d44 <LCD_Print_Int+0x9a8>
		case 9:LCD_Write_Char('9');break;
    3d3e:	89 e3       	ldi	r24, 0x39	; 57
    3d40:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
		}

		switch(dozens)
    3d44:	ed 80       	ldd	r14, Y+5	; 0x05
    3d46:	fe 80       	ldd	r15, Y+6	; 0x06
    3d48:	0f 81       	ldd	r16, Y+7	; 0x07
    3d4a:	18 85       	ldd	r17, Y+8	; 0x08
    3d4c:	eb a6       	std	Y+43, r14	; 0x2b
    3d4e:	fc a6       	std	Y+44, r15	; 0x2c
    3d50:	0d a7       	std	Y+45, r16	; 0x2d
    3d52:	1e a7       	std	Y+46, r17	; 0x2e
    3d54:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d56:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d58:	ad a5       	ldd	r26, Y+45	; 0x2d
    3d5a:	be a5       	ldd	r27, Y+46	; 0x2e
    3d5c:	84 30       	cpi	r24, 0x04	; 4
    3d5e:	91 05       	cpc	r25, r1
    3d60:	a1 05       	cpc	r26, r1
    3d62:	b1 05       	cpc	r27, r1
    3d64:	09 f4       	brne	.+2      	; 0x3d68 <LCD_Print_Int+0x9cc>
    3d66:	8d c0       	rjmp	.+282    	; 0x3e82 <LCD_Print_Int+0xae6>
    3d68:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d6c:	ad a5       	ldd	r26, Y+45	; 0x2d
    3d6e:	be a5       	ldd	r27, Y+46	; 0x2e
    3d70:	85 30       	cpi	r24, 0x05	; 5
    3d72:	91 05       	cpc	r25, r1
    3d74:	a1 05       	cpc	r26, r1
    3d76:	b1 05       	cpc	r27, r1
    3d78:	9c f5       	brge	.+102    	; 0x3de0 <LCD_Print_Int+0xa44>
    3d7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d7e:	ad a5       	ldd	r26, Y+45	; 0x2d
    3d80:	be a5       	ldd	r27, Y+46	; 0x2e
    3d82:	81 30       	cpi	r24, 0x01	; 1
    3d84:	91 05       	cpc	r25, r1
    3d86:	a1 05       	cpc	r26, r1
    3d88:	b1 05       	cpc	r27, r1
    3d8a:	09 f4       	brne	.+2      	; 0x3d8e <LCD_Print_Int+0x9f2>
    3d8c:	6e c0       	rjmp	.+220    	; 0x3e6a <LCD_Print_Int+0xace>
    3d8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d90:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d92:	ad a5       	ldd	r26, Y+45	; 0x2d
    3d94:	be a5       	ldd	r27, Y+46	; 0x2e
    3d96:	82 30       	cpi	r24, 0x02	; 2
    3d98:	91 05       	cpc	r25, r1
    3d9a:	a1 05       	cpc	r26, r1
    3d9c:	b1 05       	cpc	r27, r1
    3d9e:	5c f4       	brge	.+22     	; 0x3db6 <LCD_Print_Int+0xa1a>
    3da0:	eb a4       	ldd	r14, Y+43	; 0x2b
    3da2:	fc a4       	ldd	r15, Y+44	; 0x2c
    3da4:	0d a5       	ldd	r16, Y+45	; 0x2d
    3da6:	1e a5       	ldd	r17, Y+46	; 0x2e
    3da8:	e1 14       	cp	r14, r1
    3daa:	f1 04       	cpc	r15, r1
    3dac:	01 05       	cpc	r16, r1
    3dae:	11 05       	cpc	r17, r1
    3db0:	09 f4       	brne	.+2      	; 0x3db4 <LCD_Print_Int+0xa18>
    3db2:	4f c0       	rjmp	.+158    	; 0x3e52 <LCD_Print_Int+0xab6>
    3db4:	7d c0       	rjmp	.+250    	; 0x3eb0 <LCD_Print_Int+0xb14>
    3db6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3db8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dba:	ad a5       	ldd	r26, Y+45	; 0x2d
    3dbc:	be a5       	ldd	r27, Y+46	; 0x2e
    3dbe:	82 30       	cpi	r24, 0x02	; 2
    3dc0:	91 05       	cpc	r25, r1
    3dc2:	a1 05       	cpc	r26, r1
    3dc4:	b1 05       	cpc	r27, r1
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <LCD_Print_Int+0xa2e>
    3dc8:	54 c0       	rjmp	.+168    	; 0x3e72 <LCD_Print_Int+0xad6>
    3dca:	8b a5       	ldd	r24, Y+43	; 0x2b
    3dcc:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dce:	ad a5       	ldd	r26, Y+45	; 0x2d
    3dd0:	be a5       	ldd	r27, Y+46	; 0x2e
    3dd2:	83 30       	cpi	r24, 0x03	; 3
    3dd4:	91 05       	cpc	r25, r1
    3dd6:	a1 05       	cpc	r26, r1
    3dd8:	b1 05       	cpc	r27, r1
    3dda:	09 f4       	brne	.+2      	; 0x3dde <LCD_Print_Int+0xa42>
    3ddc:	4e c0       	rjmp	.+156    	; 0x3e7a <LCD_Print_Int+0xade>
    3dde:	68 c0       	rjmp	.+208    	; 0x3eb0 <LCD_Print_Int+0xb14>
    3de0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3de2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3de4:	ad a5       	ldd	r26, Y+45	; 0x2d
    3de6:	be a5       	ldd	r27, Y+46	; 0x2e
    3de8:	87 30       	cpi	r24, 0x07	; 7
    3dea:	91 05       	cpc	r25, r1
    3dec:	a1 05       	cpc	r26, r1
    3dee:	b1 05       	cpc	r27, r1
    3df0:	09 f4       	brne	.+2      	; 0x3df4 <LCD_Print_Int+0xa58>
    3df2:	53 c0       	rjmp	.+166    	; 0x3e9a <LCD_Print_Int+0xafe>
    3df4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3df6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3df8:	ad a5       	ldd	r26, Y+45	; 0x2d
    3dfa:	be a5       	ldd	r27, Y+46	; 0x2e
    3dfc:	88 30       	cpi	r24, 0x08	; 8
    3dfe:	91 05       	cpc	r25, r1
    3e00:	a1 05       	cpc	r26, r1
    3e02:	b1 05       	cpc	r27, r1
    3e04:	9c f4       	brge	.+38     	; 0x3e2c <LCD_Print_Int+0xa90>
    3e06:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e08:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e0a:	ad a5       	ldd	r26, Y+45	; 0x2d
    3e0c:	be a5       	ldd	r27, Y+46	; 0x2e
    3e0e:	85 30       	cpi	r24, 0x05	; 5
    3e10:	91 05       	cpc	r25, r1
    3e12:	a1 05       	cpc	r26, r1
    3e14:	b1 05       	cpc	r27, r1
    3e16:	c9 f1       	breq	.+114    	; 0x3e8a <LCD_Print_Int+0xaee>
    3e18:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e1c:	ad a5       	ldd	r26, Y+45	; 0x2d
    3e1e:	be a5       	ldd	r27, Y+46	; 0x2e
    3e20:	86 30       	cpi	r24, 0x06	; 6
    3e22:	91 05       	cpc	r25, r1
    3e24:	a1 05       	cpc	r26, r1
    3e26:	b1 05       	cpc	r27, r1
    3e28:	a1 f1       	breq	.+104    	; 0x3e92 <LCD_Print_Int+0xaf6>
    3e2a:	42 c0       	rjmp	.+132    	; 0x3eb0 <LCD_Print_Int+0xb14>
    3e2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e30:	ad a5       	ldd	r26, Y+45	; 0x2d
    3e32:	be a5       	ldd	r27, Y+46	; 0x2e
    3e34:	88 30       	cpi	r24, 0x08	; 8
    3e36:	91 05       	cpc	r25, r1
    3e38:	a1 05       	cpc	r26, r1
    3e3a:	b1 05       	cpc	r27, r1
    3e3c:	91 f1       	breq	.+100    	; 0x3ea2 <LCD_Print_Int+0xb06>
    3e3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e40:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e42:	ad a5       	ldd	r26, Y+45	; 0x2d
    3e44:	be a5       	ldd	r27, Y+46	; 0x2e
    3e46:	89 30       	cpi	r24, 0x09	; 9
    3e48:	91 05       	cpc	r25, r1
    3e4a:	a1 05       	cpc	r26, r1
    3e4c:	b1 05       	cpc	r27, r1
    3e4e:	69 f1       	breq	.+90     	; 0x3eaa <LCD_Print_Int+0xb0e>
    3e50:	2f c0       	rjmp	.+94     	; 0x3eb0 <LCD_Print_Int+0xb14>
		{

		case 0:
			if(ones == 0)
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
    3e54:	9a 81       	ldd	r25, Y+2	; 0x02
    3e56:	ab 81       	ldd	r26, Y+3	; 0x03
    3e58:	bc 81       	ldd	r27, Y+4	; 0x04
    3e5a:	00 97       	sbiw	r24, 0x00	; 0
    3e5c:	a1 05       	cpc	r26, r1
    3e5e:	b1 05       	cpc	r27, r1
    3e60:	39 f1       	breq	.+78     	; 0x3eb0 <LCD_Print_Int+0xb14>
			{
				break;
			}
			else
			{
				LCD_Write_Char('0');break;
    3e62:	80 e3       	ldi	r24, 0x30	; 48
    3e64:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3e68:	23 c0       	rjmp	.+70     	; 0x3eb0 <LCD_Print_Int+0xb14>
			}
		case 1:LCD_Write_Char('1');break;
    3e6a:	81 e3       	ldi	r24, 0x31	; 49
    3e6c:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3e70:	1f c0       	rjmp	.+62     	; 0x3eb0 <LCD_Print_Int+0xb14>
		case 2:LCD_Write_Char('2');break;
    3e72:	82 e3       	ldi	r24, 0x32	; 50
    3e74:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3e78:	1b c0       	rjmp	.+54     	; 0x3eb0 <LCD_Print_Int+0xb14>
		case 3:LCD_Write_Char('3');break;
    3e7a:	83 e3       	ldi	r24, 0x33	; 51
    3e7c:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3e80:	17 c0       	rjmp	.+46     	; 0x3eb0 <LCD_Print_Int+0xb14>
		case 4:LCD_Write_Char('4');break;
    3e82:	84 e3       	ldi	r24, 0x34	; 52
    3e84:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3e88:	13 c0       	rjmp	.+38     	; 0x3eb0 <LCD_Print_Int+0xb14>
		case 5:LCD_Write_Char('5');break;
    3e8a:	85 e3       	ldi	r24, 0x35	; 53
    3e8c:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3e90:	0f c0       	rjmp	.+30     	; 0x3eb0 <LCD_Print_Int+0xb14>
		case 6:LCD_Write_Char('6');break;
    3e92:	86 e3       	ldi	r24, 0x36	; 54
    3e94:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3e98:	0b c0       	rjmp	.+22     	; 0x3eb0 <LCD_Print_Int+0xb14>
		case 7:LCD_Write_Char('7');break;
    3e9a:	87 e3       	ldi	r24, 0x37	; 55
    3e9c:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3ea0:	07 c0       	rjmp	.+14     	; 0x3eb0 <LCD_Print_Int+0xb14>
		case 8:LCD_Write_Char('8');break;
    3ea2:	88 e3       	ldi	r24, 0x38	; 56
    3ea4:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3ea8:	03 c0       	rjmp	.+6      	; 0x3eb0 <LCD_Print_Int+0xb14>
		case 9:LCD_Write_Char('9');break;
    3eaa:	89 e3       	ldi	r24, 0x39	; 57
    3eac:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
		}
		switch(thousands)
    3eb0:	e9 84       	ldd	r14, Y+9	; 0x09
    3eb2:	fa 84       	ldd	r15, Y+10	; 0x0a
    3eb4:	0b 85       	ldd	r16, Y+11	; 0x0b
    3eb6:	1c 85       	ldd	r17, Y+12	; 0x0c
    3eb8:	ef a6       	std	Y+47, r14	; 0x2f
    3eba:	f8 aa       	std	Y+48, r15	; 0x30
    3ebc:	09 ab       	std	Y+49, r16	; 0x31
    3ebe:	1a ab       	std	Y+50, r17	; 0x32
    3ec0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ec2:	98 a9       	ldd	r25, Y+48	; 0x30
    3ec4:	a9 a9       	ldd	r26, Y+49	; 0x31
    3ec6:	ba a9       	ldd	r27, Y+50	; 0x32
    3ec8:	84 30       	cpi	r24, 0x04	; 4
    3eca:	91 05       	cpc	r25, r1
    3ecc:	a1 05       	cpc	r26, r1
    3ece:	b1 05       	cpc	r27, r1
    3ed0:	09 f4       	brne	.+2      	; 0x3ed4 <LCD_Print_Int+0xb38>
    3ed2:	85 c0       	rjmp	.+266    	; 0x3fde <LCD_Print_Int+0xc42>
    3ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ed6:	98 a9       	ldd	r25, Y+48	; 0x30
    3ed8:	a9 a9       	ldd	r26, Y+49	; 0x31
    3eda:	ba a9       	ldd	r27, Y+50	; 0x32
    3edc:	85 30       	cpi	r24, 0x05	; 5
    3ede:	91 05       	cpc	r25, r1
    3ee0:	a1 05       	cpc	r26, r1
    3ee2:	b1 05       	cpc	r27, r1
    3ee4:	9c f5       	brge	.+102    	; 0x3f4c <LCD_Print_Int+0xbb0>
    3ee6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ee8:	98 a9       	ldd	r25, Y+48	; 0x30
    3eea:	a9 a9       	ldd	r26, Y+49	; 0x31
    3eec:	ba a9       	ldd	r27, Y+50	; 0x32
    3eee:	81 30       	cpi	r24, 0x01	; 1
    3ef0:	91 05       	cpc	r25, r1
    3ef2:	a1 05       	cpc	r26, r1
    3ef4:	b1 05       	cpc	r27, r1
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <LCD_Print_Int+0xb5e>
    3ef8:	66 c0       	rjmp	.+204    	; 0x3fc6 <LCD_Print_Int+0xc2a>
    3efa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3efc:	98 a9       	ldd	r25, Y+48	; 0x30
    3efe:	a9 a9       	ldd	r26, Y+49	; 0x31
    3f00:	ba a9       	ldd	r27, Y+50	; 0x32
    3f02:	82 30       	cpi	r24, 0x02	; 2
    3f04:	91 05       	cpc	r25, r1
    3f06:	a1 05       	cpc	r26, r1
    3f08:	b1 05       	cpc	r27, r1
    3f0a:	5c f4       	brge	.+22     	; 0x3f22 <LCD_Print_Int+0xb86>
    3f0c:	ef a4       	ldd	r14, Y+47	; 0x2f
    3f0e:	f8 a8       	ldd	r15, Y+48	; 0x30
    3f10:	09 a9       	ldd	r16, Y+49	; 0x31
    3f12:	1a a9       	ldd	r17, Y+50	; 0x32
    3f14:	e1 14       	cp	r14, r1
    3f16:	f1 04       	cpc	r15, r1
    3f18:	01 05       	cpc	r16, r1
    3f1a:	11 05       	cpc	r17, r1
    3f1c:	09 f4       	brne	.+2      	; 0x3f20 <LCD_Print_Int+0xb84>
    3f1e:	4f c0       	rjmp	.+158    	; 0x3fbe <LCD_Print_Int+0xc22>
    3f20:	75 c0       	rjmp	.+234    	; 0x400c <LCD_Print_Int+0xc70>
    3f22:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f24:	98 a9       	ldd	r25, Y+48	; 0x30
    3f26:	a9 a9       	ldd	r26, Y+49	; 0x31
    3f28:	ba a9       	ldd	r27, Y+50	; 0x32
    3f2a:	82 30       	cpi	r24, 0x02	; 2
    3f2c:	91 05       	cpc	r25, r1
    3f2e:	a1 05       	cpc	r26, r1
    3f30:	b1 05       	cpc	r27, r1
    3f32:	09 f4       	brne	.+2      	; 0x3f36 <LCD_Print_Int+0xb9a>
    3f34:	4c c0       	rjmp	.+152    	; 0x3fce <LCD_Print_Int+0xc32>
    3f36:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f38:	98 a9       	ldd	r25, Y+48	; 0x30
    3f3a:	a9 a9       	ldd	r26, Y+49	; 0x31
    3f3c:	ba a9       	ldd	r27, Y+50	; 0x32
    3f3e:	83 30       	cpi	r24, 0x03	; 3
    3f40:	91 05       	cpc	r25, r1
    3f42:	a1 05       	cpc	r26, r1
    3f44:	b1 05       	cpc	r27, r1
    3f46:	09 f4       	brne	.+2      	; 0x3f4a <LCD_Print_Int+0xbae>
    3f48:	46 c0       	rjmp	.+140    	; 0x3fd6 <LCD_Print_Int+0xc3a>
    3f4a:	60 c0       	rjmp	.+192    	; 0x400c <LCD_Print_Int+0xc70>
    3f4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f4e:	98 a9       	ldd	r25, Y+48	; 0x30
    3f50:	a9 a9       	ldd	r26, Y+49	; 0x31
    3f52:	ba a9       	ldd	r27, Y+50	; 0x32
    3f54:	87 30       	cpi	r24, 0x07	; 7
    3f56:	91 05       	cpc	r25, r1
    3f58:	a1 05       	cpc	r26, r1
    3f5a:	b1 05       	cpc	r27, r1
    3f5c:	09 f4       	brne	.+2      	; 0x3f60 <LCD_Print_Int+0xbc4>
    3f5e:	4b c0       	rjmp	.+150    	; 0x3ff6 <LCD_Print_Int+0xc5a>
    3f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f62:	98 a9       	ldd	r25, Y+48	; 0x30
    3f64:	a9 a9       	ldd	r26, Y+49	; 0x31
    3f66:	ba a9       	ldd	r27, Y+50	; 0x32
    3f68:	88 30       	cpi	r24, 0x08	; 8
    3f6a:	91 05       	cpc	r25, r1
    3f6c:	a1 05       	cpc	r26, r1
    3f6e:	b1 05       	cpc	r27, r1
    3f70:	9c f4       	brge	.+38     	; 0x3f98 <LCD_Print_Int+0xbfc>
    3f72:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f74:	98 a9       	ldd	r25, Y+48	; 0x30
    3f76:	a9 a9       	ldd	r26, Y+49	; 0x31
    3f78:	ba a9       	ldd	r27, Y+50	; 0x32
    3f7a:	85 30       	cpi	r24, 0x05	; 5
    3f7c:	91 05       	cpc	r25, r1
    3f7e:	a1 05       	cpc	r26, r1
    3f80:	b1 05       	cpc	r27, r1
    3f82:	89 f1       	breq	.+98     	; 0x3fe6 <LCD_Print_Int+0xc4a>
    3f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f86:	98 a9       	ldd	r25, Y+48	; 0x30
    3f88:	a9 a9       	ldd	r26, Y+49	; 0x31
    3f8a:	ba a9       	ldd	r27, Y+50	; 0x32
    3f8c:	86 30       	cpi	r24, 0x06	; 6
    3f8e:	91 05       	cpc	r25, r1
    3f90:	a1 05       	cpc	r26, r1
    3f92:	b1 05       	cpc	r27, r1
    3f94:	61 f1       	breq	.+88     	; 0x3fee <LCD_Print_Int+0xc52>
    3f96:	3a c0       	rjmp	.+116    	; 0x400c <LCD_Print_Int+0xc70>
    3f98:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f9a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f9c:	a9 a9       	ldd	r26, Y+49	; 0x31
    3f9e:	ba a9       	ldd	r27, Y+50	; 0x32
    3fa0:	88 30       	cpi	r24, 0x08	; 8
    3fa2:	91 05       	cpc	r25, r1
    3fa4:	a1 05       	cpc	r26, r1
    3fa6:	b1 05       	cpc	r27, r1
    3fa8:	51 f1       	breq	.+84     	; 0x3ffe <LCD_Print_Int+0xc62>
    3faa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fac:	98 a9       	ldd	r25, Y+48	; 0x30
    3fae:	a9 a9       	ldd	r26, Y+49	; 0x31
    3fb0:	ba a9       	ldd	r27, Y+50	; 0x32
    3fb2:	89 30       	cpi	r24, 0x09	; 9
    3fb4:	91 05       	cpc	r25, r1
    3fb6:	a1 05       	cpc	r26, r1
    3fb8:	b1 05       	cpc	r27, r1
    3fba:	29 f1       	breq	.+74     	; 0x4006 <LCD_Print_Int+0xc6a>
    3fbc:	27 c0       	rjmp	.+78     	; 0x400c <LCD_Print_Int+0xc70>
		{
		case 0:LCD_Write_Char('0');break;
    3fbe:	80 e3       	ldi	r24, 0x30	; 48
    3fc0:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3fc4:	23 c0       	rjmp	.+70     	; 0x400c <LCD_Print_Int+0xc70>
		case 1:LCD_Write_Char('1');break;
    3fc6:	81 e3       	ldi	r24, 0x31	; 49
    3fc8:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3fcc:	1f c0       	rjmp	.+62     	; 0x400c <LCD_Print_Int+0xc70>
		case 2:LCD_Write_Char('2');break;
    3fce:	82 e3       	ldi	r24, 0x32	; 50
    3fd0:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3fd4:	1b c0       	rjmp	.+54     	; 0x400c <LCD_Print_Int+0xc70>
		case 3:LCD_Write_Char('3');break;
    3fd6:	83 e3       	ldi	r24, 0x33	; 51
    3fd8:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3fdc:	17 c0       	rjmp	.+46     	; 0x400c <LCD_Print_Int+0xc70>
		case 4:LCD_Write_Char('4');break;
    3fde:	84 e3       	ldi	r24, 0x34	; 52
    3fe0:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3fe4:	13 c0       	rjmp	.+38     	; 0x400c <LCD_Print_Int+0xc70>
		case 5:LCD_Write_Char('5');break;
    3fe6:	85 e3       	ldi	r24, 0x35	; 53
    3fe8:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3fec:	0f c0       	rjmp	.+30     	; 0x400c <LCD_Print_Int+0xc70>
		case 6:LCD_Write_Char('6');break;
    3fee:	86 e3       	ldi	r24, 0x36	; 54
    3ff0:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3ff4:	0b c0       	rjmp	.+22     	; 0x400c <LCD_Print_Int+0xc70>
		case 7:LCD_Write_Char('7');break;
    3ff6:	87 e3       	ldi	r24, 0x37	; 55
    3ff8:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    3ffc:	07 c0       	rjmp	.+14     	; 0x400c <LCD_Print_Int+0xc70>
		case 8:LCD_Write_Char('8');break;
    3ffe:	88 e3       	ldi	r24, 0x38	; 56
    4000:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
    4004:	03 c0       	rjmp	.+6      	; 0x400c <LCD_Print_Int+0xc70>
		case 9:LCD_Write_Char('9');break;
    4006:	89 e3       	ldi	r24, 0x39	; 57
    4008:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
		}
		switch(fraction)
    400c:	ed 84       	ldd	r14, Y+13	; 0x0d
    400e:	fe 84       	ldd	r15, Y+14	; 0x0e
    4010:	0f 85       	ldd	r16, Y+15	; 0x0f
    4012:	18 89       	ldd	r17, Y+16	; 0x10
    4014:	eb aa       	std	Y+51, r14	; 0x33
    4016:	fc aa       	std	Y+52, r15	; 0x34
    4018:	0d ab       	std	Y+53, r16	; 0x35
    401a:	1e ab       	std	Y+54, r17	; 0x36
    401c:	8b a9       	ldd	r24, Y+51	; 0x33
    401e:	9c a9       	ldd	r25, Y+52	; 0x34
    4020:	ad a9       	ldd	r26, Y+53	; 0x35
    4022:	be a9       	ldd	r27, Y+54	; 0x36
    4024:	84 30       	cpi	r24, 0x04	; 4
    4026:	91 05       	cpc	r25, r1
    4028:	a1 05       	cpc	r26, r1
    402a:	b1 05       	cpc	r27, r1
    402c:	09 f4       	brne	.+2      	; 0x4030 <LCD_Print_Int+0xc94>
    402e:	89 c0       	rjmp	.+274    	; 0x4142 <LCD_Print_Int+0xda6>
    4030:	8b a9       	ldd	r24, Y+51	; 0x33
    4032:	9c a9       	ldd	r25, Y+52	; 0x34
    4034:	ad a9       	ldd	r26, Y+53	; 0x35
    4036:	be a9       	ldd	r27, Y+54	; 0x36
    4038:	85 30       	cpi	r24, 0x05	; 5
    403a:	91 05       	cpc	r25, r1
    403c:	a1 05       	cpc	r26, r1
    403e:	b1 05       	cpc	r27, r1
    4040:	9c f5       	brge	.+102    	; 0x40a8 <LCD_Print_Int+0xd0c>
    4042:	8b a9       	ldd	r24, Y+51	; 0x33
    4044:	9c a9       	ldd	r25, Y+52	; 0x34
    4046:	ad a9       	ldd	r26, Y+53	; 0x35
    4048:	be a9       	ldd	r27, Y+54	; 0x36
    404a:	81 30       	cpi	r24, 0x01	; 1
    404c:	91 05       	cpc	r25, r1
    404e:	a1 05       	cpc	r26, r1
    4050:	b1 05       	cpc	r27, r1
    4052:	09 f4       	brne	.+2      	; 0x4056 <LCD_Print_Int+0xcba>
    4054:	67 c0       	rjmp	.+206    	; 0x4124 <LCD_Print_Int+0xd88>
    4056:	8b a9       	ldd	r24, Y+51	; 0x33
    4058:	9c a9       	ldd	r25, Y+52	; 0x34
    405a:	ad a9       	ldd	r26, Y+53	; 0x35
    405c:	be a9       	ldd	r27, Y+54	; 0x36
    405e:	82 30       	cpi	r24, 0x02	; 2
    4060:	91 05       	cpc	r25, r1
    4062:	a1 05       	cpc	r26, r1
    4064:	b1 05       	cpc	r27, r1
    4066:	5c f4       	brge	.+22     	; 0x407e <LCD_Print_Int+0xce2>
    4068:	eb a8       	ldd	r14, Y+51	; 0x33
    406a:	fc a8       	ldd	r15, Y+52	; 0x34
    406c:	0d a9       	ldd	r16, Y+53	; 0x35
    406e:	1e a9       	ldd	r17, Y+54	; 0x36
    4070:	e1 14       	cp	r14, r1
    4072:	f1 04       	cpc	r15, r1
    4074:	01 05       	cpc	r16, r1
    4076:	11 05       	cpc	r17, r1
    4078:	09 f4       	brne	.+2      	; 0x407c <LCD_Print_Int+0xce0>
    407a:	4f c0       	rjmp	.+158    	; 0x411a <LCD_Print_Int+0xd7e>
    407c:	7f c0       	rjmp	.+254    	; 0x417c <LCD_Print_Int+0xde0>
    407e:	8b a9       	ldd	r24, Y+51	; 0x33
    4080:	9c a9       	ldd	r25, Y+52	; 0x34
    4082:	ad a9       	ldd	r26, Y+53	; 0x35
    4084:	be a9       	ldd	r27, Y+54	; 0x36
    4086:	82 30       	cpi	r24, 0x02	; 2
    4088:	91 05       	cpc	r25, r1
    408a:	a1 05       	cpc	r26, r1
    408c:	b1 05       	cpc	r27, r1
    408e:	09 f4       	brne	.+2      	; 0x4092 <LCD_Print_Int+0xcf6>
    4090:	4e c0       	rjmp	.+156    	; 0x412e <LCD_Print_Int+0xd92>
    4092:	8b a9       	ldd	r24, Y+51	; 0x33
    4094:	9c a9       	ldd	r25, Y+52	; 0x34
    4096:	ad a9       	ldd	r26, Y+53	; 0x35
    4098:	be a9       	ldd	r27, Y+54	; 0x36
    409a:	83 30       	cpi	r24, 0x03	; 3
    409c:	91 05       	cpc	r25, r1
    409e:	a1 05       	cpc	r26, r1
    40a0:	b1 05       	cpc	r27, r1
    40a2:	09 f4       	brne	.+2      	; 0x40a6 <LCD_Print_Int+0xd0a>
    40a4:	49 c0       	rjmp	.+146    	; 0x4138 <LCD_Print_Int+0xd9c>
    40a6:	6a c0       	rjmp	.+212    	; 0x417c <LCD_Print_Int+0xde0>
    40a8:	8b a9       	ldd	r24, Y+51	; 0x33
    40aa:	9c a9       	ldd	r25, Y+52	; 0x34
    40ac:	ad a9       	ldd	r26, Y+53	; 0x35
    40ae:	be a9       	ldd	r27, Y+54	; 0x36
    40b0:	87 30       	cpi	r24, 0x07	; 7
    40b2:	91 05       	cpc	r25, r1
    40b4:	a1 05       	cpc	r26, r1
    40b6:	b1 05       	cpc	r27, r1
    40b8:	09 f4       	brne	.+2      	; 0x40bc <LCD_Print_Int+0xd20>
    40ba:	52 c0       	rjmp	.+164    	; 0x4160 <LCD_Print_Int+0xdc4>
    40bc:	8b a9       	ldd	r24, Y+51	; 0x33
    40be:	9c a9       	ldd	r25, Y+52	; 0x34
    40c0:	ad a9       	ldd	r26, Y+53	; 0x35
    40c2:	be a9       	ldd	r27, Y+54	; 0x36
    40c4:	88 30       	cpi	r24, 0x08	; 8
    40c6:	91 05       	cpc	r25, r1
    40c8:	a1 05       	cpc	r26, r1
    40ca:	b1 05       	cpc	r27, r1
    40cc:	9c f4       	brge	.+38     	; 0x40f4 <LCD_Print_Int+0xd58>
    40ce:	8b a9       	ldd	r24, Y+51	; 0x33
    40d0:	9c a9       	ldd	r25, Y+52	; 0x34
    40d2:	ad a9       	ldd	r26, Y+53	; 0x35
    40d4:	be a9       	ldd	r27, Y+54	; 0x36
    40d6:	85 30       	cpi	r24, 0x05	; 5
    40d8:	91 05       	cpc	r25, r1
    40da:	a1 05       	cpc	r26, r1
    40dc:	b1 05       	cpc	r27, r1
    40de:	b1 f1       	breq	.+108    	; 0x414c <LCD_Print_Int+0xdb0>
    40e0:	8b a9       	ldd	r24, Y+51	; 0x33
    40e2:	9c a9       	ldd	r25, Y+52	; 0x34
    40e4:	ad a9       	ldd	r26, Y+53	; 0x35
    40e6:	be a9       	ldd	r27, Y+54	; 0x36
    40e8:	86 30       	cpi	r24, 0x06	; 6
    40ea:	91 05       	cpc	r25, r1
    40ec:	a1 05       	cpc	r26, r1
    40ee:	b1 05       	cpc	r27, r1
    40f0:	91 f1       	breq	.+100    	; 0x4156 <LCD_Print_Int+0xdba>
    40f2:	44 c0       	rjmp	.+136    	; 0x417c <LCD_Print_Int+0xde0>
    40f4:	8b a9       	ldd	r24, Y+51	; 0x33
    40f6:	9c a9       	ldd	r25, Y+52	; 0x34
    40f8:	ad a9       	ldd	r26, Y+53	; 0x35
    40fa:	be a9       	ldd	r27, Y+54	; 0x36
    40fc:	88 30       	cpi	r24, 0x08	; 8
    40fe:	91 05       	cpc	r25, r1
    4100:	a1 05       	cpc	r26, r1
    4102:	b1 05       	cpc	r27, r1
    4104:	91 f1       	breq	.+100    	; 0x416a <LCD_Print_Int+0xdce>
    4106:	8b a9       	ldd	r24, Y+51	; 0x33
    4108:	9c a9       	ldd	r25, Y+52	; 0x34
    410a:	ad a9       	ldd	r26, Y+53	; 0x35
    410c:	be a9       	ldd	r27, Y+54	; 0x36
    410e:	89 30       	cpi	r24, 0x09	; 9
    4110:	91 05       	cpc	r25, r1
    4112:	a1 05       	cpc	r26, r1
    4114:	b1 05       	cpc	r27, r1
    4116:	71 f1       	breq	.+92     	; 0x4174 <LCD_Print_Int+0xdd8>
    4118:	31 c0       	rjmp	.+98     	; 0x417c <LCD_Print_Int+0xde0>
		{
		case 0:LCD_Write_String(".0");break;
    411a:	81 e7       	ldi	r24, 0x71	; 113
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    4122:	2c c0       	rjmp	.+88     	; 0x417c <LCD_Print_Int+0xde0>
		case 1:LCD_Write_String(".1");break;
    4124:	84 e7       	ldi	r24, 0x74	; 116
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    412c:	27 c0       	rjmp	.+78     	; 0x417c <LCD_Print_Int+0xde0>
		case 2:LCD_Write_String(".2");break;
    412e:	87 e7       	ldi	r24, 0x77	; 119
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    4136:	22 c0       	rjmp	.+68     	; 0x417c <LCD_Print_Int+0xde0>
		case 3:LCD_Write_String(".3");break;
    4138:	8a e7       	ldi	r24, 0x7A	; 122
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    4140:	1d c0       	rjmp	.+58     	; 0x417c <LCD_Print_Int+0xde0>
		case 4:LCD_Write_String(".4");break;
    4142:	8d e7       	ldi	r24, 0x7D	; 125
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    414a:	18 c0       	rjmp	.+48     	; 0x417c <LCD_Print_Int+0xde0>
		case 5:LCD_Write_String(".5");break;
    414c:	80 e8       	ldi	r24, 0x80	; 128
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    4154:	13 c0       	rjmp	.+38     	; 0x417c <LCD_Print_Int+0xde0>
		case 6:LCD_Write_String(".6");break;
    4156:	83 e8       	ldi	r24, 0x83	; 131
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    415e:	0e c0       	rjmp	.+28     	; 0x417c <LCD_Print_Int+0xde0>
		case 7:LCD_Write_String(".7");break;
    4160:	86 e8       	ldi	r24, 0x86	; 134
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    4168:	09 c0       	rjmp	.+18     	; 0x417c <LCD_Print_Int+0xde0>
		case 8:LCD_Write_String(".8");break;
    416a:	89 e8       	ldi	r24, 0x89	; 137
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
    4172:	04 c0       	rjmp	.+8      	; 0x417c <LCD_Print_Int+0xde0>
		case 9:LCD_Write_String(".9");break;
    4174:	8c e8       	ldi	r24, 0x8C	; 140
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_Write_String>
	else
	{

	}

}
    417c:	e6 96       	adiw	r28, 0x36	; 54
    417e:	0f b6       	in	r0, 0x3f	; 63
    4180:	f8 94       	cli
    4182:	de bf       	out	0x3e, r29	; 62
    4184:	0f be       	out	0x3f, r0	; 63
    4186:	cd bf       	out	0x3d, r28	; 61
    4188:	cf 91       	pop	r28
    418a:	df 91       	pop	r29
    418c:	1f 91       	pop	r17
    418e:	0f 91       	pop	r16
    4190:	ff 90       	pop	r15
    4192:	ef 90       	pop	r14
    4194:	08 95       	ret

00004196 <main>:

int integer(char arr[]);
f32 Calculate(char cal[]);

void main(void)
{
    4196:	df 93       	push	r29
    4198:	cf 93       	push	r28
    419a:	cd b7       	in	r28, 0x3d	; 61
    419c:	de b7       	in	r29, 0x3e	; 62
    419e:	ad 97       	sbiw	r28, 0x2d	; 45
    41a0:	0f b6       	in	r0, 0x3f	; 63
    41a2:	f8 94       	cli
    41a4:	de bf       	out	0x3e, r29	; 62
    41a6:	0f be       	out	0x3f, r0	; 63
    41a8:	cd bf       	out	0x3d, r28	; 61
	u8 i = 0;
    41aa:	1d 82       	std	Y+5, r1	; 0x05
	u8 key = 0;
    41ac:	1c 82       	std	Y+4, r1	; 0x04
	u8 EqualFlage = 0;
    41ae:	1b 82       	std	Y+3, r1	; 0x03
	u8 cal[40];
	//KPD Initialization
	SetPortMode(KPD_PORT,0x0F);
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	6f e0       	ldi	r22, 0x0F	; 15
    41b4:	0e 94 ef 09 	call	0x13de	; 0x13de <SetPortMode>
	SetPortValue(KPD_PORT,0xF0);
    41b8:	80 e0       	ldi	r24, 0x00	; 0
    41ba:	60 ef       	ldi	r22, 0xF0	; 240
    41bc:	0e 94 3c 09 	call	0x1278	; 0x1278 <SetPortValue>
	//LCD Initialization
	SetPortMode(Data_Port,OUTPUT);
    41c0:	83 e0       	ldi	r24, 0x03	; 3
    41c2:	61 e0       	ldi	r22, 0x01	; 1
    41c4:	0e 94 ef 09 	call	0x13de	; 0x13de <SetPortMode>
	SetPortMode(Control_Port,OUTPUT);
    41c8:	82 e0       	ldi	r24, 0x02	; 2
    41ca:	61 e0       	ldi	r22, 0x01	; 1
    41cc:	0e 94 ef 09 	call	0x13de	; 0x13de <SetPortMode>
	LCD_Init();
    41d0:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_Init>
    41d4:	5c c0       	rjmp	.+184    	; 0x428e <main+0xf8>

	while(1)
	{
		while(i<40 && EqualFlage == 0)
		{
			key = GetPressedKey();
    41d6:	0e 94 23 0b 	call	0x1646	; 0x1646 <GetPressedKey>
    41da:	8c 83       	std	Y+4, r24	; 0x04
			cal[i] = key;
    41dc:	8d 81       	ldd	r24, Y+5	; 0x05
    41de:	28 2f       	mov	r18, r24
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	ce 01       	movw	r24, r28
    41e4:	06 96       	adiw	r24, 0x06	; 6
    41e6:	fc 01       	movw	r30, r24
    41e8:	e2 0f       	add	r30, r18
    41ea:	f3 1f       	adc	r31, r19
    41ec:	8c 81       	ldd	r24, Y+4	; 0x04
    41ee:	80 83       	st	Z, r24
			if(key != 0)
    41f0:	8c 81       	ldd	r24, Y+4	; 0x04
    41f2:	88 23       	and	r24, r24
    41f4:	09 f4       	brne	.+2      	; 0x41f8 <main+0x62>
    41f6:	4b c0       	rjmp	.+150    	; 0x428e <main+0xf8>
			{
				LCD_Write_Char(key);
    41f8:	8c 81       	ldd	r24, Y+4	; 0x04
    41fa:	0e 94 c1 12 	call	0x2582	; 0x2582 <LCD_Write_Char>
				if(cal[i] == '=')
    41fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4200:	28 2f       	mov	r18, r24
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	ce 01       	movw	r24, r28
    4206:	06 96       	adiw	r24, 0x06	; 6
    4208:	fc 01       	movw	r30, r24
    420a:	e2 0f       	add	r30, r18
    420c:	f3 1f       	adc	r31, r19
    420e:	80 81       	ld	r24, Z
    4210:	8d 33       	cpi	r24, 0x3D	; 61
    4212:	81 f4       	brne	.+32     	; 0x4234 <main+0x9e>
				{
					EqualFlage = 1;
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	8b 83       	std	Y+3, r24	; 0x03
					LCD_GoTo_XY(2,1);
    4218:	82 e0       	ldi	r24, 0x02	; 2
    421a:	61 e0       	ldi	r22, 0x01	; 1
    421c:	0e 94 b4 18 	call	0x3168	; 0x3168 <LCD_GoTo_XY>
					//LCD_Print_Int(-666);
					LCD_Print_Int(Calculate(cal));
    4220:	ce 01       	movw	r24, r28
    4222:	06 96       	adiw	r24, 0x06	; 6
    4224:	0e 94 59 21 	call	0x42b2	; 0x42b2 <Calculate>
    4228:	dc 01       	movw	r26, r24
    422a:	cb 01       	movw	r24, r22
    422c:	bc 01       	movw	r22, r24
    422e:	cd 01       	movw	r24, r26
    4230:	0e 94 ce 19 	call	0x339c	; 0x339c <LCD_Print_Int>
				}
				if(cal[i] == 'c')
    4234:	8d 81       	ldd	r24, Y+5	; 0x05
    4236:	28 2f       	mov	r18, r24
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	ce 01       	movw	r24, r28
    423c:	06 96       	adiw	r24, 0x06	; 6
    423e:	fc 01       	movw	r30, r24
    4240:	e2 0f       	add	r30, r18
    4242:	f3 1f       	adc	r31, r19
    4244:	80 81       	ld	r24, Z
    4246:	83 36       	cpi	r24, 0x63	; 99
    4248:	c9 f4       	brne	.+50     	; 0x427c <main+0xe6>
				{
					for(int j = 0;j<20;j++)
    424a:	1a 82       	std	Y+2, r1	; 0x02
    424c:	19 82       	std	Y+1, r1	; 0x01
    424e:	0e c0       	rjmp	.+28     	; 0x426c <main+0xd6>
						cal[j]='0';
    4250:	29 81       	ldd	r18, Y+1	; 0x01
    4252:	3a 81       	ldd	r19, Y+2	; 0x02
    4254:	ce 01       	movw	r24, r28
    4256:	06 96       	adiw	r24, 0x06	; 6
    4258:	fc 01       	movw	r30, r24
    425a:	e2 0f       	add	r30, r18
    425c:	f3 1f       	adc	r31, r19
    425e:	80 e3       	ldi	r24, 0x30	; 48
    4260:	80 83       	st	Z, r24
					//LCD_Print_Int(-666);
					LCD_Print_Int(Calculate(cal));
				}
				if(cal[i] == 'c')
				{
					for(int j = 0;j<20;j++)
    4262:	89 81       	ldd	r24, Y+1	; 0x01
    4264:	9a 81       	ldd	r25, Y+2	; 0x02
    4266:	01 96       	adiw	r24, 0x01	; 1
    4268:	9a 83       	std	Y+2, r25	; 0x02
    426a:	89 83       	std	Y+1, r24	; 0x01
    426c:	89 81       	ldd	r24, Y+1	; 0x01
    426e:	9a 81       	ldd	r25, Y+2	; 0x02
    4270:	84 31       	cpi	r24, 0x14	; 20
    4272:	91 05       	cpc	r25, r1
    4274:	6c f3       	brlt	.-38     	; 0x4250 <main+0xba>
						cal[j]='0';
					i = 0;
    4276:	1d 82       	std	Y+5, r1	; 0x05
					LCD_Clear_Screen();
    4278:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_Clear_Screen>
				}

				i++;
    427c:	8d 81       	ldd	r24, Y+5	; 0x05
    427e:	8f 5f       	subi	r24, 0xFF	; 255
    4280:	8d 83       	std	Y+5, r24	; 0x05
				if(i>=16)
    4282:	8d 81       	ldd	r24, Y+5	; 0x05
    4284:	80 31       	cpi	r24, 0x10	; 16
    4286:	18 f0       	brcs	.+6      	; 0x428e <main+0xf8>
					LCD_Display_Shift(LEFT);
    4288:	80 e0       	ldi	r24, 0x00	; 0
    428a:	0e 94 05 19 	call	0x320a	; 0x320a <LCD_Display_Shift>
	LCD_Init();
	//LCD_Write_Cmd(Set_Cursor);

	while(1)
	{
		while(i<40 && EqualFlage == 0)
    428e:	8d 81       	ldd	r24, Y+5	; 0x05
    4290:	88 32       	cpi	r24, 0x28	; 40
    4292:	20 f4       	brcc	.+8      	; 0x429c <main+0x106>
    4294:	8b 81       	ldd	r24, Y+3	; 0x03
    4296:	88 23       	and	r24, r24
    4298:	09 f4       	brne	.+2      	; 0x429c <main+0x106>
    429a:	9d cf       	rjmp	.-198    	; 0x41d6 <main+0x40>
				if(i>=16)
					LCD_Display_Shift(LEFT);
			}

		}
		key = GetPressedKey();
    429c:	0e 94 23 0b 	call	0x1646	; 0x1646 <GetPressedKey>
    42a0:	8c 83       	std	Y+4, r24	; 0x04
		if(key =='c')
    42a2:	8c 81       	ldd	r24, Y+4	; 0x04
    42a4:	83 36       	cpi	r24, 0x63	; 99
    42a6:	99 f7       	brne	.-26     	; 0x428e <main+0xf8>
		{
			EqualFlage = 0;
    42a8:	1b 82       	std	Y+3, r1	; 0x03
			i = 0;
    42aa:	1d 82       	std	Y+5, r1	; 0x05
			LCD_Clear_Screen();
    42ac:	0e 94 9a 18 	call	0x3134	; 0x3134 <LCD_Clear_Screen>
    42b0:	ee cf       	rjmp	.-36     	; 0x428e <main+0xf8>

000042b2 <Calculate>:

}


f32 Calculate(char cal[])
{
    42b2:	df 93       	push	r29
    42b4:	cf 93       	push	r28
    42b6:	cd b7       	in	r28, 0x3d	; 61
    42b8:	de b7       	in	r29, 0x3e	; 62
    42ba:	ed 97       	sbiw	r28, 0x3d	; 61
    42bc:	0f b6       	in	r0, 0x3f	; 63
    42be:	f8 94       	cli
    42c0:	de bf       	out	0x3e, r29	; 62
    42c2:	0f be       	out	0x3f, r0	; 63
    42c4:	cd bf       	out	0x3d, r28	; 61
    42c6:	9b af       	std	Y+59, r25	; 0x3b
    42c8:	8a af       	std	Y+58, r24	; 0x3a
	int i = 0;
    42ca:	19 8a       	std	Y+17, r1	; 0x11
    42cc:	18 8a       	std	Y+16, r1	; 0x10
	char op1[20];
	char op2[20];
	char operation = 0;
    42ce:	1f 86       	std	Y+15, r1	; 0x0f
	//char cal[40]={'3','.','4','/','8'};
	float totalresult = 0;
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	a0 e0       	ldi	r26, 0x00	; 0
    42d6:	b0 e0       	ldi	r27, 0x00	; 0
    42d8:	8b 87       	std	Y+11, r24	; 0x0b
    42da:	9c 87       	std	Y+12, r25	; 0x0c
    42dc:	ad 87       	std	Y+13, r26	; 0x0d
    42de:	be 87       	std	Y+14, r27	; 0x0e
	for(i=0;i<40;i++)
    42e0:	19 8a       	std	Y+17, r1	; 0x11
    42e2:	18 8a       	std	Y+16, r1	; 0x10
    42e4:	7f c0       	rjmp	.+254    	; 0x43e4 <Calculate+0x132>
	{
		if(i == 0)
    42e6:	88 89       	ldd	r24, Y+16	; 0x10
    42e8:	99 89       	ldd	r25, Y+17	; 0x11
    42ea:	00 97       	sbiw	r24, 0x00	; 0
    42ec:	89 f4       	brne	.+34     	; 0x4310 <Calculate+0x5e>
			op1[i] = cal[i];
    42ee:	48 89       	ldd	r20, Y+16	; 0x10
    42f0:	59 89       	ldd	r21, Y+17	; 0x11
    42f2:	28 89       	ldd	r18, Y+16	; 0x10
    42f4:	39 89       	ldd	r19, Y+17	; 0x11
    42f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    42f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    42fa:	fc 01       	movw	r30, r24
    42fc:	e2 0f       	add	r30, r18
    42fe:	f3 1f       	adc	r31, r19
    4300:	20 81       	ld	r18, Z
    4302:	ce 01       	movw	r24, r28
    4304:	42 96       	adiw	r24, 0x12	; 18
    4306:	fc 01       	movw	r30, r24
    4308:	e4 0f       	add	r30, r20
    430a:	f5 1f       	adc	r31, r21
    430c:	20 83       	st	Z, r18
    430e:	65 c0       	rjmp	.+202    	; 0x43da <Calculate+0x128>
		else if(cal[i] != '+' && cal[i] != '-' && cal[i] != '*' && cal[i] != '/')
    4310:	28 89       	ldd	r18, Y+16	; 0x10
    4312:	39 89       	ldd	r19, Y+17	; 0x11
    4314:	8a ad       	ldd	r24, Y+58	; 0x3a
    4316:	9b ad       	ldd	r25, Y+59	; 0x3b
    4318:	fc 01       	movw	r30, r24
    431a:	e2 0f       	add	r30, r18
    431c:	f3 1f       	adc	r31, r19
    431e:	80 81       	ld	r24, Z
    4320:	8b 32       	cpi	r24, 0x2B	; 43
    4322:	79 f1       	breq	.+94     	; 0x4382 <Calculate+0xd0>
    4324:	28 89       	ldd	r18, Y+16	; 0x10
    4326:	39 89       	ldd	r19, Y+17	; 0x11
    4328:	8a ad       	ldd	r24, Y+58	; 0x3a
    432a:	9b ad       	ldd	r25, Y+59	; 0x3b
    432c:	fc 01       	movw	r30, r24
    432e:	e2 0f       	add	r30, r18
    4330:	f3 1f       	adc	r31, r19
    4332:	80 81       	ld	r24, Z
    4334:	8d 32       	cpi	r24, 0x2D	; 45
    4336:	29 f1       	breq	.+74     	; 0x4382 <Calculate+0xd0>
    4338:	28 89       	ldd	r18, Y+16	; 0x10
    433a:	39 89       	ldd	r19, Y+17	; 0x11
    433c:	8a ad       	ldd	r24, Y+58	; 0x3a
    433e:	9b ad       	ldd	r25, Y+59	; 0x3b
    4340:	fc 01       	movw	r30, r24
    4342:	e2 0f       	add	r30, r18
    4344:	f3 1f       	adc	r31, r19
    4346:	80 81       	ld	r24, Z
    4348:	8a 32       	cpi	r24, 0x2A	; 42
    434a:	d9 f0       	breq	.+54     	; 0x4382 <Calculate+0xd0>
    434c:	28 89       	ldd	r18, Y+16	; 0x10
    434e:	39 89       	ldd	r19, Y+17	; 0x11
    4350:	8a ad       	ldd	r24, Y+58	; 0x3a
    4352:	9b ad       	ldd	r25, Y+59	; 0x3b
    4354:	fc 01       	movw	r30, r24
    4356:	e2 0f       	add	r30, r18
    4358:	f3 1f       	adc	r31, r19
    435a:	80 81       	ld	r24, Z
    435c:	8f 32       	cpi	r24, 0x2F	; 47
    435e:	89 f0       	breq	.+34     	; 0x4382 <Calculate+0xd0>
			op1[i] = cal[i];
    4360:	48 89       	ldd	r20, Y+16	; 0x10
    4362:	59 89       	ldd	r21, Y+17	; 0x11
    4364:	28 89       	ldd	r18, Y+16	; 0x10
    4366:	39 89       	ldd	r19, Y+17	; 0x11
    4368:	8a ad       	ldd	r24, Y+58	; 0x3a
    436a:	9b ad       	ldd	r25, Y+59	; 0x3b
    436c:	fc 01       	movw	r30, r24
    436e:	e2 0f       	add	r30, r18
    4370:	f3 1f       	adc	r31, r19
    4372:	20 81       	ld	r18, Z
    4374:	ce 01       	movw	r24, r28
    4376:	42 96       	adiw	r24, 0x12	; 18
    4378:	fc 01       	movw	r30, r24
    437a:	e4 0f       	add	r30, r20
    437c:	f5 1f       	adc	r31, r21
    437e:	20 83       	st	Z, r18
    4380:	2c c0       	rjmp	.+88     	; 0x43da <Calculate+0x128>
		else
		{
			operation = cal[i];
    4382:	28 89       	ldd	r18, Y+16	; 0x10
    4384:	39 89       	ldd	r19, Y+17	; 0x11
    4386:	8a ad       	ldd	r24, Y+58	; 0x3a
    4388:	9b ad       	ldd	r25, Y+59	; 0x3b
    438a:	fc 01       	movw	r30, r24
    438c:	e2 0f       	add	r30, r18
    438e:	f3 1f       	adc	r31, r19
    4390:	80 81       	ld	r24, Z
    4392:	8f 87       	std	Y+15, r24	; 0x0f
			for(int j=0;j<20;j++)
    4394:	1a 82       	std	Y+2, r1	; 0x02
    4396:	19 82       	std	Y+1, r1	; 0x01
    4398:	1a c0       	rjmp	.+52     	; 0x43ce <Calculate+0x11c>
				op2[j] = cal[++i];
    439a:	49 81       	ldd	r20, Y+1	; 0x01
    439c:	5a 81       	ldd	r21, Y+2	; 0x02
    439e:	88 89       	ldd	r24, Y+16	; 0x10
    43a0:	99 89       	ldd	r25, Y+17	; 0x11
    43a2:	01 96       	adiw	r24, 0x01	; 1
    43a4:	99 8b       	std	Y+17, r25	; 0x11
    43a6:	88 8b       	std	Y+16, r24	; 0x10
    43a8:	28 89       	ldd	r18, Y+16	; 0x10
    43aa:	39 89       	ldd	r19, Y+17	; 0x11
    43ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    43ae:	9b ad       	ldd	r25, Y+59	; 0x3b
    43b0:	fc 01       	movw	r30, r24
    43b2:	e2 0f       	add	r30, r18
    43b4:	f3 1f       	adc	r31, r19
    43b6:	20 81       	ld	r18, Z
    43b8:	ce 01       	movw	r24, r28
    43ba:	86 96       	adiw	r24, 0x26	; 38
    43bc:	fc 01       	movw	r30, r24
    43be:	e4 0f       	add	r30, r20
    43c0:	f5 1f       	adc	r31, r21
    43c2:	20 83       	st	Z, r18
		else if(cal[i] != '+' && cal[i] != '-' && cal[i] != '*' && cal[i] != '/')
			op1[i] = cal[i];
		else
		{
			operation = cal[i];
			for(int j=0;j<20;j++)
    43c4:	89 81       	ldd	r24, Y+1	; 0x01
    43c6:	9a 81       	ldd	r25, Y+2	; 0x02
    43c8:	01 96       	adiw	r24, 0x01	; 1
    43ca:	9a 83       	std	Y+2, r25	; 0x02
    43cc:	89 83       	std	Y+1, r24	; 0x01
    43ce:	89 81       	ldd	r24, Y+1	; 0x01
    43d0:	9a 81       	ldd	r25, Y+2	; 0x02
    43d2:	84 31       	cpi	r24, 0x14	; 20
    43d4:	91 05       	cpc	r25, r1
    43d6:	0c f3       	brlt	.-62     	; 0x439a <Calculate+0xe8>
    43d8:	0b c0       	rjmp	.+22     	; 0x43f0 <Calculate+0x13e>
	char op1[20];
	char op2[20];
	char operation = 0;
	//char cal[40]={'3','.','4','/','8'};
	float totalresult = 0;
	for(i=0;i<40;i++)
    43da:	88 89       	ldd	r24, Y+16	; 0x10
    43dc:	99 89       	ldd	r25, Y+17	; 0x11
    43de:	01 96       	adiw	r24, 0x01	; 1
    43e0:	99 8b       	std	Y+17, r25	; 0x11
    43e2:	88 8b       	std	Y+16, r24	; 0x10
    43e4:	88 89       	ldd	r24, Y+16	; 0x10
    43e6:	99 89       	ldd	r25, Y+17	; 0x11
    43e8:	88 32       	cpi	r24, 0x28	; 40
    43ea:	91 05       	cpc	r25, r1
    43ec:	0c f4       	brge	.+2      	; 0x43f0 <Calculate+0x13e>
    43ee:	7b cf       	rjmp	.-266    	; 0x42e6 <Calculate+0x34>
				op2[j] = cal[++i];
			break;
		}
	}

	float operator_1 = integer(op1);
    43f0:	ce 01       	movw	r24, r28
    43f2:	42 96       	adiw	r24, 0x12	; 18
    43f4:	0e 94 8e 22 	call	0x451c	; 0x451c <integer>
    43f8:	aa 27       	eor	r26, r26
    43fa:	97 fd       	sbrc	r25, 7
    43fc:	a0 95       	com	r26
    43fe:	ba 2f       	mov	r27, r26
    4400:	bc 01       	movw	r22, r24
    4402:	cd 01       	movw	r24, r26
    4404:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4408:	dc 01       	movw	r26, r24
    440a:	cb 01       	movw	r24, r22
    440c:	8f 83       	std	Y+7, r24	; 0x07
    440e:	98 87       	std	Y+8, r25	; 0x08
    4410:	a9 87       	std	Y+9, r26	; 0x09
    4412:	ba 87       	std	Y+10, r27	; 0x0a
	float operator_2 = integer(op2);
    4414:	ce 01       	movw	r24, r28
    4416:	86 96       	adiw	r24, 0x26	; 38
    4418:	0e 94 8e 22 	call	0x451c	; 0x451c <integer>
    441c:	aa 27       	eor	r26, r26
    441e:	97 fd       	sbrc	r25, 7
    4420:	a0 95       	com	r26
    4422:	ba 2f       	mov	r27, r26
    4424:	bc 01       	movw	r22, r24
    4426:	cd 01       	movw	r24, r26
    4428:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    442c:	dc 01       	movw	r26, r24
    442e:	cb 01       	movw	r24, r22
    4430:	8b 83       	std	Y+3, r24	; 0x03
    4432:	9c 83       	std	Y+4, r25	; 0x04
    4434:	ad 83       	std	Y+5, r26	; 0x05
    4436:	be 83       	std	Y+6, r27	; 0x06
		//printf("%f\t%f\n",operator_1,operator_2);
	switch(operation)
    4438:	8f 85       	ldd	r24, Y+15	; 0x0f
    443a:	28 2f       	mov	r18, r24
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	3d af       	std	Y+61, r19	; 0x3d
    4440:	2c af       	std	Y+60, r18	; 0x3c
    4442:	8c ad       	ldd	r24, Y+60	; 0x3c
    4444:	9d ad       	ldd	r25, Y+61	; 0x3d
    4446:	8b 32       	cpi	r24, 0x2B	; 43
    4448:	91 05       	cpc	r25, r1
    444a:	b1 f0       	breq	.+44     	; 0x4478 <Calculate+0x1c6>
    444c:	2c ad       	ldd	r18, Y+60	; 0x3c
    444e:	3d ad       	ldd	r19, Y+61	; 0x3d
    4450:	2c 32       	cpi	r18, 0x2C	; 44
    4452:	31 05       	cpc	r19, r1
    4454:	34 f4       	brge	.+12     	; 0x4462 <Calculate+0x1b0>
    4456:	8c ad       	ldd	r24, Y+60	; 0x3c
    4458:	9d ad       	ldd	r25, Y+61	; 0x3d
    445a:	8a 32       	cpi	r24, 0x2A	; 42
    445c:	91 05       	cpc	r25, r1
    445e:	71 f1       	breq	.+92     	; 0x44bc <Calculate+0x20a>
    4460:	4e c0       	rjmp	.+156    	; 0x44fe <Calculate+0x24c>
    4462:	2c ad       	ldd	r18, Y+60	; 0x3c
    4464:	3d ad       	ldd	r19, Y+61	; 0x3d
    4466:	2d 32       	cpi	r18, 0x2D	; 45
    4468:	31 05       	cpc	r19, r1
    446a:	b9 f0       	breq	.+46     	; 0x449a <Calculate+0x1e8>
    446c:	8c ad       	ldd	r24, Y+60	; 0x3c
    446e:	9d ad       	ldd	r25, Y+61	; 0x3d
    4470:	8f 32       	cpi	r24, 0x2F	; 47
    4472:	91 05       	cpc	r25, r1
    4474:	a1 f1       	breq	.+104    	; 0x44de <Calculate+0x22c>
    4476:	43 c0       	rjmp	.+134    	; 0x44fe <Calculate+0x24c>
	{
		case '+':totalresult=operator_1+operator_2;break;
    4478:	6f 81       	ldd	r22, Y+7	; 0x07
    447a:	78 85       	ldd	r23, Y+8	; 0x08
    447c:	89 85       	ldd	r24, Y+9	; 0x09
    447e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4480:	2b 81       	ldd	r18, Y+3	; 0x03
    4482:	3c 81       	ldd	r19, Y+4	; 0x04
    4484:	4d 81       	ldd	r20, Y+5	; 0x05
    4486:	5e 81       	ldd	r21, Y+6	; 0x06
    4488:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	8b 87       	std	Y+11, r24	; 0x0b
    4492:	9c 87       	std	Y+12, r25	; 0x0c
    4494:	ad 87       	std	Y+13, r26	; 0x0d
    4496:	be 87       	std	Y+14, r27	; 0x0e
    4498:	32 c0       	rjmp	.+100    	; 0x44fe <Calculate+0x24c>
		case '-':totalresult=operator_1-operator_2;break;
    449a:	6f 81       	ldd	r22, Y+7	; 0x07
    449c:	78 85       	ldd	r23, Y+8	; 0x08
    449e:	89 85       	ldd	r24, Y+9	; 0x09
    44a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44a2:	2b 81       	ldd	r18, Y+3	; 0x03
    44a4:	3c 81       	ldd	r19, Y+4	; 0x04
    44a6:	4d 81       	ldd	r20, Y+5	; 0x05
    44a8:	5e 81       	ldd	r21, Y+6	; 0x06
    44aa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    44ae:	dc 01       	movw	r26, r24
    44b0:	cb 01       	movw	r24, r22
    44b2:	8b 87       	std	Y+11, r24	; 0x0b
    44b4:	9c 87       	std	Y+12, r25	; 0x0c
    44b6:	ad 87       	std	Y+13, r26	; 0x0d
    44b8:	be 87       	std	Y+14, r27	; 0x0e
    44ba:	21 c0       	rjmp	.+66     	; 0x44fe <Calculate+0x24c>
		case '*':totalresult=operator_1*operator_2;break;
    44bc:	6f 81       	ldd	r22, Y+7	; 0x07
    44be:	78 85       	ldd	r23, Y+8	; 0x08
    44c0:	89 85       	ldd	r24, Y+9	; 0x09
    44c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44c4:	2b 81       	ldd	r18, Y+3	; 0x03
    44c6:	3c 81       	ldd	r19, Y+4	; 0x04
    44c8:	4d 81       	ldd	r20, Y+5	; 0x05
    44ca:	5e 81       	ldd	r21, Y+6	; 0x06
    44cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	8b 87       	std	Y+11, r24	; 0x0b
    44d6:	9c 87       	std	Y+12, r25	; 0x0c
    44d8:	ad 87       	std	Y+13, r26	; 0x0d
    44da:	be 87       	std	Y+14, r27	; 0x0e
    44dc:	10 c0       	rjmp	.+32     	; 0x44fe <Calculate+0x24c>
		case '/':totalresult=operator_1/operator_2;break;
    44de:	6f 81       	ldd	r22, Y+7	; 0x07
    44e0:	78 85       	ldd	r23, Y+8	; 0x08
    44e2:	89 85       	ldd	r24, Y+9	; 0x09
    44e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e6:	2b 81       	ldd	r18, Y+3	; 0x03
    44e8:	3c 81       	ldd	r19, Y+4	; 0x04
    44ea:	4d 81       	ldd	r20, Y+5	; 0x05
    44ec:	5e 81       	ldd	r21, Y+6	; 0x06
    44ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	8b 87       	std	Y+11, r24	; 0x0b
    44f8:	9c 87       	std	Y+12, r25	; 0x0c
    44fa:	ad 87       	std	Y+13, r26	; 0x0d
    44fc:	be 87       	std	Y+14, r27	; 0x0e
	}
	//printf("%.1f",totalresult);

	return totalresult;
    44fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4500:	9c 85       	ldd	r25, Y+12	; 0x0c
    4502:	ad 85       	ldd	r26, Y+13	; 0x0d
    4504:	be 85       	ldd	r27, Y+14	; 0x0e
}
    4506:	bc 01       	movw	r22, r24
    4508:	cd 01       	movw	r24, r26
    450a:	ed 96       	adiw	r28, 0x3d	; 61
    450c:	0f b6       	in	r0, 0x3f	; 63
    450e:	f8 94       	cli
    4510:	de bf       	out	0x3e, r29	; 62
    4512:	0f be       	out	0x3f, r0	; 63
    4514:	cd bf       	out	0x3d, r28	; 61
    4516:	cf 91       	pop	r28
    4518:	df 91       	pop	r29
    451a:	08 95       	ret

0000451c <integer>:

int integer(char arr[])
{
    451c:	df 93       	push	r29
    451e:	cf 93       	push	r28
    4520:	cd b7       	in	r28, 0x3d	; 61
    4522:	de b7       	in	r29, 0x3e	; 62
    4524:	6a 97       	sbiw	r28, 0x1a	; 26
    4526:	0f b6       	in	r0, 0x3f	; 63
    4528:	f8 94       	cli
    452a:	de bf       	out	0x3e, r29	; 62
    452c:	0f be       	out	0x3f, r0	; 63
    452e:	cd bf       	out	0x3d, r28	; 61
    4530:	9c 87       	std	Y+12, r25	; 0x0c
    4532:	8b 87       	std	Y+11, r24	; 0x0b
	int ones=0;
    4534:	1a 86       	std	Y+10, r1	; 0x0a
    4536:	19 86       	std	Y+9, r1	; 0x09
	int donze=0;
    4538:	18 86       	std	Y+8, r1	; 0x08
    453a:	1f 82       	std	Y+7, r1	; 0x07
	int thouzands =0;
    453c:	1e 82       	std	Y+6, r1	; 0x06
    453e:	1d 82       	std	Y+5, r1	; 0x05
	float result =0;
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	a0 e0       	ldi	r26, 0x00	; 0
    4546:	b0 e0       	ldi	r27, 0x00	; 0
    4548:	89 83       	std	Y+1, r24	; 0x01
    454a:	9a 83       	std	Y+2, r25	; 0x02
    454c:	ab 83       	std	Y+3, r26	; 0x03
    454e:	bc 83       	std	Y+4, r27	; 0x04
	if(arr[0] == '-' || arr[0] == '+')
    4550:	eb 85       	ldd	r30, Y+11	; 0x0b
    4552:	fc 85       	ldd	r31, Y+12	; 0x0c
    4554:	80 81       	ld	r24, Z
    4556:	8d 32       	cpi	r24, 0x2D	; 45
    4558:	31 f0       	breq	.+12     	; 0x4566 <integer+0x4a>
    455a:	eb 85       	ldd	r30, Y+11	; 0x0b
    455c:	fc 85       	ldd	r31, Y+12	; 0x0c
    455e:	80 81       	ld	r24, Z
    4560:	8b 32       	cpi	r24, 0x2B	; 43
    4562:	09 f0       	breq	.+2      	; 0x4566 <integer+0x4a>
    4564:	c3 c3       	rjmp	.+1926   	; 0x4cec <integer+0x7d0>
	{
		switch(arr[1])
    4566:	8b 85       	ldd	r24, Y+11	; 0x0b
    4568:	9c 85       	ldd	r25, Y+12	; 0x0c
    456a:	fc 01       	movw	r30, r24
    456c:	31 96       	adiw	r30, 0x01	; 1
    456e:	80 81       	ld	r24, Z
    4570:	28 2f       	mov	r18, r24
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	3a 8f       	std	Y+26, r19	; 0x1a
    4576:	29 8f       	std	Y+25, r18	; 0x19
    4578:	49 8d       	ldd	r20, Y+25	; 0x19
    457a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    457c:	44 33       	cpi	r20, 0x34	; 52
    457e:	51 05       	cpc	r21, r1
    4580:	09 f4       	brne	.+2      	; 0x4584 <integer+0x68>
    4582:	52 c0       	rjmp	.+164    	; 0x4628 <integer+0x10c>
    4584:	69 8d       	ldd	r22, Y+25	; 0x19
    4586:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4588:	65 33       	cpi	r22, 0x35	; 53
    458a:	71 05       	cpc	r23, r1
    458c:	dc f4       	brge	.+54     	; 0x45c4 <integer+0xa8>
    458e:	89 8d       	ldd	r24, Y+25	; 0x19
    4590:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4592:	81 33       	cpi	r24, 0x31	; 49
    4594:	91 05       	cpc	r25, r1
    4596:	c9 f1       	breq	.+114    	; 0x460a <integer+0xee>
    4598:	29 8d       	ldd	r18, Y+25	; 0x19
    459a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    459c:	22 33       	cpi	r18, 0x32	; 50
    459e:	31 05       	cpc	r19, r1
    45a0:	34 f4       	brge	.+12     	; 0x45ae <integer+0x92>
    45a2:	49 8d       	ldd	r20, Y+25	; 0x19
    45a4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    45a6:	40 33       	cpi	r20, 0x30	; 48
    45a8:	51 05       	cpc	r21, r1
    45aa:	61 f1       	breq	.+88     	; 0x4604 <integer+0xe8>
    45ac:	5b c0       	rjmp	.+182    	; 0x4664 <integer+0x148>
    45ae:	69 8d       	ldd	r22, Y+25	; 0x19
    45b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45b2:	62 33       	cpi	r22, 0x32	; 50
    45b4:	71 05       	cpc	r23, r1
    45b6:	71 f1       	breq	.+92     	; 0x4614 <integer+0xf8>
    45b8:	89 8d       	ldd	r24, Y+25	; 0x19
    45ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    45bc:	83 33       	cpi	r24, 0x33	; 51
    45be:	91 05       	cpc	r25, r1
    45c0:	71 f1       	breq	.+92     	; 0x461e <integer+0x102>
    45c2:	50 c0       	rjmp	.+160    	; 0x4664 <integer+0x148>
    45c4:	29 8d       	ldd	r18, Y+25	; 0x19
    45c6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    45c8:	27 33       	cpi	r18, 0x37	; 55
    45ca:	31 05       	cpc	r19, r1
    45cc:	e1 f1       	breq	.+120    	; 0x4646 <integer+0x12a>
    45ce:	49 8d       	ldd	r20, Y+25	; 0x19
    45d0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    45d2:	48 33       	cpi	r20, 0x38	; 56
    45d4:	51 05       	cpc	r21, r1
    45d6:	5c f4       	brge	.+22     	; 0x45ee <integer+0xd2>
    45d8:	69 8d       	ldd	r22, Y+25	; 0x19
    45da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45dc:	65 33       	cpi	r22, 0x35	; 53
    45de:	71 05       	cpc	r23, r1
    45e0:	41 f1       	breq	.+80     	; 0x4632 <integer+0x116>
    45e2:	89 8d       	ldd	r24, Y+25	; 0x19
    45e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    45e6:	86 33       	cpi	r24, 0x36	; 54
    45e8:	91 05       	cpc	r25, r1
    45ea:	41 f1       	breq	.+80     	; 0x463c <integer+0x120>
    45ec:	3b c0       	rjmp	.+118    	; 0x4664 <integer+0x148>
    45ee:	29 8d       	ldd	r18, Y+25	; 0x19
    45f0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    45f2:	28 33       	cpi	r18, 0x38	; 56
    45f4:	31 05       	cpc	r19, r1
    45f6:	61 f1       	breq	.+88     	; 0x4650 <integer+0x134>
    45f8:	49 8d       	ldd	r20, Y+25	; 0x19
    45fa:	5a 8d       	ldd	r21, Y+26	; 0x1a
    45fc:	49 33       	cpi	r20, 0x39	; 57
    45fe:	51 05       	cpc	r21, r1
    4600:	61 f1       	breq	.+88     	; 0x465a <integer+0x13e>
    4602:	30 c0       	rjmp	.+96     	; 0x4664 <integer+0x148>
		{
		case '0': ones =0;break;
    4604:	1a 86       	std	Y+10, r1	; 0x0a
    4606:	19 86       	std	Y+9, r1	; 0x09
    4608:	31 c0       	rjmp	.+98     	; 0x466c <integer+0x150>
		case '1': ones =1;break;
    460a:	81 e0       	ldi	r24, 0x01	; 1
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	9a 87       	std	Y+10, r25	; 0x0a
    4610:	89 87       	std	Y+9, r24	; 0x09
    4612:	2c c0       	rjmp	.+88     	; 0x466c <integer+0x150>
		case '2': ones =2;break;
    4614:	82 e0       	ldi	r24, 0x02	; 2
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	9a 87       	std	Y+10, r25	; 0x0a
    461a:	89 87       	std	Y+9, r24	; 0x09
    461c:	27 c0       	rjmp	.+78     	; 0x466c <integer+0x150>
		case '3': ones =3;break;
    461e:	83 e0       	ldi	r24, 0x03	; 3
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	9a 87       	std	Y+10, r25	; 0x0a
    4624:	89 87       	std	Y+9, r24	; 0x09
    4626:	22 c0       	rjmp	.+68     	; 0x466c <integer+0x150>
		case '4': ones =4;break;
    4628:	84 e0       	ldi	r24, 0x04	; 4
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	9a 87       	std	Y+10, r25	; 0x0a
    462e:	89 87       	std	Y+9, r24	; 0x09
    4630:	1d c0       	rjmp	.+58     	; 0x466c <integer+0x150>
		case '5': ones =5;break;
    4632:	85 e0       	ldi	r24, 0x05	; 5
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	9a 87       	std	Y+10, r25	; 0x0a
    4638:	89 87       	std	Y+9, r24	; 0x09
    463a:	18 c0       	rjmp	.+48     	; 0x466c <integer+0x150>
		case '6': ones =6;break;
    463c:	86 e0       	ldi	r24, 0x06	; 6
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	9a 87       	std	Y+10, r25	; 0x0a
    4642:	89 87       	std	Y+9, r24	; 0x09
    4644:	13 c0       	rjmp	.+38     	; 0x466c <integer+0x150>
		case '7': ones =7;break;
    4646:	87 e0       	ldi	r24, 0x07	; 7
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	9a 87       	std	Y+10, r25	; 0x0a
    464c:	89 87       	std	Y+9, r24	; 0x09
    464e:	0e c0       	rjmp	.+28     	; 0x466c <integer+0x150>
		case '8': ones =8;break;
    4650:	88 e0       	ldi	r24, 0x08	; 8
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	9a 87       	std	Y+10, r25	; 0x0a
    4656:	89 87       	std	Y+9, r24	; 0x09
    4658:	09 c0       	rjmp	.+18     	; 0x466c <integer+0x150>
		case '9': ones =9;break;
    465a:	89 e0       	ldi	r24, 0x09	; 9
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	9a 87       	std	Y+10, r25	; 0x0a
    4660:	89 87       	std	Y+9, r24	; 0x09
    4662:	04 c0       	rjmp	.+8      	; 0x466c <integer+0x150>
		case '-':
		default: ones = 111;break;
    4664:	8f e6       	ldi	r24, 0x6F	; 111
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	9a 87       	std	Y+10, r25	; 0x0a
    466a:	89 87       	std	Y+9, r24	; 0x09
		}
		switch(arr[2])
    466c:	8b 85       	ldd	r24, Y+11	; 0x0b
    466e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4670:	fc 01       	movw	r30, r24
    4672:	32 96       	adiw	r30, 0x02	; 2
    4674:	80 81       	ld	r24, Z
    4676:	68 2f       	mov	r22, r24
    4678:	70 e0       	ldi	r23, 0x00	; 0
    467a:	78 8f       	std	Y+24, r23	; 0x18
    467c:	6f 8b       	std	Y+23, r22	; 0x17
    467e:	8f 89       	ldd	r24, Y+23	; 0x17
    4680:	98 8d       	ldd	r25, Y+24	; 0x18
    4682:	84 33       	cpi	r24, 0x34	; 52
    4684:	91 05       	cpc	r25, r1
    4686:	09 f4       	brne	.+2      	; 0x468a <integer+0x16e>
    4688:	56 c0       	rjmp	.+172    	; 0x4736 <integer+0x21a>
    468a:	2f 89       	ldd	r18, Y+23	; 0x17
    468c:	38 8d       	ldd	r19, Y+24	; 0x18
    468e:	25 33       	cpi	r18, 0x35	; 53
    4690:	31 05       	cpc	r19, r1
    4692:	e4 f4       	brge	.+56     	; 0x46cc <integer+0x1b0>
    4694:	4f 89       	ldd	r20, Y+23	; 0x17
    4696:	58 8d       	ldd	r21, Y+24	; 0x18
    4698:	41 33       	cpi	r20, 0x31	; 49
    469a:	51 05       	cpc	r21, r1
    469c:	09 f4       	brne	.+2      	; 0x46a0 <integer+0x184>
    469e:	3c c0       	rjmp	.+120    	; 0x4718 <integer+0x1fc>
    46a0:	6f 89       	ldd	r22, Y+23	; 0x17
    46a2:	78 8d       	ldd	r23, Y+24	; 0x18
    46a4:	62 33       	cpi	r22, 0x32	; 50
    46a6:	71 05       	cpc	r23, r1
    46a8:	34 f4       	brge	.+12     	; 0x46b6 <integer+0x19a>
    46aa:	8f 89       	ldd	r24, Y+23	; 0x17
    46ac:	98 8d       	ldd	r25, Y+24	; 0x18
    46ae:	80 33       	cpi	r24, 0x30	; 48
    46b0:	91 05       	cpc	r25, r1
    46b2:	69 f1       	breq	.+90     	; 0x470e <integer+0x1f2>
    46b4:	5e c0       	rjmp	.+188    	; 0x4772 <integer+0x256>
    46b6:	2f 89       	ldd	r18, Y+23	; 0x17
    46b8:	38 8d       	ldd	r19, Y+24	; 0x18
    46ba:	22 33       	cpi	r18, 0x32	; 50
    46bc:	31 05       	cpc	r19, r1
    46be:	89 f1       	breq	.+98     	; 0x4722 <integer+0x206>
    46c0:	4f 89       	ldd	r20, Y+23	; 0x17
    46c2:	58 8d       	ldd	r21, Y+24	; 0x18
    46c4:	43 33       	cpi	r20, 0x33	; 51
    46c6:	51 05       	cpc	r21, r1
    46c8:	89 f1       	breq	.+98     	; 0x472c <integer+0x210>
    46ca:	53 c0       	rjmp	.+166    	; 0x4772 <integer+0x256>
    46cc:	6f 89       	ldd	r22, Y+23	; 0x17
    46ce:	78 8d       	ldd	r23, Y+24	; 0x18
    46d0:	67 33       	cpi	r22, 0x37	; 55
    46d2:	71 05       	cpc	r23, r1
    46d4:	09 f4       	brne	.+2      	; 0x46d8 <integer+0x1bc>
    46d6:	3e c0       	rjmp	.+124    	; 0x4754 <integer+0x238>
    46d8:	8f 89       	ldd	r24, Y+23	; 0x17
    46da:	98 8d       	ldd	r25, Y+24	; 0x18
    46dc:	88 33       	cpi	r24, 0x38	; 56
    46de:	91 05       	cpc	r25, r1
    46e0:	5c f4       	brge	.+22     	; 0x46f8 <integer+0x1dc>
    46e2:	2f 89       	ldd	r18, Y+23	; 0x17
    46e4:	38 8d       	ldd	r19, Y+24	; 0x18
    46e6:	25 33       	cpi	r18, 0x35	; 53
    46e8:	31 05       	cpc	r19, r1
    46ea:	51 f1       	breq	.+84     	; 0x4740 <integer+0x224>
    46ec:	4f 89       	ldd	r20, Y+23	; 0x17
    46ee:	58 8d       	ldd	r21, Y+24	; 0x18
    46f0:	46 33       	cpi	r20, 0x36	; 54
    46f2:	51 05       	cpc	r21, r1
    46f4:	51 f1       	breq	.+84     	; 0x474a <integer+0x22e>
    46f6:	3d c0       	rjmp	.+122    	; 0x4772 <integer+0x256>
    46f8:	6f 89       	ldd	r22, Y+23	; 0x17
    46fa:	78 8d       	ldd	r23, Y+24	; 0x18
    46fc:	68 33       	cpi	r22, 0x38	; 56
    46fe:	71 05       	cpc	r23, r1
    4700:	71 f1       	breq	.+92     	; 0x475e <integer+0x242>
    4702:	8f 89       	ldd	r24, Y+23	; 0x17
    4704:	98 8d       	ldd	r25, Y+24	; 0x18
    4706:	89 33       	cpi	r24, 0x39	; 57
    4708:	91 05       	cpc	r25, r1
    470a:	71 f1       	breq	.+92     	; 0x4768 <integer+0x24c>
    470c:	32 c0       	rjmp	.+100    	; 0x4772 <integer+0x256>
		{
		case '0': donze =2;break;
    470e:	82 e0       	ldi	r24, 0x02	; 2
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	98 87       	std	Y+8, r25	; 0x08
    4714:	8f 83       	std	Y+7, r24	; 0x07
    4716:	31 c0       	rjmp	.+98     	; 0x477a <integer+0x25e>
		case '1': donze =1;break;
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	98 87       	std	Y+8, r25	; 0x08
    471e:	8f 83       	std	Y+7, r24	; 0x07
    4720:	2c c0       	rjmp	.+88     	; 0x477a <integer+0x25e>
		case '2': donze =2;break;
    4722:	82 e0       	ldi	r24, 0x02	; 2
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	98 87       	std	Y+8, r25	; 0x08
    4728:	8f 83       	std	Y+7, r24	; 0x07
    472a:	27 c0       	rjmp	.+78     	; 0x477a <integer+0x25e>
		case '3': donze =3;break;
    472c:	83 e0       	ldi	r24, 0x03	; 3
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	98 87       	std	Y+8, r25	; 0x08
    4732:	8f 83       	std	Y+7, r24	; 0x07
    4734:	22 c0       	rjmp	.+68     	; 0x477a <integer+0x25e>
		case '4': donze =4;break;
    4736:	84 e0       	ldi	r24, 0x04	; 4
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	98 87       	std	Y+8, r25	; 0x08
    473c:	8f 83       	std	Y+7, r24	; 0x07
    473e:	1d c0       	rjmp	.+58     	; 0x477a <integer+0x25e>
		case '5': donze =5;break;
    4740:	85 e0       	ldi	r24, 0x05	; 5
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	98 87       	std	Y+8, r25	; 0x08
    4746:	8f 83       	std	Y+7, r24	; 0x07
    4748:	18 c0       	rjmp	.+48     	; 0x477a <integer+0x25e>
		case '6': donze =6;break;
    474a:	86 e0       	ldi	r24, 0x06	; 6
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	98 87       	std	Y+8, r25	; 0x08
    4750:	8f 83       	std	Y+7, r24	; 0x07
    4752:	13 c0       	rjmp	.+38     	; 0x477a <integer+0x25e>
		case '7': donze =7;break;
    4754:	87 e0       	ldi	r24, 0x07	; 7
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	98 87       	std	Y+8, r25	; 0x08
    475a:	8f 83       	std	Y+7, r24	; 0x07
    475c:	0e c0       	rjmp	.+28     	; 0x477a <integer+0x25e>
		case '8': donze =8;break;
    475e:	88 e0       	ldi	r24, 0x08	; 8
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	98 87       	std	Y+8, r25	; 0x08
    4764:	8f 83       	std	Y+7, r24	; 0x07
    4766:	09 c0       	rjmp	.+18     	; 0x477a <integer+0x25e>
		case '9': donze =9;break;
    4768:	89 e0       	ldi	r24, 0x09	; 9
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	98 87       	std	Y+8, r25	; 0x08
    476e:	8f 83       	std	Y+7, r24	; 0x07
    4770:	04 c0       	rjmp	.+8      	; 0x477a <integer+0x25e>
		default: donze = 111;break;
    4772:	8f e6       	ldi	r24, 0x6F	; 111
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	98 87       	std	Y+8, r25	; 0x08
    4778:	8f 83       	std	Y+7, r24	; 0x07
	}
	switch(arr[3])
    477a:	8b 85       	ldd	r24, Y+11	; 0x0b
    477c:	9c 85       	ldd	r25, Y+12	; 0x0c
    477e:	fc 01       	movw	r30, r24
    4780:	33 96       	adiw	r30, 0x03	; 3
    4782:	80 81       	ld	r24, Z
    4784:	28 2f       	mov	r18, r24
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	3e 8b       	std	Y+22, r19	; 0x16
    478a:	2d 8b       	std	Y+21, r18	; 0x15
    478c:	4d 89       	ldd	r20, Y+21	; 0x15
    478e:	5e 89       	ldd	r21, Y+22	; 0x16
    4790:	44 33       	cpi	r20, 0x34	; 52
    4792:	51 05       	cpc	r21, r1
    4794:	09 f4       	brne	.+2      	; 0x4798 <integer+0x27c>
    4796:	52 c0       	rjmp	.+164    	; 0x483c <integer+0x320>
    4798:	6d 89       	ldd	r22, Y+21	; 0x15
    479a:	7e 89       	ldd	r23, Y+22	; 0x16
    479c:	65 33       	cpi	r22, 0x35	; 53
    479e:	71 05       	cpc	r23, r1
    47a0:	dc f4       	brge	.+54     	; 0x47d8 <integer+0x2bc>
    47a2:	8d 89       	ldd	r24, Y+21	; 0x15
    47a4:	9e 89       	ldd	r25, Y+22	; 0x16
    47a6:	81 33       	cpi	r24, 0x31	; 49
    47a8:	91 05       	cpc	r25, r1
    47aa:	c9 f1       	breq	.+114    	; 0x481e <integer+0x302>
    47ac:	2d 89       	ldd	r18, Y+21	; 0x15
    47ae:	3e 89       	ldd	r19, Y+22	; 0x16
    47b0:	22 33       	cpi	r18, 0x32	; 50
    47b2:	31 05       	cpc	r19, r1
    47b4:	34 f4       	brge	.+12     	; 0x47c2 <integer+0x2a6>
    47b6:	4d 89       	ldd	r20, Y+21	; 0x15
    47b8:	5e 89       	ldd	r21, Y+22	; 0x16
    47ba:	40 33       	cpi	r20, 0x30	; 48
    47bc:	51 05       	cpc	r21, r1
    47be:	61 f1       	breq	.+88     	; 0x4818 <integer+0x2fc>
    47c0:	5b c0       	rjmp	.+182    	; 0x4878 <integer+0x35c>
    47c2:	6d 89       	ldd	r22, Y+21	; 0x15
    47c4:	7e 89       	ldd	r23, Y+22	; 0x16
    47c6:	62 33       	cpi	r22, 0x32	; 50
    47c8:	71 05       	cpc	r23, r1
    47ca:	71 f1       	breq	.+92     	; 0x4828 <integer+0x30c>
    47cc:	8d 89       	ldd	r24, Y+21	; 0x15
    47ce:	9e 89       	ldd	r25, Y+22	; 0x16
    47d0:	83 33       	cpi	r24, 0x33	; 51
    47d2:	91 05       	cpc	r25, r1
    47d4:	71 f1       	breq	.+92     	; 0x4832 <integer+0x316>
    47d6:	50 c0       	rjmp	.+160    	; 0x4878 <integer+0x35c>
    47d8:	2d 89       	ldd	r18, Y+21	; 0x15
    47da:	3e 89       	ldd	r19, Y+22	; 0x16
    47dc:	27 33       	cpi	r18, 0x37	; 55
    47de:	31 05       	cpc	r19, r1
    47e0:	e1 f1       	breq	.+120    	; 0x485a <integer+0x33e>
    47e2:	4d 89       	ldd	r20, Y+21	; 0x15
    47e4:	5e 89       	ldd	r21, Y+22	; 0x16
    47e6:	48 33       	cpi	r20, 0x38	; 56
    47e8:	51 05       	cpc	r21, r1
    47ea:	5c f4       	brge	.+22     	; 0x4802 <integer+0x2e6>
    47ec:	6d 89       	ldd	r22, Y+21	; 0x15
    47ee:	7e 89       	ldd	r23, Y+22	; 0x16
    47f0:	65 33       	cpi	r22, 0x35	; 53
    47f2:	71 05       	cpc	r23, r1
    47f4:	41 f1       	breq	.+80     	; 0x4846 <integer+0x32a>
    47f6:	8d 89       	ldd	r24, Y+21	; 0x15
    47f8:	9e 89       	ldd	r25, Y+22	; 0x16
    47fa:	86 33       	cpi	r24, 0x36	; 54
    47fc:	91 05       	cpc	r25, r1
    47fe:	41 f1       	breq	.+80     	; 0x4850 <integer+0x334>
    4800:	3b c0       	rjmp	.+118    	; 0x4878 <integer+0x35c>
    4802:	2d 89       	ldd	r18, Y+21	; 0x15
    4804:	3e 89       	ldd	r19, Y+22	; 0x16
    4806:	28 33       	cpi	r18, 0x38	; 56
    4808:	31 05       	cpc	r19, r1
    480a:	61 f1       	breq	.+88     	; 0x4864 <integer+0x348>
    480c:	4d 89       	ldd	r20, Y+21	; 0x15
    480e:	5e 89       	ldd	r21, Y+22	; 0x16
    4810:	49 33       	cpi	r20, 0x39	; 57
    4812:	51 05       	cpc	r21, r1
    4814:	61 f1       	breq	.+88     	; 0x486e <integer+0x352>
    4816:	30 c0       	rjmp	.+96     	; 0x4878 <integer+0x35c>
	{
		case '0': thouzands =0;break;
    4818:	1e 82       	std	Y+6, r1	; 0x06
    481a:	1d 82       	std	Y+5, r1	; 0x05
    481c:	31 c0       	rjmp	.+98     	; 0x4880 <integer+0x364>
		case '1': thouzands =1;break;
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	9e 83       	std	Y+6, r25	; 0x06
    4824:	8d 83       	std	Y+5, r24	; 0x05
    4826:	2c c0       	rjmp	.+88     	; 0x4880 <integer+0x364>
		case '2': thouzands =2;break;
    4828:	82 e0       	ldi	r24, 0x02	; 2
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	9e 83       	std	Y+6, r25	; 0x06
    482e:	8d 83       	std	Y+5, r24	; 0x05
    4830:	27 c0       	rjmp	.+78     	; 0x4880 <integer+0x364>
		case '3': thouzands =3;break;
    4832:	83 e0       	ldi	r24, 0x03	; 3
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	9e 83       	std	Y+6, r25	; 0x06
    4838:	8d 83       	std	Y+5, r24	; 0x05
    483a:	22 c0       	rjmp	.+68     	; 0x4880 <integer+0x364>
		case '4': thouzands =4;break;
    483c:	84 e0       	ldi	r24, 0x04	; 4
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	9e 83       	std	Y+6, r25	; 0x06
    4842:	8d 83       	std	Y+5, r24	; 0x05
    4844:	1d c0       	rjmp	.+58     	; 0x4880 <integer+0x364>
		case '5': thouzands =5;break;
    4846:	85 e0       	ldi	r24, 0x05	; 5
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	9e 83       	std	Y+6, r25	; 0x06
    484c:	8d 83       	std	Y+5, r24	; 0x05
    484e:	18 c0       	rjmp	.+48     	; 0x4880 <integer+0x364>
		case '6': thouzands =6;break;
    4850:	86 e0       	ldi	r24, 0x06	; 6
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	9e 83       	std	Y+6, r25	; 0x06
    4856:	8d 83       	std	Y+5, r24	; 0x05
    4858:	13 c0       	rjmp	.+38     	; 0x4880 <integer+0x364>
		case '7': thouzands =7;break;
    485a:	87 e0       	ldi	r24, 0x07	; 7
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	9e 83       	std	Y+6, r25	; 0x06
    4860:	8d 83       	std	Y+5, r24	; 0x05
    4862:	0e c0       	rjmp	.+28     	; 0x4880 <integer+0x364>
		case '8': thouzands =8;break;
    4864:	88 e0       	ldi	r24, 0x08	; 8
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	9e 83       	std	Y+6, r25	; 0x06
    486a:	8d 83       	std	Y+5, r24	; 0x05
    486c:	09 c0       	rjmp	.+18     	; 0x4880 <integer+0x364>
		case '9': thouzands =9;break;
    486e:	89 e0       	ldi	r24, 0x09	; 9
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	9e 83       	std	Y+6, r25	; 0x06
    4874:	8d 83       	std	Y+5, r24	; 0x05
    4876:	04 c0       	rjmp	.+8      	; 0x4880 <integer+0x364>
		default: thouzands = 111;break;
    4878:	8f e6       	ldi	r24, 0x6F	; 111
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	9e 83       	std	Y+6, r25	; 0x06
    487e:	8d 83       	std	Y+5, r24	; 0x05
	}

	if(donze == 111 && thouzands == 111 && arr[0] == '-')
    4880:	8f 81       	ldd	r24, Y+7	; 0x07
    4882:	98 85       	ldd	r25, Y+8	; 0x08
    4884:	8f 36       	cpi	r24, 0x6F	; 111
    4886:	91 05       	cpc	r25, r1
    4888:	f1 f4       	brne	.+60     	; 0x48c6 <integer+0x3aa>
    488a:	8d 81       	ldd	r24, Y+5	; 0x05
    488c:	9e 81       	ldd	r25, Y+6	; 0x06
    488e:	8f 36       	cpi	r24, 0x6F	; 111
    4890:	91 05       	cpc	r25, r1
    4892:	c9 f4       	brne	.+50     	; 0x48c6 <integer+0x3aa>
    4894:	eb 85       	ldd	r30, Y+11	; 0x0b
    4896:	fc 85       	ldd	r31, Y+12	; 0x0c
    4898:	80 81       	ld	r24, Z
    489a:	8d 32       	cpi	r24, 0x2D	; 45
    489c:	a1 f4       	brne	.+40     	; 0x48c6 <integer+0x3aa>
		result = (-1)*ones;
    489e:	89 85       	ldd	r24, Y+9	; 0x09
    48a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48a2:	90 95       	com	r25
    48a4:	81 95       	neg	r24
    48a6:	9f 4f       	sbci	r25, 0xFF	; 255
    48a8:	aa 27       	eor	r26, r26
    48aa:	97 fd       	sbrc	r25, 7
    48ac:	a0 95       	com	r26
    48ae:	ba 2f       	mov	r27, r26
    48b0:	bc 01       	movw	r22, r24
    48b2:	cd 01       	movw	r24, r26
    48b4:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    48b8:	dc 01       	movw	r26, r24
    48ba:	cb 01       	movw	r24, r22
    48bc:	89 83       	std	Y+1, r24	; 0x01
    48be:	9a 83       	std	Y+2, r25	; 0x02
    48c0:	ab 83       	std	Y+3, r26	; 0x03
    48c2:	bc 83       	std	Y+4, r27	; 0x04
    48c4:	08 c2       	rjmp	.+1040   	; 0x4cd6 <integer+0x7ba>
	else if(donze == 111 && thouzands == 111 && arr[0] == '+')
    48c6:	8f 81       	ldd	r24, Y+7	; 0x07
    48c8:	98 85       	ldd	r25, Y+8	; 0x08
    48ca:	8f 36       	cpi	r24, 0x6F	; 111
    48cc:	91 05       	cpc	r25, r1
    48ce:	d9 f4       	brne	.+54     	; 0x4906 <integer+0x3ea>
    48d0:	8d 81       	ldd	r24, Y+5	; 0x05
    48d2:	9e 81       	ldd	r25, Y+6	; 0x06
    48d4:	8f 36       	cpi	r24, 0x6F	; 111
    48d6:	91 05       	cpc	r25, r1
    48d8:	b1 f4       	brne	.+44     	; 0x4906 <integer+0x3ea>
    48da:	eb 85       	ldd	r30, Y+11	; 0x0b
    48dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    48de:	80 81       	ld	r24, Z
    48e0:	8b 32       	cpi	r24, 0x2B	; 43
    48e2:	89 f4       	brne	.+34     	; 0x4906 <integer+0x3ea>
		result = ones;
    48e4:	89 85       	ldd	r24, Y+9	; 0x09
    48e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e8:	aa 27       	eor	r26, r26
    48ea:	97 fd       	sbrc	r25, 7
    48ec:	a0 95       	com	r26
    48ee:	ba 2f       	mov	r27, r26
    48f0:	bc 01       	movw	r22, r24
    48f2:	cd 01       	movw	r24, r26
    48f4:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    48f8:	dc 01       	movw	r26, r24
    48fa:	cb 01       	movw	r24, r22
    48fc:	89 83       	std	Y+1, r24	; 0x01
    48fe:	9a 83       	std	Y+2, r25	; 0x02
    4900:	ab 83       	std	Y+3, r26	; 0x03
    4902:	bc 83       	std	Y+4, r27	; 0x04
    4904:	e8 c1       	rjmp	.+976    	; 0x4cd6 <integer+0x7ba>
	else if(ones == 111 && thouzands == 111 && arr[0] == '-')
    4906:	89 85       	ldd	r24, Y+9	; 0x09
    4908:	9a 85       	ldd	r25, Y+10	; 0x0a
    490a:	8f 36       	cpi	r24, 0x6F	; 111
    490c:	91 05       	cpc	r25, r1
    490e:	f1 f4       	brne	.+60     	; 0x494c <integer+0x430>
    4910:	8d 81       	ldd	r24, Y+5	; 0x05
    4912:	9e 81       	ldd	r25, Y+6	; 0x06
    4914:	8f 36       	cpi	r24, 0x6F	; 111
    4916:	91 05       	cpc	r25, r1
    4918:	c9 f4       	brne	.+50     	; 0x494c <integer+0x430>
    491a:	eb 85       	ldd	r30, Y+11	; 0x0b
    491c:	fc 85       	ldd	r31, Y+12	; 0x0c
    491e:	80 81       	ld	r24, Z
    4920:	8d 32       	cpi	r24, 0x2D	; 45
    4922:	a1 f4       	brne	.+40     	; 0x494c <integer+0x430>
		result = (-1)*donze;
    4924:	8f 81       	ldd	r24, Y+7	; 0x07
    4926:	98 85       	ldd	r25, Y+8	; 0x08
    4928:	90 95       	com	r25
    492a:	81 95       	neg	r24
    492c:	9f 4f       	sbci	r25, 0xFF	; 255
    492e:	aa 27       	eor	r26, r26
    4930:	97 fd       	sbrc	r25, 7
    4932:	a0 95       	com	r26
    4934:	ba 2f       	mov	r27, r26
    4936:	bc 01       	movw	r22, r24
    4938:	cd 01       	movw	r24, r26
    493a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    493e:	dc 01       	movw	r26, r24
    4940:	cb 01       	movw	r24, r22
    4942:	89 83       	std	Y+1, r24	; 0x01
    4944:	9a 83       	std	Y+2, r25	; 0x02
    4946:	ab 83       	std	Y+3, r26	; 0x03
    4948:	bc 83       	std	Y+4, r27	; 0x04
    494a:	c5 c1       	rjmp	.+906    	; 0x4cd6 <integer+0x7ba>
	else if(ones == 111 && thouzands == 111 && arr[0] == '+')
    494c:	89 85       	ldd	r24, Y+9	; 0x09
    494e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4950:	8f 36       	cpi	r24, 0x6F	; 111
    4952:	91 05       	cpc	r25, r1
    4954:	d9 f4       	brne	.+54     	; 0x498c <integer+0x470>
    4956:	8d 81       	ldd	r24, Y+5	; 0x05
    4958:	9e 81       	ldd	r25, Y+6	; 0x06
    495a:	8f 36       	cpi	r24, 0x6F	; 111
    495c:	91 05       	cpc	r25, r1
    495e:	b1 f4       	brne	.+44     	; 0x498c <integer+0x470>
    4960:	eb 85       	ldd	r30, Y+11	; 0x0b
    4962:	fc 85       	ldd	r31, Y+12	; 0x0c
    4964:	80 81       	ld	r24, Z
    4966:	8b 32       	cpi	r24, 0x2B	; 43
    4968:	89 f4       	brne	.+34     	; 0x498c <integer+0x470>
		result = donze;
    496a:	8f 81       	ldd	r24, Y+7	; 0x07
    496c:	98 85       	ldd	r25, Y+8	; 0x08
    496e:	aa 27       	eor	r26, r26
    4970:	97 fd       	sbrc	r25, 7
    4972:	a0 95       	com	r26
    4974:	ba 2f       	mov	r27, r26
    4976:	bc 01       	movw	r22, r24
    4978:	cd 01       	movw	r24, r26
    497a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    497e:	dc 01       	movw	r26, r24
    4980:	cb 01       	movw	r24, r22
    4982:	89 83       	std	Y+1, r24	; 0x01
    4984:	9a 83       	std	Y+2, r25	; 0x02
    4986:	ab 83       	std	Y+3, r26	; 0x03
    4988:	bc 83       	std	Y+4, r27	; 0x04
    498a:	a5 c1       	rjmp	.+842    	; 0x4cd6 <integer+0x7ba>
	else if(ones == 111 && donze == 111 && arr[0] == '-')
    498c:	89 85       	ldd	r24, Y+9	; 0x09
    498e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4990:	8f 36       	cpi	r24, 0x6F	; 111
    4992:	91 05       	cpc	r25, r1
    4994:	f1 f4       	brne	.+60     	; 0x49d2 <integer+0x4b6>
    4996:	8f 81       	ldd	r24, Y+7	; 0x07
    4998:	98 85       	ldd	r25, Y+8	; 0x08
    499a:	8f 36       	cpi	r24, 0x6F	; 111
    499c:	91 05       	cpc	r25, r1
    499e:	c9 f4       	brne	.+50     	; 0x49d2 <integer+0x4b6>
    49a0:	eb 85       	ldd	r30, Y+11	; 0x0b
    49a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    49a4:	80 81       	ld	r24, Z
    49a6:	8d 32       	cpi	r24, 0x2D	; 45
    49a8:	a1 f4       	brne	.+40     	; 0x49d2 <integer+0x4b6>
		result = (-1)*thouzands;
    49aa:	8d 81       	ldd	r24, Y+5	; 0x05
    49ac:	9e 81       	ldd	r25, Y+6	; 0x06
    49ae:	90 95       	com	r25
    49b0:	81 95       	neg	r24
    49b2:	9f 4f       	sbci	r25, 0xFF	; 255
    49b4:	aa 27       	eor	r26, r26
    49b6:	97 fd       	sbrc	r25, 7
    49b8:	a0 95       	com	r26
    49ba:	ba 2f       	mov	r27, r26
    49bc:	bc 01       	movw	r22, r24
    49be:	cd 01       	movw	r24, r26
    49c0:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    49c4:	dc 01       	movw	r26, r24
    49c6:	cb 01       	movw	r24, r22
    49c8:	89 83       	std	Y+1, r24	; 0x01
    49ca:	9a 83       	std	Y+2, r25	; 0x02
    49cc:	ab 83       	std	Y+3, r26	; 0x03
    49ce:	bc 83       	std	Y+4, r27	; 0x04
    49d0:	82 c1       	rjmp	.+772    	; 0x4cd6 <integer+0x7ba>
	else if(ones == 111 && donze == 111 && arr[0] == '+')
    49d2:	89 85       	ldd	r24, Y+9	; 0x09
    49d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49d6:	8f 36       	cpi	r24, 0x6F	; 111
    49d8:	91 05       	cpc	r25, r1
    49da:	d9 f4       	brne	.+54     	; 0x4a12 <integer+0x4f6>
    49dc:	8f 81       	ldd	r24, Y+7	; 0x07
    49de:	98 85       	ldd	r25, Y+8	; 0x08
    49e0:	8f 36       	cpi	r24, 0x6F	; 111
    49e2:	91 05       	cpc	r25, r1
    49e4:	b1 f4       	brne	.+44     	; 0x4a12 <integer+0x4f6>
    49e6:	eb 85       	ldd	r30, Y+11	; 0x0b
    49e8:	fc 85       	ldd	r31, Y+12	; 0x0c
    49ea:	80 81       	ld	r24, Z
    49ec:	8b 32       	cpi	r24, 0x2B	; 43
    49ee:	89 f4       	brne	.+34     	; 0x4a12 <integer+0x4f6>
		result = thouzands;
    49f0:	8d 81       	ldd	r24, Y+5	; 0x05
    49f2:	9e 81       	ldd	r25, Y+6	; 0x06
    49f4:	aa 27       	eor	r26, r26
    49f6:	97 fd       	sbrc	r25, 7
    49f8:	a0 95       	com	r26
    49fa:	ba 2f       	mov	r27, r26
    49fc:	bc 01       	movw	r22, r24
    49fe:	cd 01       	movw	r24, r26
    4a00:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4a04:	dc 01       	movw	r26, r24
    4a06:	cb 01       	movw	r24, r22
    4a08:	89 83       	std	Y+1, r24	; 0x01
    4a0a:	9a 83       	std	Y+2, r25	; 0x02
    4a0c:	ab 83       	std	Y+3, r26	; 0x03
    4a0e:	bc 83       	std	Y+4, r27	; 0x04
    4a10:	62 c1       	rjmp	.+708    	; 0x4cd6 <integer+0x7ba>
	else if(ones == 111 && arr[0] == '-')
    4a12:	89 85       	ldd	r24, Y+9	; 0x09
    4a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a16:	8f 36       	cpi	r24, 0x6F	; 111
    4a18:	91 05       	cpc	r25, r1
    4a1a:	39 f5       	brne	.+78     	; 0x4a6a <integer+0x54e>
    4a1c:	eb 85       	ldd	r30, Y+11	; 0x0b
    4a1e:	fc 85       	ldd	r31, Y+12	; 0x0c
    4a20:	80 81       	ld	r24, Z
    4a22:	8d 32       	cpi	r24, 0x2D	; 45
    4a24:	11 f5       	brne	.+68     	; 0x4a6a <integer+0x54e>
		result = (-1)*(donze*10 + thouzands);
    4a26:	8f 81       	ldd	r24, Y+7	; 0x07
    4a28:	98 85       	ldd	r25, Y+8	; 0x08
    4a2a:	9c 01       	movw	r18, r24
    4a2c:	22 0f       	add	r18, r18
    4a2e:	33 1f       	adc	r19, r19
    4a30:	c9 01       	movw	r24, r18
    4a32:	88 0f       	add	r24, r24
    4a34:	99 1f       	adc	r25, r25
    4a36:	88 0f       	add	r24, r24
    4a38:	99 1f       	adc	r25, r25
    4a3a:	82 0f       	add	r24, r18
    4a3c:	93 1f       	adc	r25, r19
    4a3e:	90 95       	com	r25
    4a40:	81 95       	neg	r24
    4a42:	9f 4f       	sbci	r25, 0xFF	; 255
    4a44:	2d 81       	ldd	r18, Y+5	; 0x05
    4a46:	3e 81       	ldd	r19, Y+6	; 0x06
    4a48:	82 1b       	sub	r24, r18
    4a4a:	93 0b       	sbc	r25, r19
    4a4c:	aa 27       	eor	r26, r26
    4a4e:	97 fd       	sbrc	r25, 7
    4a50:	a0 95       	com	r26
    4a52:	ba 2f       	mov	r27, r26
    4a54:	bc 01       	movw	r22, r24
    4a56:	cd 01       	movw	r24, r26
    4a58:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4a5c:	dc 01       	movw	r26, r24
    4a5e:	cb 01       	movw	r24, r22
    4a60:	89 83       	std	Y+1, r24	; 0x01
    4a62:	9a 83       	std	Y+2, r25	; 0x02
    4a64:	ab 83       	std	Y+3, r26	; 0x03
    4a66:	bc 83       	std	Y+4, r27	; 0x04
    4a68:	36 c1       	rjmp	.+620    	; 0x4cd6 <integer+0x7ba>
	else if(ones == 111 && arr[0] == '+')
    4a6a:	89 85       	ldd	r24, Y+9	; 0x09
    4a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a6e:	8f 36       	cpi	r24, 0x6F	; 111
    4a70:	91 05       	cpc	r25, r1
    4a72:	21 f5       	brne	.+72     	; 0x4abc <integer+0x5a0>
    4a74:	eb 85       	ldd	r30, Y+11	; 0x0b
    4a76:	fc 85       	ldd	r31, Y+12	; 0x0c
    4a78:	80 81       	ld	r24, Z
    4a7a:	8b 32       	cpi	r24, 0x2B	; 43
    4a7c:	f9 f4       	brne	.+62     	; 0x4abc <integer+0x5a0>
		result = donze*10 + thouzands;
    4a7e:	8f 81       	ldd	r24, Y+7	; 0x07
    4a80:	98 85       	ldd	r25, Y+8	; 0x08
    4a82:	9c 01       	movw	r18, r24
    4a84:	22 0f       	add	r18, r18
    4a86:	33 1f       	adc	r19, r19
    4a88:	c9 01       	movw	r24, r18
    4a8a:	88 0f       	add	r24, r24
    4a8c:	99 1f       	adc	r25, r25
    4a8e:	88 0f       	add	r24, r24
    4a90:	99 1f       	adc	r25, r25
    4a92:	28 0f       	add	r18, r24
    4a94:	39 1f       	adc	r19, r25
    4a96:	8d 81       	ldd	r24, Y+5	; 0x05
    4a98:	9e 81       	ldd	r25, Y+6	; 0x06
    4a9a:	82 0f       	add	r24, r18
    4a9c:	93 1f       	adc	r25, r19
    4a9e:	aa 27       	eor	r26, r26
    4aa0:	97 fd       	sbrc	r25, 7
    4aa2:	a0 95       	com	r26
    4aa4:	ba 2f       	mov	r27, r26
    4aa6:	bc 01       	movw	r22, r24
    4aa8:	cd 01       	movw	r24, r26
    4aaa:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4aae:	dc 01       	movw	r26, r24
    4ab0:	cb 01       	movw	r24, r22
    4ab2:	89 83       	std	Y+1, r24	; 0x01
    4ab4:	9a 83       	std	Y+2, r25	; 0x02
    4ab6:	ab 83       	std	Y+3, r26	; 0x03
    4ab8:	bc 83       	std	Y+4, r27	; 0x04
    4aba:	0d c1       	rjmp	.+538    	; 0x4cd6 <integer+0x7ba>
	else if(donze == 111 && arr[0] == '-')
    4abc:	8f 81       	ldd	r24, Y+7	; 0x07
    4abe:	98 85       	ldd	r25, Y+8	; 0x08
    4ac0:	8f 36       	cpi	r24, 0x6F	; 111
    4ac2:	91 05       	cpc	r25, r1
    4ac4:	39 f5       	brne	.+78     	; 0x4b14 <integer+0x5f8>
    4ac6:	eb 85       	ldd	r30, Y+11	; 0x0b
    4ac8:	fc 85       	ldd	r31, Y+12	; 0x0c
    4aca:	80 81       	ld	r24, Z
    4acc:	8d 32       	cpi	r24, 0x2D	; 45
    4ace:	11 f5       	brne	.+68     	; 0x4b14 <integer+0x5f8>
		result = (-1)*(ones*10 + thouzands);
    4ad0:	89 85       	ldd	r24, Y+9	; 0x09
    4ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ad4:	9c 01       	movw	r18, r24
    4ad6:	22 0f       	add	r18, r18
    4ad8:	33 1f       	adc	r19, r19
    4ada:	c9 01       	movw	r24, r18
    4adc:	88 0f       	add	r24, r24
    4ade:	99 1f       	adc	r25, r25
    4ae0:	88 0f       	add	r24, r24
    4ae2:	99 1f       	adc	r25, r25
    4ae4:	82 0f       	add	r24, r18
    4ae6:	93 1f       	adc	r25, r19
    4ae8:	90 95       	com	r25
    4aea:	81 95       	neg	r24
    4aec:	9f 4f       	sbci	r25, 0xFF	; 255
    4aee:	2d 81       	ldd	r18, Y+5	; 0x05
    4af0:	3e 81       	ldd	r19, Y+6	; 0x06
    4af2:	82 1b       	sub	r24, r18
    4af4:	93 0b       	sbc	r25, r19
    4af6:	aa 27       	eor	r26, r26
    4af8:	97 fd       	sbrc	r25, 7
    4afa:	a0 95       	com	r26
    4afc:	ba 2f       	mov	r27, r26
    4afe:	bc 01       	movw	r22, r24
    4b00:	cd 01       	movw	r24, r26
    4b02:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4b06:	dc 01       	movw	r26, r24
    4b08:	cb 01       	movw	r24, r22
    4b0a:	89 83       	std	Y+1, r24	; 0x01
    4b0c:	9a 83       	std	Y+2, r25	; 0x02
    4b0e:	ab 83       	std	Y+3, r26	; 0x03
    4b10:	bc 83       	std	Y+4, r27	; 0x04
    4b12:	e1 c0       	rjmp	.+450    	; 0x4cd6 <integer+0x7ba>
	else if(donze == 111 && arr[0] == '+')
    4b14:	8f 81       	ldd	r24, Y+7	; 0x07
    4b16:	98 85       	ldd	r25, Y+8	; 0x08
    4b18:	8f 36       	cpi	r24, 0x6F	; 111
    4b1a:	91 05       	cpc	r25, r1
    4b1c:	21 f5       	brne	.+72     	; 0x4b66 <integer+0x64a>
    4b1e:	eb 85       	ldd	r30, Y+11	; 0x0b
    4b20:	fc 85       	ldd	r31, Y+12	; 0x0c
    4b22:	80 81       	ld	r24, Z
    4b24:	8b 32       	cpi	r24, 0x2B	; 43
    4b26:	f9 f4       	brne	.+62     	; 0x4b66 <integer+0x64a>
		result = ones*10 + thouzands;
    4b28:	89 85       	ldd	r24, Y+9	; 0x09
    4b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b2c:	9c 01       	movw	r18, r24
    4b2e:	22 0f       	add	r18, r18
    4b30:	33 1f       	adc	r19, r19
    4b32:	c9 01       	movw	r24, r18
    4b34:	88 0f       	add	r24, r24
    4b36:	99 1f       	adc	r25, r25
    4b38:	88 0f       	add	r24, r24
    4b3a:	99 1f       	adc	r25, r25
    4b3c:	28 0f       	add	r18, r24
    4b3e:	39 1f       	adc	r19, r25
    4b40:	8d 81       	ldd	r24, Y+5	; 0x05
    4b42:	9e 81       	ldd	r25, Y+6	; 0x06
    4b44:	82 0f       	add	r24, r18
    4b46:	93 1f       	adc	r25, r19
    4b48:	aa 27       	eor	r26, r26
    4b4a:	97 fd       	sbrc	r25, 7
    4b4c:	a0 95       	com	r26
    4b4e:	ba 2f       	mov	r27, r26
    4b50:	bc 01       	movw	r22, r24
    4b52:	cd 01       	movw	r24, r26
    4b54:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	89 83       	std	Y+1, r24	; 0x01
    4b5e:	9a 83       	std	Y+2, r25	; 0x02
    4b60:	ab 83       	std	Y+3, r26	; 0x03
    4b62:	bc 83       	std	Y+4, r27	; 0x04
    4b64:	b8 c0       	rjmp	.+368    	; 0x4cd6 <integer+0x7ba>
	else if( thouzands == 111 && arr[0] == '-')
    4b66:	8d 81       	ldd	r24, Y+5	; 0x05
    4b68:	9e 81       	ldd	r25, Y+6	; 0x06
    4b6a:	8f 36       	cpi	r24, 0x6F	; 111
    4b6c:	91 05       	cpc	r25, r1
    4b6e:	39 f5       	brne	.+78     	; 0x4bbe <integer+0x6a2>
    4b70:	eb 85       	ldd	r30, Y+11	; 0x0b
    4b72:	fc 85       	ldd	r31, Y+12	; 0x0c
    4b74:	80 81       	ld	r24, Z
    4b76:	8d 32       	cpi	r24, 0x2D	; 45
    4b78:	11 f5       	brne	.+68     	; 0x4bbe <integer+0x6a2>
		result = (-1)*(ones*10 + donze);
    4b7a:	89 85       	ldd	r24, Y+9	; 0x09
    4b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b7e:	9c 01       	movw	r18, r24
    4b80:	22 0f       	add	r18, r18
    4b82:	33 1f       	adc	r19, r19
    4b84:	c9 01       	movw	r24, r18
    4b86:	88 0f       	add	r24, r24
    4b88:	99 1f       	adc	r25, r25
    4b8a:	88 0f       	add	r24, r24
    4b8c:	99 1f       	adc	r25, r25
    4b8e:	82 0f       	add	r24, r18
    4b90:	93 1f       	adc	r25, r19
    4b92:	90 95       	com	r25
    4b94:	81 95       	neg	r24
    4b96:	9f 4f       	sbci	r25, 0xFF	; 255
    4b98:	2f 81       	ldd	r18, Y+7	; 0x07
    4b9a:	38 85       	ldd	r19, Y+8	; 0x08
    4b9c:	82 1b       	sub	r24, r18
    4b9e:	93 0b       	sbc	r25, r19
    4ba0:	aa 27       	eor	r26, r26
    4ba2:	97 fd       	sbrc	r25, 7
    4ba4:	a0 95       	com	r26
    4ba6:	ba 2f       	mov	r27, r26
    4ba8:	bc 01       	movw	r22, r24
    4baa:	cd 01       	movw	r24, r26
    4bac:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4bb0:	dc 01       	movw	r26, r24
    4bb2:	cb 01       	movw	r24, r22
    4bb4:	89 83       	std	Y+1, r24	; 0x01
    4bb6:	9a 83       	std	Y+2, r25	; 0x02
    4bb8:	ab 83       	std	Y+3, r26	; 0x03
    4bba:	bc 83       	std	Y+4, r27	; 0x04
    4bbc:	8c c0       	rjmp	.+280    	; 0x4cd6 <integer+0x7ba>
	else if (thouzands == 111 && arr[0] == '+')
    4bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc2:	8f 36       	cpi	r24, 0x6F	; 111
    4bc4:	91 05       	cpc	r25, r1
    4bc6:	21 f5       	brne	.+72     	; 0x4c10 <integer+0x6f4>
    4bc8:	eb 85       	ldd	r30, Y+11	; 0x0b
    4bca:	fc 85       	ldd	r31, Y+12	; 0x0c
    4bcc:	80 81       	ld	r24, Z
    4bce:	8b 32       	cpi	r24, 0x2B	; 43
    4bd0:	f9 f4       	brne	.+62     	; 0x4c10 <integer+0x6f4>
		result = ones*10 + donze;
    4bd2:	89 85       	ldd	r24, Y+9	; 0x09
    4bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd6:	9c 01       	movw	r18, r24
    4bd8:	22 0f       	add	r18, r18
    4bda:	33 1f       	adc	r19, r19
    4bdc:	c9 01       	movw	r24, r18
    4bde:	88 0f       	add	r24, r24
    4be0:	99 1f       	adc	r25, r25
    4be2:	88 0f       	add	r24, r24
    4be4:	99 1f       	adc	r25, r25
    4be6:	28 0f       	add	r18, r24
    4be8:	39 1f       	adc	r19, r25
    4bea:	8f 81       	ldd	r24, Y+7	; 0x07
    4bec:	98 85       	ldd	r25, Y+8	; 0x08
    4bee:	82 0f       	add	r24, r18
    4bf0:	93 1f       	adc	r25, r19
    4bf2:	aa 27       	eor	r26, r26
    4bf4:	97 fd       	sbrc	r25, 7
    4bf6:	a0 95       	com	r26
    4bf8:	ba 2f       	mov	r27, r26
    4bfa:	bc 01       	movw	r22, r24
    4bfc:	cd 01       	movw	r24, r26
    4bfe:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4c02:	dc 01       	movw	r26, r24
    4c04:	cb 01       	movw	r24, r22
    4c06:	89 83       	std	Y+1, r24	; 0x01
    4c08:	9a 83       	std	Y+2, r25	; 0x02
    4c0a:	ab 83       	std	Y+3, r26	; 0x03
    4c0c:	bc 83       	std	Y+4, r27	; 0x04
    4c0e:	63 c0       	rjmp	.+198    	; 0x4cd6 <integer+0x7ba>
	else if(arr[0] == '-')
    4c10:	eb 85       	ldd	r30, Y+11	; 0x0b
    4c12:	fc 85       	ldd	r31, Y+12	; 0x0c
    4c14:	80 81       	ld	r24, Z
    4c16:	8d 32       	cpi	r24, 0x2D	; 45
    4c18:	91 f5       	brne	.+100    	; 0x4c7e <integer+0x762>
		result = (-1)*(ones*100 + donze*10 + thouzands);
    4c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    4c1c:	98 85       	ldd	r25, Y+8	; 0x08
    4c1e:	9c 01       	movw	r18, r24
    4c20:	22 0f       	add	r18, r18
    4c22:	33 1f       	adc	r19, r19
    4c24:	c9 01       	movw	r24, r18
    4c26:	88 0f       	add	r24, r24
    4c28:	99 1f       	adc	r25, r25
    4c2a:	88 0f       	add	r24, r24
    4c2c:	99 1f       	adc	r25, r25
    4c2e:	28 0f       	add	r18, r24
    4c30:	39 1f       	adc	r19, r25
    4c32:	30 95       	com	r19
    4c34:	21 95       	neg	r18
    4c36:	3f 4f       	sbci	r19, 0xFF	; 255
    4c38:	49 85       	ldd	r20, Y+9	; 0x09
    4c3a:	5a 85       	ldd	r21, Y+10	; 0x0a
    4c3c:	8c e9       	ldi	r24, 0x9C	; 156
    4c3e:	9f ef       	ldi	r25, 0xFF	; 255
    4c40:	bc 01       	movw	r22, r24
    4c42:	46 9f       	mul	r20, r22
    4c44:	c0 01       	movw	r24, r0
    4c46:	47 9f       	mul	r20, r23
    4c48:	90 0d       	add	r25, r0
    4c4a:	56 9f       	mul	r21, r22
    4c4c:	90 0d       	add	r25, r0
    4c4e:	11 24       	eor	r1, r1
    4c50:	28 0f       	add	r18, r24
    4c52:	39 1f       	adc	r19, r25
    4c54:	8d 81       	ldd	r24, Y+5	; 0x05
    4c56:	9e 81       	ldd	r25, Y+6	; 0x06
    4c58:	a9 01       	movw	r20, r18
    4c5a:	48 1b       	sub	r20, r24
    4c5c:	59 0b       	sbc	r21, r25
    4c5e:	ca 01       	movw	r24, r20
    4c60:	aa 27       	eor	r26, r26
    4c62:	97 fd       	sbrc	r25, 7
    4c64:	a0 95       	com	r26
    4c66:	ba 2f       	mov	r27, r26
    4c68:	bc 01       	movw	r22, r24
    4c6a:	cd 01       	movw	r24, r26
    4c6c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4c70:	dc 01       	movw	r26, r24
    4c72:	cb 01       	movw	r24, r22
    4c74:	89 83       	std	Y+1, r24	; 0x01
    4c76:	9a 83       	std	Y+2, r25	; 0x02
    4c78:	ab 83       	std	Y+3, r26	; 0x03
    4c7a:	bc 83       	std	Y+4, r27	; 0x04
    4c7c:	2c c0       	rjmp	.+88     	; 0x4cd6 <integer+0x7ba>
	else
		result = ones*100 + donze*10 + thouzands;// +((float)fraction/10);
    4c7e:	29 85       	ldd	r18, Y+9	; 0x09
    4c80:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c82:	84 e6       	ldi	r24, 0x64	; 100
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	28 9f       	mul	r18, r24
    4c88:	a0 01       	movw	r20, r0
    4c8a:	29 9f       	mul	r18, r25
    4c8c:	50 0d       	add	r21, r0
    4c8e:	38 9f       	mul	r19, r24
    4c90:	50 0d       	add	r21, r0
    4c92:	11 24       	eor	r1, r1
    4c94:	8f 81       	ldd	r24, Y+7	; 0x07
    4c96:	98 85       	ldd	r25, Y+8	; 0x08
    4c98:	9c 01       	movw	r18, r24
    4c9a:	22 0f       	add	r18, r18
    4c9c:	33 1f       	adc	r19, r19
    4c9e:	c9 01       	movw	r24, r18
    4ca0:	88 0f       	add	r24, r24
    4ca2:	99 1f       	adc	r25, r25
    4ca4:	88 0f       	add	r24, r24
    4ca6:	99 1f       	adc	r25, r25
    4ca8:	82 0f       	add	r24, r18
    4caa:	93 1f       	adc	r25, r19
    4cac:	9a 01       	movw	r18, r20
    4cae:	28 0f       	add	r18, r24
    4cb0:	39 1f       	adc	r19, r25
    4cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb6:	82 0f       	add	r24, r18
    4cb8:	93 1f       	adc	r25, r19
    4cba:	aa 27       	eor	r26, r26
    4cbc:	97 fd       	sbrc	r25, 7
    4cbe:	a0 95       	com	r26
    4cc0:	ba 2f       	mov	r27, r26
    4cc2:	bc 01       	movw	r22, r24
    4cc4:	cd 01       	movw	r24, r26
    4cc6:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4cca:	dc 01       	movw	r26, r24
    4ccc:	cb 01       	movw	r24, r22
    4cce:	89 83       	std	Y+1, r24	; 0x01
    4cd0:	9a 83       	std	Y+2, r25	; 0x02
    4cd2:	ab 83       	std	Y+3, r26	; 0x03
    4cd4:	bc 83       	std	Y+4, r27	; 0x04
	return result;
    4cd6:	69 81       	ldd	r22, Y+1	; 0x01
    4cd8:	7a 81       	ldd	r23, Y+2	; 0x02
    4cda:	8b 81       	ldd	r24, Y+3	; 0x03
    4cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    4cde:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	9c 8b       	std	Y+20, r25	; 0x14
    4ce8:	8b 8b       	std	Y+19, r24	; 0x13
    4cea:	7e c2       	rjmp	.+1276   	; 0x51e8 <integer+0xccc>
	}
	else
	{
		switch(arr[0])
    4cec:	eb 85       	ldd	r30, Y+11	; 0x0b
    4cee:	fc 85       	ldd	r31, Y+12	; 0x0c
    4cf0:	80 81       	ld	r24, Z
    4cf2:	68 2f       	mov	r22, r24
    4cf4:	70 e0       	ldi	r23, 0x00	; 0
    4cf6:	7a 8b       	std	Y+18, r23	; 0x12
    4cf8:	69 8b       	std	Y+17, r22	; 0x11
    4cfa:	89 89       	ldd	r24, Y+17	; 0x11
    4cfc:	9a 89       	ldd	r25, Y+18	; 0x12
    4cfe:	84 33       	cpi	r24, 0x34	; 52
    4d00:	91 05       	cpc	r25, r1
    4d02:	09 f4       	brne	.+2      	; 0x4d06 <integer+0x7ea>
    4d04:	52 c0       	rjmp	.+164    	; 0x4daa <integer+0x88e>
    4d06:	29 89       	ldd	r18, Y+17	; 0x11
    4d08:	3a 89       	ldd	r19, Y+18	; 0x12
    4d0a:	25 33       	cpi	r18, 0x35	; 53
    4d0c:	31 05       	cpc	r19, r1
    4d0e:	dc f4       	brge	.+54     	; 0x4d46 <integer+0x82a>
    4d10:	49 89       	ldd	r20, Y+17	; 0x11
    4d12:	5a 89       	ldd	r21, Y+18	; 0x12
    4d14:	41 33       	cpi	r20, 0x31	; 49
    4d16:	51 05       	cpc	r21, r1
    4d18:	c9 f1       	breq	.+114    	; 0x4d8c <integer+0x870>
    4d1a:	69 89       	ldd	r22, Y+17	; 0x11
    4d1c:	7a 89       	ldd	r23, Y+18	; 0x12
    4d1e:	62 33       	cpi	r22, 0x32	; 50
    4d20:	71 05       	cpc	r23, r1
    4d22:	34 f4       	brge	.+12     	; 0x4d30 <integer+0x814>
    4d24:	89 89       	ldd	r24, Y+17	; 0x11
    4d26:	9a 89       	ldd	r25, Y+18	; 0x12
    4d28:	80 33       	cpi	r24, 0x30	; 48
    4d2a:	91 05       	cpc	r25, r1
    4d2c:	61 f1       	breq	.+88     	; 0x4d86 <integer+0x86a>
    4d2e:	5b c0       	rjmp	.+182    	; 0x4de6 <integer+0x8ca>
    4d30:	29 89       	ldd	r18, Y+17	; 0x11
    4d32:	3a 89       	ldd	r19, Y+18	; 0x12
    4d34:	22 33       	cpi	r18, 0x32	; 50
    4d36:	31 05       	cpc	r19, r1
    4d38:	71 f1       	breq	.+92     	; 0x4d96 <integer+0x87a>
    4d3a:	49 89       	ldd	r20, Y+17	; 0x11
    4d3c:	5a 89       	ldd	r21, Y+18	; 0x12
    4d3e:	43 33       	cpi	r20, 0x33	; 51
    4d40:	51 05       	cpc	r21, r1
    4d42:	71 f1       	breq	.+92     	; 0x4da0 <integer+0x884>
    4d44:	50 c0       	rjmp	.+160    	; 0x4de6 <integer+0x8ca>
    4d46:	69 89       	ldd	r22, Y+17	; 0x11
    4d48:	7a 89       	ldd	r23, Y+18	; 0x12
    4d4a:	67 33       	cpi	r22, 0x37	; 55
    4d4c:	71 05       	cpc	r23, r1
    4d4e:	e1 f1       	breq	.+120    	; 0x4dc8 <integer+0x8ac>
    4d50:	89 89       	ldd	r24, Y+17	; 0x11
    4d52:	9a 89       	ldd	r25, Y+18	; 0x12
    4d54:	88 33       	cpi	r24, 0x38	; 56
    4d56:	91 05       	cpc	r25, r1
    4d58:	5c f4       	brge	.+22     	; 0x4d70 <integer+0x854>
    4d5a:	29 89       	ldd	r18, Y+17	; 0x11
    4d5c:	3a 89       	ldd	r19, Y+18	; 0x12
    4d5e:	25 33       	cpi	r18, 0x35	; 53
    4d60:	31 05       	cpc	r19, r1
    4d62:	41 f1       	breq	.+80     	; 0x4db4 <integer+0x898>
    4d64:	49 89       	ldd	r20, Y+17	; 0x11
    4d66:	5a 89       	ldd	r21, Y+18	; 0x12
    4d68:	46 33       	cpi	r20, 0x36	; 54
    4d6a:	51 05       	cpc	r21, r1
    4d6c:	41 f1       	breq	.+80     	; 0x4dbe <integer+0x8a2>
    4d6e:	3b c0       	rjmp	.+118    	; 0x4de6 <integer+0x8ca>
    4d70:	69 89       	ldd	r22, Y+17	; 0x11
    4d72:	7a 89       	ldd	r23, Y+18	; 0x12
    4d74:	68 33       	cpi	r22, 0x38	; 56
    4d76:	71 05       	cpc	r23, r1
    4d78:	61 f1       	breq	.+88     	; 0x4dd2 <integer+0x8b6>
    4d7a:	89 89       	ldd	r24, Y+17	; 0x11
    4d7c:	9a 89       	ldd	r25, Y+18	; 0x12
    4d7e:	89 33       	cpi	r24, 0x39	; 57
    4d80:	91 05       	cpc	r25, r1
    4d82:	61 f1       	breq	.+88     	; 0x4ddc <integer+0x8c0>
    4d84:	30 c0       	rjmp	.+96     	; 0x4de6 <integer+0x8ca>
		{
			case '0': ones =0;break;
    4d86:	1a 86       	std	Y+10, r1	; 0x0a
    4d88:	19 86       	std	Y+9, r1	; 0x09
    4d8a:	31 c0       	rjmp	.+98     	; 0x4dee <integer+0x8d2>
			case '1': ones =1;break;
    4d8c:	81 e0       	ldi	r24, 0x01	; 1
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	9a 87       	std	Y+10, r25	; 0x0a
    4d92:	89 87       	std	Y+9, r24	; 0x09
    4d94:	2c c0       	rjmp	.+88     	; 0x4dee <integer+0x8d2>
			case '2': ones =2;break;
    4d96:	82 e0       	ldi	r24, 0x02	; 2
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	9a 87       	std	Y+10, r25	; 0x0a
    4d9c:	89 87       	std	Y+9, r24	; 0x09
    4d9e:	27 c0       	rjmp	.+78     	; 0x4dee <integer+0x8d2>
			case '3': ones =3;break;
    4da0:	83 e0       	ldi	r24, 0x03	; 3
    4da2:	90 e0       	ldi	r25, 0x00	; 0
    4da4:	9a 87       	std	Y+10, r25	; 0x0a
    4da6:	89 87       	std	Y+9, r24	; 0x09
    4da8:	22 c0       	rjmp	.+68     	; 0x4dee <integer+0x8d2>
			case '4': ones =4;break;
    4daa:	84 e0       	ldi	r24, 0x04	; 4
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	9a 87       	std	Y+10, r25	; 0x0a
    4db0:	89 87       	std	Y+9, r24	; 0x09
    4db2:	1d c0       	rjmp	.+58     	; 0x4dee <integer+0x8d2>
			case '5': ones =5;break;
    4db4:	85 e0       	ldi	r24, 0x05	; 5
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	9a 87       	std	Y+10, r25	; 0x0a
    4dba:	89 87       	std	Y+9, r24	; 0x09
    4dbc:	18 c0       	rjmp	.+48     	; 0x4dee <integer+0x8d2>
			case '6': ones =6;break;
    4dbe:	86 e0       	ldi	r24, 0x06	; 6
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	9a 87       	std	Y+10, r25	; 0x0a
    4dc4:	89 87       	std	Y+9, r24	; 0x09
    4dc6:	13 c0       	rjmp	.+38     	; 0x4dee <integer+0x8d2>
			case '7': ones =7;break;
    4dc8:	87 e0       	ldi	r24, 0x07	; 7
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	9a 87       	std	Y+10, r25	; 0x0a
    4dce:	89 87       	std	Y+9, r24	; 0x09
    4dd0:	0e c0       	rjmp	.+28     	; 0x4dee <integer+0x8d2>
			case '8': ones =8;break;
    4dd2:	88 e0       	ldi	r24, 0x08	; 8
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	9a 87       	std	Y+10, r25	; 0x0a
    4dd8:	89 87       	std	Y+9, r24	; 0x09
    4dda:	09 c0       	rjmp	.+18     	; 0x4dee <integer+0x8d2>
			case '9': ones =9;break;
    4ddc:	89 e0       	ldi	r24, 0x09	; 9
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	9a 87       	std	Y+10, r25	; 0x0a
    4de2:	89 87       	std	Y+9, r24	; 0x09
    4de4:	04 c0       	rjmp	.+8      	; 0x4dee <integer+0x8d2>
			case '-':
			default: ones = 111;break;
    4de6:	8f e6       	ldi	r24, 0x6F	; 111
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	9a 87       	std	Y+10, r25	; 0x0a
    4dec:	89 87       	std	Y+9, r24	; 0x09
		}
		switch(arr[1])
    4dee:	8b 85       	ldd	r24, Y+11	; 0x0b
    4df0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4df2:	fc 01       	movw	r30, r24
    4df4:	31 96       	adiw	r30, 0x01	; 1
    4df6:	80 81       	ld	r24, Z
    4df8:	28 2f       	mov	r18, r24
    4dfa:	30 e0       	ldi	r19, 0x00	; 0
    4dfc:	38 8b       	std	Y+16, r19	; 0x10
    4dfe:	2f 87       	std	Y+15, r18	; 0x0f
    4e00:	4f 85       	ldd	r20, Y+15	; 0x0f
    4e02:	58 89       	ldd	r21, Y+16	; 0x10
    4e04:	44 33       	cpi	r20, 0x34	; 52
    4e06:	51 05       	cpc	r21, r1
    4e08:	09 f4       	brne	.+2      	; 0x4e0c <integer+0x8f0>
    4e0a:	56 c0       	rjmp	.+172    	; 0x4eb8 <integer+0x99c>
    4e0c:	6f 85       	ldd	r22, Y+15	; 0x0f
    4e0e:	78 89       	ldd	r23, Y+16	; 0x10
    4e10:	65 33       	cpi	r22, 0x35	; 53
    4e12:	71 05       	cpc	r23, r1
    4e14:	e4 f4       	brge	.+56     	; 0x4e4e <integer+0x932>
    4e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e18:	98 89       	ldd	r25, Y+16	; 0x10
    4e1a:	81 33       	cpi	r24, 0x31	; 49
    4e1c:	91 05       	cpc	r25, r1
    4e1e:	09 f4       	brne	.+2      	; 0x4e22 <integer+0x906>
    4e20:	3c c0       	rjmp	.+120    	; 0x4e9a <integer+0x97e>
    4e22:	2f 85       	ldd	r18, Y+15	; 0x0f
    4e24:	38 89       	ldd	r19, Y+16	; 0x10
    4e26:	22 33       	cpi	r18, 0x32	; 50
    4e28:	31 05       	cpc	r19, r1
    4e2a:	34 f4       	brge	.+12     	; 0x4e38 <integer+0x91c>
    4e2c:	4f 85       	ldd	r20, Y+15	; 0x0f
    4e2e:	58 89       	ldd	r21, Y+16	; 0x10
    4e30:	40 33       	cpi	r20, 0x30	; 48
    4e32:	51 05       	cpc	r21, r1
    4e34:	69 f1       	breq	.+90     	; 0x4e90 <integer+0x974>
    4e36:	5e c0       	rjmp	.+188    	; 0x4ef4 <integer+0x9d8>
    4e38:	6f 85       	ldd	r22, Y+15	; 0x0f
    4e3a:	78 89       	ldd	r23, Y+16	; 0x10
    4e3c:	62 33       	cpi	r22, 0x32	; 50
    4e3e:	71 05       	cpc	r23, r1
    4e40:	89 f1       	breq	.+98     	; 0x4ea4 <integer+0x988>
    4e42:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e44:	98 89       	ldd	r25, Y+16	; 0x10
    4e46:	83 33       	cpi	r24, 0x33	; 51
    4e48:	91 05       	cpc	r25, r1
    4e4a:	89 f1       	breq	.+98     	; 0x4eae <integer+0x992>
    4e4c:	53 c0       	rjmp	.+166    	; 0x4ef4 <integer+0x9d8>
    4e4e:	2f 85       	ldd	r18, Y+15	; 0x0f
    4e50:	38 89       	ldd	r19, Y+16	; 0x10
    4e52:	27 33       	cpi	r18, 0x37	; 55
    4e54:	31 05       	cpc	r19, r1
    4e56:	09 f4       	brne	.+2      	; 0x4e5a <integer+0x93e>
    4e58:	3e c0       	rjmp	.+124    	; 0x4ed6 <integer+0x9ba>
    4e5a:	4f 85       	ldd	r20, Y+15	; 0x0f
    4e5c:	58 89       	ldd	r21, Y+16	; 0x10
    4e5e:	48 33       	cpi	r20, 0x38	; 56
    4e60:	51 05       	cpc	r21, r1
    4e62:	5c f4       	brge	.+22     	; 0x4e7a <integer+0x95e>
    4e64:	6f 85       	ldd	r22, Y+15	; 0x0f
    4e66:	78 89       	ldd	r23, Y+16	; 0x10
    4e68:	65 33       	cpi	r22, 0x35	; 53
    4e6a:	71 05       	cpc	r23, r1
    4e6c:	51 f1       	breq	.+84     	; 0x4ec2 <integer+0x9a6>
    4e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e70:	98 89       	ldd	r25, Y+16	; 0x10
    4e72:	86 33       	cpi	r24, 0x36	; 54
    4e74:	91 05       	cpc	r25, r1
    4e76:	51 f1       	breq	.+84     	; 0x4ecc <integer+0x9b0>
    4e78:	3d c0       	rjmp	.+122    	; 0x4ef4 <integer+0x9d8>
    4e7a:	2f 85       	ldd	r18, Y+15	; 0x0f
    4e7c:	38 89       	ldd	r19, Y+16	; 0x10
    4e7e:	28 33       	cpi	r18, 0x38	; 56
    4e80:	31 05       	cpc	r19, r1
    4e82:	71 f1       	breq	.+92     	; 0x4ee0 <integer+0x9c4>
    4e84:	4f 85       	ldd	r20, Y+15	; 0x0f
    4e86:	58 89       	ldd	r21, Y+16	; 0x10
    4e88:	49 33       	cpi	r20, 0x39	; 57
    4e8a:	51 05       	cpc	r21, r1
    4e8c:	71 f1       	breq	.+92     	; 0x4eea <integer+0x9ce>
    4e8e:	32 c0       	rjmp	.+100    	; 0x4ef4 <integer+0x9d8>
		{
			case '0': donze =2;break;
    4e90:	82 e0       	ldi	r24, 0x02	; 2
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	98 87       	std	Y+8, r25	; 0x08
    4e96:	8f 83       	std	Y+7, r24	; 0x07
    4e98:	31 c0       	rjmp	.+98     	; 0x4efc <integer+0x9e0>
			case '1': donze =1;break;
    4e9a:	81 e0       	ldi	r24, 0x01	; 1
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	98 87       	std	Y+8, r25	; 0x08
    4ea0:	8f 83       	std	Y+7, r24	; 0x07
    4ea2:	2c c0       	rjmp	.+88     	; 0x4efc <integer+0x9e0>
			case '2': donze =2;break;
    4ea4:	82 e0       	ldi	r24, 0x02	; 2
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	98 87       	std	Y+8, r25	; 0x08
    4eaa:	8f 83       	std	Y+7, r24	; 0x07
    4eac:	27 c0       	rjmp	.+78     	; 0x4efc <integer+0x9e0>
			case '3': donze =3;break;
    4eae:	83 e0       	ldi	r24, 0x03	; 3
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	98 87       	std	Y+8, r25	; 0x08
    4eb4:	8f 83       	std	Y+7, r24	; 0x07
    4eb6:	22 c0       	rjmp	.+68     	; 0x4efc <integer+0x9e0>
			case '4': donze =4;break;
    4eb8:	84 e0       	ldi	r24, 0x04	; 4
    4eba:	90 e0       	ldi	r25, 0x00	; 0
    4ebc:	98 87       	std	Y+8, r25	; 0x08
    4ebe:	8f 83       	std	Y+7, r24	; 0x07
    4ec0:	1d c0       	rjmp	.+58     	; 0x4efc <integer+0x9e0>
			case '5': donze =5;break;
    4ec2:	85 e0       	ldi	r24, 0x05	; 5
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	98 87       	std	Y+8, r25	; 0x08
    4ec8:	8f 83       	std	Y+7, r24	; 0x07
    4eca:	18 c0       	rjmp	.+48     	; 0x4efc <integer+0x9e0>
			case '6': donze =6;break;
    4ecc:	86 e0       	ldi	r24, 0x06	; 6
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	98 87       	std	Y+8, r25	; 0x08
    4ed2:	8f 83       	std	Y+7, r24	; 0x07
    4ed4:	13 c0       	rjmp	.+38     	; 0x4efc <integer+0x9e0>
			case '7': donze =7;break;
    4ed6:	87 e0       	ldi	r24, 0x07	; 7
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	98 87       	std	Y+8, r25	; 0x08
    4edc:	8f 83       	std	Y+7, r24	; 0x07
    4ede:	0e c0       	rjmp	.+28     	; 0x4efc <integer+0x9e0>
			case '8': donze =8;break;
    4ee0:	88 e0       	ldi	r24, 0x08	; 8
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	98 87       	std	Y+8, r25	; 0x08
    4ee6:	8f 83       	std	Y+7, r24	; 0x07
    4ee8:	09 c0       	rjmp	.+18     	; 0x4efc <integer+0x9e0>
			case '9': donze =9;break;
    4eea:	89 e0       	ldi	r24, 0x09	; 9
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	98 87       	std	Y+8, r25	; 0x08
    4ef0:	8f 83       	std	Y+7, r24	; 0x07
    4ef2:	04 c0       	rjmp	.+8      	; 0x4efc <integer+0x9e0>
			default: donze = 111;break;
    4ef4:	8f e6       	ldi	r24, 0x6F	; 111
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	98 87       	std	Y+8, r25	; 0x08
    4efa:	8f 83       	std	Y+7, r24	; 0x07
		}
		switch(arr[2])
    4efc:	8b 85       	ldd	r24, Y+11	; 0x0b
    4efe:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f00:	fc 01       	movw	r30, r24
    4f02:	32 96       	adiw	r30, 0x02	; 2
    4f04:	80 81       	ld	r24, Z
    4f06:	68 2f       	mov	r22, r24
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	7e 87       	std	Y+14, r23	; 0x0e
    4f0c:	6d 87       	std	Y+13, r22	; 0x0d
    4f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f12:	84 33       	cpi	r24, 0x34	; 52
    4f14:	91 05       	cpc	r25, r1
    4f16:	09 f4       	brne	.+2      	; 0x4f1a <integer+0x9fe>
    4f18:	52 c0       	rjmp	.+164    	; 0x4fbe <integer+0xaa2>
    4f1a:	2d 85       	ldd	r18, Y+13	; 0x0d
    4f1c:	3e 85       	ldd	r19, Y+14	; 0x0e
    4f1e:	25 33       	cpi	r18, 0x35	; 53
    4f20:	31 05       	cpc	r19, r1
    4f22:	dc f4       	brge	.+54     	; 0x4f5a <integer+0xa3e>
    4f24:	4d 85       	ldd	r20, Y+13	; 0x0d
    4f26:	5e 85       	ldd	r21, Y+14	; 0x0e
    4f28:	41 33       	cpi	r20, 0x31	; 49
    4f2a:	51 05       	cpc	r21, r1
    4f2c:	c9 f1       	breq	.+114    	; 0x4fa0 <integer+0xa84>
    4f2e:	6d 85       	ldd	r22, Y+13	; 0x0d
    4f30:	7e 85       	ldd	r23, Y+14	; 0x0e
    4f32:	62 33       	cpi	r22, 0x32	; 50
    4f34:	71 05       	cpc	r23, r1
    4f36:	34 f4       	brge	.+12     	; 0x4f44 <integer+0xa28>
    4f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f3c:	80 33       	cpi	r24, 0x30	; 48
    4f3e:	91 05       	cpc	r25, r1
    4f40:	61 f1       	breq	.+88     	; 0x4f9a <integer+0xa7e>
    4f42:	5b c0       	rjmp	.+182    	; 0x4ffa <integer+0xade>
    4f44:	2d 85       	ldd	r18, Y+13	; 0x0d
    4f46:	3e 85       	ldd	r19, Y+14	; 0x0e
    4f48:	22 33       	cpi	r18, 0x32	; 50
    4f4a:	31 05       	cpc	r19, r1
    4f4c:	71 f1       	breq	.+92     	; 0x4faa <integer+0xa8e>
    4f4e:	4d 85       	ldd	r20, Y+13	; 0x0d
    4f50:	5e 85       	ldd	r21, Y+14	; 0x0e
    4f52:	43 33       	cpi	r20, 0x33	; 51
    4f54:	51 05       	cpc	r21, r1
    4f56:	71 f1       	breq	.+92     	; 0x4fb4 <integer+0xa98>
    4f58:	50 c0       	rjmp	.+160    	; 0x4ffa <integer+0xade>
    4f5a:	6d 85       	ldd	r22, Y+13	; 0x0d
    4f5c:	7e 85       	ldd	r23, Y+14	; 0x0e
    4f5e:	67 33       	cpi	r22, 0x37	; 55
    4f60:	71 05       	cpc	r23, r1
    4f62:	e1 f1       	breq	.+120    	; 0x4fdc <integer+0xac0>
    4f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f68:	88 33       	cpi	r24, 0x38	; 56
    4f6a:	91 05       	cpc	r25, r1
    4f6c:	5c f4       	brge	.+22     	; 0x4f84 <integer+0xa68>
    4f6e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4f70:	3e 85       	ldd	r19, Y+14	; 0x0e
    4f72:	25 33       	cpi	r18, 0x35	; 53
    4f74:	31 05       	cpc	r19, r1
    4f76:	41 f1       	breq	.+80     	; 0x4fc8 <integer+0xaac>
    4f78:	4d 85       	ldd	r20, Y+13	; 0x0d
    4f7a:	5e 85       	ldd	r21, Y+14	; 0x0e
    4f7c:	46 33       	cpi	r20, 0x36	; 54
    4f7e:	51 05       	cpc	r21, r1
    4f80:	41 f1       	breq	.+80     	; 0x4fd2 <integer+0xab6>
    4f82:	3b c0       	rjmp	.+118    	; 0x4ffa <integer+0xade>
    4f84:	6d 85       	ldd	r22, Y+13	; 0x0d
    4f86:	7e 85       	ldd	r23, Y+14	; 0x0e
    4f88:	68 33       	cpi	r22, 0x38	; 56
    4f8a:	71 05       	cpc	r23, r1
    4f8c:	61 f1       	breq	.+88     	; 0x4fe6 <integer+0xaca>
    4f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f92:	89 33       	cpi	r24, 0x39	; 57
    4f94:	91 05       	cpc	r25, r1
    4f96:	61 f1       	breq	.+88     	; 0x4ff0 <integer+0xad4>
    4f98:	30 c0       	rjmp	.+96     	; 0x4ffa <integer+0xade>
		{
			case '0': thouzands =0;break;
    4f9a:	1e 82       	std	Y+6, r1	; 0x06
    4f9c:	1d 82       	std	Y+5, r1	; 0x05
    4f9e:	31 c0       	rjmp	.+98     	; 0x5002 <integer+0xae6>
			case '1': thouzands =1;break;
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	9e 83       	std	Y+6, r25	; 0x06
    4fa6:	8d 83       	std	Y+5, r24	; 0x05
    4fa8:	2c c0       	rjmp	.+88     	; 0x5002 <integer+0xae6>
			case '2': thouzands =2;break;
    4faa:	82 e0       	ldi	r24, 0x02	; 2
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	9e 83       	std	Y+6, r25	; 0x06
    4fb0:	8d 83       	std	Y+5, r24	; 0x05
    4fb2:	27 c0       	rjmp	.+78     	; 0x5002 <integer+0xae6>
			case '3': thouzands =3;break;
    4fb4:	83 e0       	ldi	r24, 0x03	; 3
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	9e 83       	std	Y+6, r25	; 0x06
    4fba:	8d 83       	std	Y+5, r24	; 0x05
    4fbc:	22 c0       	rjmp	.+68     	; 0x5002 <integer+0xae6>
			case '4': thouzands =4;break;
    4fbe:	84 e0       	ldi	r24, 0x04	; 4
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	9e 83       	std	Y+6, r25	; 0x06
    4fc4:	8d 83       	std	Y+5, r24	; 0x05
    4fc6:	1d c0       	rjmp	.+58     	; 0x5002 <integer+0xae6>
			case '5': thouzands =5;break;
    4fc8:	85 e0       	ldi	r24, 0x05	; 5
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	9e 83       	std	Y+6, r25	; 0x06
    4fce:	8d 83       	std	Y+5, r24	; 0x05
    4fd0:	18 c0       	rjmp	.+48     	; 0x5002 <integer+0xae6>
			case '6': thouzands =6;break;
    4fd2:	86 e0       	ldi	r24, 0x06	; 6
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	9e 83       	std	Y+6, r25	; 0x06
    4fd8:	8d 83       	std	Y+5, r24	; 0x05
    4fda:	13 c0       	rjmp	.+38     	; 0x5002 <integer+0xae6>
			case '7': thouzands =7;break;
    4fdc:	87 e0       	ldi	r24, 0x07	; 7
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	9e 83       	std	Y+6, r25	; 0x06
    4fe2:	8d 83       	std	Y+5, r24	; 0x05
    4fe4:	0e c0       	rjmp	.+28     	; 0x5002 <integer+0xae6>
			case '8': thouzands =8;break;
    4fe6:	88 e0       	ldi	r24, 0x08	; 8
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	9e 83       	std	Y+6, r25	; 0x06
    4fec:	8d 83       	std	Y+5, r24	; 0x05
    4fee:	09 c0       	rjmp	.+18     	; 0x5002 <integer+0xae6>
			case '9': thouzands =9;break;
    4ff0:	89 e0       	ldi	r24, 0x09	; 9
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	9e 83       	std	Y+6, r25	; 0x06
    4ff6:	8d 83       	std	Y+5, r24	; 0x05
    4ff8:	04 c0       	rjmp	.+8      	; 0x5002 <integer+0xae6>
			default: thouzands = 111;break;
    4ffa:	8f e6       	ldi	r24, 0x6F	; 111
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	9e 83       	std	Y+6, r25	; 0x06
    5000:	8d 83       	std	Y+5, r24	; 0x05
		}

		if(donze == 111 && thouzands == 111)
    5002:	8f 81       	ldd	r24, Y+7	; 0x07
    5004:	98 85       	ldd	r25, Y+8	; 0x08
    5006:	8f 36       	cpi	r24, 0x6F	; 111
    5008:	91 05       	cpc	r25, r1
    500a:	b1 f4       	brne	.+44     	; 0x5038 <integer+0xb1c>
    500c:	8d 81       	ldd	r24, Y+5	; 0x05
    500e:	9e 81       	ldd	r25, Y+6	; 0x06
    5010:	8f 36       	cpi	r24, 0x6F	; 111
    5012:	91 05       	cpc	r25, r1
    5014:	89 f4       	brne	.+34     	; 0x5038 <integer+0xb1c>
			result = ones;
    5016:	89 85       	ldd	r24, Y+9	; 0x09
    5018:	9a 85       	ldd	r25, Y+10	; 0x0a
    501a:	aa 27       	eor	r26, r26
    501c:	97 fd       	sbrc	r25, 7
    501e:	a0 95       	com	r26
    5020:	ba 2f       	mov	r27, r26
    5022:	bc 01       	movw	r22, r24
    5024:	cd 01       	movw	r24, r26
    5026:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    502a:	dc 01       	movw	r26, r24
    502c:	cb 01       	movw	r24, r22
    502e:	89 83       	std	Y+1, r24	; 0x01
    5030:	9a 83       	std	Y+2, r25	; 0x02
    5032:	ab 83       	std	Y+3, r26	; 0x03
    5034:	bc 83       	std	Y+4, r27	; 0x04
    5036:	ce c0       	rjmp	.+412    	; 0x51d4 <integer+0xcb8>
		else if(ones == 111 && thouzands == 111)
    5038:	89 85       	ldd	r24, Y+9	; 0x09
    503a:	9a 85       	ldd	r25, Y+10	; 0x0a
    503c:	8f 36       	cpi	r24, 0x6F	; 111
    503e:	91 05       	cpc	r25, r1
    5040:	b1 f4       	brne	.+44     	; 0x506e <integer+0xb52>
    5042:	8d 81       	ldd	r24, Y+5	; 0x05
    5044:	9e 81       	ldd	r25, Y+6	; 0x06
    5046:	8f 36       	cpi	r24, 0x6F	; 111
    5048:	91 05       	cpc	r25, r1
    504a:	89 f4       	brne	.+34     	; 0x506e <integer+0xb52>
			result = donze;
    504c:	8f 81       	ldd	r24, Y+7	; 0x07
    504e:	98 85       	ldd	r25, Y+8	; 0x08
    5050:	aa 27       	eor	r26, r26
    5052:	97 fd       	sbrc	r25, 7
    5054:	a0 95       	com	r26
    5056:	ba 2f       	mov	r27, r26
    5058:	bc 01       	movw	r22, r24
    505a:	cd 01       	movw	r24, r26
    505c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    5060:	dc 01       	movw	r26, r24
    5062:	cb 01       	movw	r24, r22
    5064:	89 83       	std	Y+1, r24	; 0x01
    5066:	9a 83       	std	Y+2, r25	; 0x02
    5068:	ab 83       	std	Y+3, r26	; 0x03
    506a:	bc 83       	std	Y+4, r27	; 0x04
    506c:	b3 c0       	rjmp	.+358    	; 0x51d4 <integer+0xcb8>
		else if(ones == 111 && donze == 111)
    506e:	89 85       	ldd	r24, Y+9	; 0x09
    5070:	9a 85       	ldd	r25, Y+10	; 0x0a
    5072:	8f 36       	cpi	r24, 0x6F	; 111
    5074:	91 05       	cpc	r25, r1
    5076:	b1 f4       	brne	.+44     	; 0x50a4 <integer+0xb88>
    5078:	8f 81       	ldd	r24, Y+7	; 0x07
    507a:	98 85       	ldd	r25, Y+8	; 0x08
    507c:	8f 36       	cpi	r24, 0x6F	; 111
    507e:	91 05       	cpc	r25, r1
    5080:	89 f4       	brne	.+34     	; 0x50a4 <integer+0xb88>
			result = thouzands;
    5082:	8d 81       	ldd	r24, Y+5	; 0x05
    5084:	9e 81       	ldd	r25, Y+6	; 0x06
    5086:	aa 27       	eor	r26, r26
    5088:	97 fd       	sbrc	r25, 7
    508a:	a0 95       	com	r26
    508c:	ba 2f       	mov	r27, r26
    508e:	bc 01       	movw	r22, r24
    5090:	cd 01       	movw	r24, r26
    5092:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    5096:	dc 01       	movw	r26, r24
    5098:	cb 01       	movw	r24, r22
    509a:	89 83       	std	Y+1, r24	; 0x01
    509c:	9a 83       	std	Y+2, r25	; 0x02
    509e:	ab 83       	std	Y+3, r26	; 0x03
    50a0:	bc 83       	std	Y+4, r27	; 0x04
    50a2:	98 c0       	rjmp	.+304    	; 0x51d4 <integer+0xcb8>
		else if(ones == 111)
    50a4:	89 85       	ldd	r24, Y+9	; 0x09
    50a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    50a8:	8f 36       	cpi	r24, 0x6F	; 111
    50aa:	91 05       	cpc	r25, r1
    50ac:	f9 f4       	brne	.+62     	; 0x50ec <integer+0xbd0>
			result = donze*10 + thouzands;
    50ae:	8f 81       	ldd	r24, Y+7	; 0x07
    50b0:	98 85       	ldd	r25, Y+8	; 0x08
    50b2:	9c 01       	movw	r18, r24
    50b4:	22 0f       	add	r18, r18
    50b6:	33 1f       	adc	r19, r19
    50b8:	c9 01       	movw	r24, r18
    50ba:	88 0f       	add	r24, r24
    50bc:	99 1f       	adc	r25, r25
    50be:	88 0f       	add	r24, r24
    50c0:	99 1f       	adc	r25, r25
    50c2:	28 0f       	add	r18, r24
    50c4:	39 1f       	adc	r19, r25
    50c6:	8d 81       	ldd	r24, Y+5	; 0x05
    50c8:	9e 81       	ldd	r25, Y+6	; 0x06
    50ca:	82 0f       	add	r24, r18
    50cc:	93 1f       	adc	r25, r19
    50ce:	aa 27       	eor	r26, r26
    50d0:	97 fd       	sbrc	r25, 7
    50d2:	a0 95       	com	r26
    50d4:	ba 2f       	mov	r27, r26
    50d6:	bc 01       	movw	r22, r24
    50d8:	cd 01       	movw	r24, r26
    50da:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    50de:	dc 01       	movw	r26, r24
    50e0:	cb 01       	movw	r24, r22
    50e2:	89 83       	std	Y+1, r24	; 0x01
    50e4:	9a 83       	std	Y+2, r25	; 0x02
    50e6:	ab 83       	std	Y+3, r26	; 0x03
    50e8:	bc 83       	std	Y+4, r27	; 0x04
    50ea:	74 c0       	rjmp	.+232    	; 0x51d4 <integer+0xcb8>
		else if(donze == 111)
    50ec:	8f 81       	ldd	r24, Y+7	; 0x07
    50ee:	98 85       	ldd	r25, Y+8	; 0x08
    50f0:	8f 36       	cpi	r24, 0x6F	; 111
    50f2:	91 05       	cpc	r25, r1
    50f4:	f9 f4       	brne	.+62     	; 0x5134 <integer+0xc18>
			result = ones*10 + thouzands;
    50f6:	89 85       	ldd	r24, Y+9	; 0x09
    50f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    50fa:	9c 01       	movw	r18, r24
    50fc:	22 0f       	add	r18, r18
    50fe:	33 1f       	adc	r19, r19
    5100:	c9 01       	movw	r24, r18
    5102:	88 0f       	add	r24, r24
    5104:	99 1f       	adc	r25, r25
    5106:	88 0f       	add	r24, r24
    5108:	99 1f       	adc	r25, r25
    510a:	28 0f       	add	r18, r24
    510c:	39 1f       	adc	r19, r25
    510e:	8d 81       	ldd	r24, Y+5	; 0x05
    5110:	9e 81       	ldd	r25, Y+6	; 0x06
    5112:	82 0f       	add	r24, r18
    5114:	93 1f       	adc	r25, r19
    5116:	aa 27       	eor	r26, r26
    5118:	97 fd       	sbrc	r25, 7
    511a:	a0 95       	com	r26
    511c:	ba 2f       	mov	r27, r26
    511e:	bc 01       	movw	r22, r24
    5120:	cd 01       	movw	r24, r26
    5122:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    5126:	dc 01       	movw	r26, r24
    5128:	cb 01       	movw	r24, r22
    512a:	89 83       	std	Y+1, r24	; 0x01
    512c:	9a 83       	std	Y+2, r25	; 0x02
    512e:	ab 83       	std	Y+3, r26	; 0x03
    5130:	bc 83       	std	Y+4, r27	; 0x04
    5132:	50 c0       	rjmp	.+160    	; 0x51d4 <integer+0xcb8>
		else if (thouzands == 111)
    5134:	8d 81       	ldd	r24, Y+5	; 0x05
    5136:	9e 81       	ldd	r25, Y+6	; 0x06
    5138:	8f 36       	cpi	r24, 0x6F	; 111
    513a:	91 05       	cpc	r25, r1
    513c:	f9 f4       	brne	.+62     	; 0x517c <integer+0xc60>
			result = ones*10 + donze;
    513e:	89 85       	ldd	r24, Y+9	; 0x09
    5140:	9a 85       	ldd	r25, Y+10	; 0x0a
    5142:	9c 01       	movw	r18, r24
    5144:	22 0f       	add	r18, r18
    5146:	33 1f       	adc	r19, r19
    5148:	c9 01       	movw	r24, r18
    514a:	88 0f       	add	r24, r24
    514c:	99 1f       	adc	r25, r25
    514e:	88 0f       	add	r24, r24
    5150:	99 1f       	adc	r25, r25
    5152:	28 0f       	add	r18, r24
    5154:	39 1f       	adc	r19, r25
    5156:	8f 81       	ldd	r24, Y+7	; 0x07
    5158:	98 85       	ldd	r25, Y+8	; 0x08
    515a:	82 0f       	add	r24, r18
    515c:	93 1f       	adc	r25, r19
    515e:	aa 27       	eor	r26, r26
    5160:	97 fd       	sbrc	r25, 7
    5162:	a0 95       	com	r26
    5164:	ba 2f       	mov	r27, r26
    5166:	bc 01       	movw	r22, r24
    5168:	cd 01       	movw	r24, r26
    516a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    516e:	dc 01       	movw	r26, r24
    5170:	cb 01       	movw	r24, r22
    5172:	89 83       	std	Y+1, r24	; 0x01
    5174:	9a 83       	std	Y+2, r25	; 0x02
    5176:	ab 83       	std	Y+3, r26	; 0x03
    5178:	bc 83       	std	Y+4, r27	; 0x04
    517a:	2c c0       	rjmp	.+88     	; 0x51d4 <integer+0xcb8>
		else
			result = ones*100 + donze*10 + thouzands;// +((float)fraction/10);
    517c:	29 85       	ldd	r18, Y+9	; 0x09
    517e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5180:	84 e6       	ldi	r24, 0x64	; 100
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	28 9f       	mul	r18, r24
    5186:	a0 01       	movw	r20, r0
    5188:	29 9f       	mul	r18, r25
    518a:	50 0d       	add	r21, r0
    518c:	38 9f       	mul	r19, r24
    518e:	50 0d       	add	r21, r0
    5190:	11 24       	eor	r1, r1
    5192:	8f 81       	ldd	r24, Y+7	; 0x07
    5194:	98 85       	ldd	r25, Y+8	; 0x08
    5196:	9c 01       	movw	r18, r24
    5198:	22 0f       	add	r18, r18
    519a:	33 1f       	adc	r19, r19
    519c:	c9 01       	movw	r24, r18
    519e:	88 0f       	add	r24, r24
    51a0:	99 1f       	adc	r25, r25
    51a2:	88 0f       	add	r24, r24
    51a4:	99 1f       	adc	r25, r25
    51a6:	82 0f       	add	r24, r18
    51a8:	93 1f       	adc	r25, r19
    51aa:	9a 01       	movw	r18, r20
    51ac:	28 0f       	add	r18, r24
    51ae:	39 1f       	adc	r19, r25
    51b0:	8d 81       	ldd	r24, Y+5	; 0x05
    51b2:	9e 81       	ldd	r25, Y+6	; 0x06
    51b4:	82 0f       	add	r24, r18
    51b6:	93 1f       	adc	r25, r19
    51b8:	aa 27       	eor	r26, r26
    51ba:	97 fd       	sbrc	r25, 7
    51bc:	a0 95       	com	r26
    51be:	ba 2f       	mov	r27, r26
    51c0:	bc 01       	movw	r22, r24
    51c2:	cd 01       	movw	r24, r26
    51c4:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    51c8:	dc 01       	movw	r26, r24
    51ca:	cb 01       	movw	r24, r22
    51cc:	89 83       	std	Y+1, r24	; 0x01
    51ce:	9a 83       	std	Y+2, r25	; 0x02
    51d0:	ab 83       	std	Y+3, r26	; 0x03
    51d2:	bc 83       	std	Y+4, r27	; 0x04
		return result;
    51d4:	69 81       	ldd	r22, Y+1	; 0x01
    51d6:	7a 81       	ldd	r23, Y+2	; 0x02
    51d8:	8b 81       	ldd	r24, Y+3	; 0x03
    51da:	9c 81       	ldd	r25, Y+4	; 0x04
    51dc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    51e0:	dc 01       	movw	r26, r24
    51e2:	cb 01       	movw	r24, r22
    51e4:	9c 8b       	std	Y+20, r25	; 0x14
    51e6:	8b 8b       	std	Y+19, r24	; 0x13
    51e8:	8b 89       	ldd	r24, Y+19	; 0x13
    51ea:	9c 89       	ldd	r25, Y+20	; 0x14
	}
}
    51ec:	6a 96       	adiw	r28, 0x1a	; 26
    51ee:	0f b6       	in	r0, 0x3f	; 63
    51f0:	f8 94       	cli
    51f2:	de bf       	out	0x3e, r29	; 62
    51f4:	0f be       	out	0x3f, r0	; 63
    51f6:	cd bf       	out	0x3d, r28	; 61
    51f8:	cf 91       	pop	r28
    51fa:	df 91       	pop	r29
    51fc:	08 95       	ret

000051fe <__divmodsi4>:
    51fe:	97 fb       	bst	r25, 7
    5200:	09 2e       	mov	r0, r25
    5202:	05 26       	eor	r0, r21
    5204:	0e d0       	rcall	.+28     	; 0x5222 <__divmodsi4_neg1>
    5206:	57 fd       	sbrc	r21, 7
    5208:	04 d0       	rcall	.+8      	; 0x5212 <__divmodsi4_neg2>
    520a:	14 d0       	rcall	.+40     	; 0x5234 <__udivmodsi4>
    520c:	0a d0       	rcall	.+20     	; 0x5222 <__divmodsi4_neg1>
    520e:	00 1c       	adc	r0, r0
    5210:	38 f4       	brcc	.+14     	; 0x5220 <__divmodsi4_exit>

00005212 <__divmodsi4_neg2>:
    5212:	50 95       	com	r21
    5214:	40 95       	com	r20
    5216:	30 95       	com	r19
    5218:	21 95       	neg	r18
    521a:	3f 4f       	sbci	r19, 0xFF	; 255
    521c:	4f 4f       	sbci	r20, 0xFF	; 255
    521e:	5f 4f       	sbci	r21, 0xFF	; 255

00005220 <__divmodsi4_exit>:
    5220:	08 95       	ret

00005222 <__divmodsi4_neg1>:
    5222:	f6 f7       	brtc	.-4      	; 0x5220 <__divmodsi4_exit>
    5224:	90 95       	com	r25
    5226:	80 95       	com	r24
    5228:	70 95       	com	r23
    522a:	61 95       	neg	r22
    522c:	7f 4f       	sbci	r23, 0xFF	; 255
    522e:	8f 4f       	sbci	r24, 0xFF	; 255
    5230:	9f 4f       	sbci	r25, 0xFF	; 255
    5232:	08 95       	ret

00005234 <__udivmodsi4>:
    5234:	a1 e2       	ldi	r26, 0x21	; 33
    5236:	1a 2e       	mov	r1, r26
    5238:	aa 1b       	sub	r26, r26
    523a:	bb 1b       	sub	r27, r27
    523c:	fd 01       	movw	r30, r26
    523e:	0d c0       	rjmp	.+26     	; 0x525a <__udivmodsi4_ep>

00005240 <__udivmodsi4_loop>:
    5240:	aa 1f       	adc	r26, r26
    5242:	bb 1f       	adc	r27, r27
    5244:	ee 1f       	adc	r30, r30
    5246:	ff 1f       	adc	r31, r31
    5248:	a2 17       	cp	r26, r18
    524a:	b3 07       	cpc	r27, r19
    524c:	e4 07       	cpc	r30, r20
    524e:	f5 07       	cpc	r31, r21
    5250:	20 f0       	brcs	.+8      	; 0x525a <__udivmodsi4_ep>
    5252:	a2 1b       	sub	r26, r18
    5254:	b3 0b       	sbc	r27, r19
    5256:	e4 0b       	sbc	r30, r20
    5258:	f5 0b       	sbc	r31, r21

0000525a <__udivmodsi4_ep>:
    525a:	66 1f       	adc	r22, r22
    525c:	77 1f       	adc	r23, r23
    525e:	88 1f       	adc	r24, r24
    5260:	99 1f       	adc	r25, r25
    5262:	1a 94       	dec	r1
    5264:	69 f7       	brne	.-38     	; 0x5240 <__udivmodsi4_loop>
    5266:	60 95       	com	r22
    5268:	70 95       	com	r23
    526a:	80 95       	com	r24
    526c:	90 95       	com	r25
    526e:	9b 01       	movw	r18, r22
    5270:	ac 01       	movw	r20, r24
    5272:	bd 01       	movw	r22, r26
    5274:	cf 01       	movw	r24, r30
    5276:	08 95       	ret

00005278 <__prologue_saves__>:
    5278:	2f 92       	push	r2
    527a:	3f 92       	push	r3
    527c:	4f 92       	push	r4
    527e:	5f 92       	push	r5
    5280:	6f 92       	push	r6
    5282:	7f 92       	push	r7
    5284:	8f 92       	push	r8
    5286:	9f 92       	push	r9
    5288:	af 92       	push	r10
    528a:	bf 92       	push	r11
    528c:	cf 92       	push	r12
    528e:	df 92       	push	r13
    5290:	ef 92       	push	r14
    5292:	ff 92       	push	r15
    5294:	0f 93       	push	r16
    5296:	1f 93       	push	r17
    5298:	cf 93       	push	r28
    529a:	df 93       	push	r29
    529c:	cd b7       	in	r28, 0x3d	; 61
    529e:	de b7       	in	r29, 0x3e	; 62
    52a0:	ca 1b       	sub	r28, r26
    52a2:	db 0b       	sbc	r29, r27
    52a4:	0f b6       	in	r0, 0x3f	; 63
    52a6:	f8 94       	cli
    52a8:	de bf       	out	0x3e, r29	; 62
    52aa:	0f be       	out	0x3f, r0	; 63
    52ac:	cd bf       	out	0x3d, r28	; 61
    52ae:	09 94       	ijmp

000052b0 <__epilogue_restores__>:
    52b0:	2a 88       	ldd	r2, Y+18	; 0x12
    52b2:	39 88       	ldd	r3, Y+17	; 0x11
    52b4:	48 88       	ldd	r4, Y+16	; 0x10
    52b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    52b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    52ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    52bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    52be:	9b 84       	ldd	r9, Y+11	; 0x0b
    52c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    52c2:	b9 84       	ldd	r11, Y+9	; 0x09
    52c4:	c8 84       	ldd	r12, Y+8	; 0x08
    52c6:	df 80       	ldd	r13, Y+7	; 0x07
    52c8:	ee 80       	ldd	r14, Y+6	; 0x06
    52ca:	fd 80       	ldd	r15, Y+5	; 0x05
    52cc:	0c 81       	ldd	r16, Y+4	; 0x04
    52ce:	1b 81       	ldd	r17, Y+3	; 0x03
    52d0:	aa 81       	ldd	r26, Y+2	; 0x02
    52d2:	b9 81       	ldd	r27, Y+1	; 0x01
    52d4:	ce 0f       	add	r28, r30
    52d6:	d1 1d       	adc	r29, r1
    52d8:	0f b6       	in	r0, 0x3f	; 63
    52da:	f8 94       	cli
    52dc:	de bf       	out	0x3e, r29	; 62
    52de:	0f be       	out	0x3f, r0	; 63
    52e0:	cd bf       	out	0x3d, r28	; 61
    52e2:	ed 01       	movw	r28, r26
    52e4:	08 95       	ret

000052e6 <_exit>:
    52e6:	f8 94       	cli

000052e8 <__stop_program>:
    52e8:	ff cf       	rjmp	.-2      	; 0x52e8 <__stop_program>
