
LEDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002d28  00002d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ef0  00000000  00000000  00002da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000094a  00000000  00000000  00004c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000055de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000571e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000588e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000074d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000083c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000092d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000955d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009d2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 20 11 	call	0x2240	; 0x2240 <main>
      7a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <SetPinValue>:
#include"LIB/set_math.h"
#include"DIO.h"
#include"DIO_Registers.h"

void SetPinValue(u8 PinId,u8 PortId,u8 PinValue)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	if(PinId <= PIN7 && PortId <= PORTD)
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	88 30       	cpi	r24, 0x08	; 8
     b54:	08 f0       	brcs	.+2      	; 0xb58 <SetPinValue+0x22>
     b56:	ee c0       	rjmp	.+476    	; 0xd34 <SetPinValue+0x1fe>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	84 30       	cpi	r24, 0x04	; 4
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <SetPinValue+0x2a>
     b5e:	ea c0       	rjmp	.+468    	; 0xd34 <SetPinValue+0x1fe>
	{
		if(PinValue == HIGH)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <SetPinValue+0x32>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <SetPinValue+0x110>
		{
			switch(PortId)
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <SetPinValue+0x98>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <SetPinValue+0x5a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <SetPinValue+0x70>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <SetPinValue+0x1fe>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <SetPinValue+0xc0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <SetPinValue+0xe8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <SetPinValue+0x1fe>
			{
			case PORTA:	SET_BIT(PORTA_REG,PinId);break;
     ba6:	ab e3       	ldi	r26, 0x3B	; 59
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	eb e3       	ldi	r30, 0x3B	; 59
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <SetPinValue+0x8e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <SetPinValue+0x8a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <SetPinValue+0x1fe>
			case PORTB:	SET_BIT(PORTB_REG,PinId);break;
     bce:	a8 e3       	ldi	r26, 0x38	; 56
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e8 e3       	ldi	r30, 0x38	; 56
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <SetPinValue+0xb6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <SetPinValue+0xb2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <SetPinValue+0x1fe>
			case PORTC:	SET_BIT(PORTC_REG,PinId);break;
     bf6:	a5 e3       	ldi	r26, 0x35	; 53
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e3       	ldi	r30, 0x35	; 53
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <SetPinValue+0xde>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <SetPinValue+0xda>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <SetPinValue+0x1fe>
			case PORTD:	SET_BIT(PORTD_REG,PinId);break;
     c1e:	a2 e3       	ldi	r26, 0x32	; 50
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e2 e3       	ldi	r30, 0x32	; 50
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <SetPinValue+0x106>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <SetPinValue+0x102>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <SetPinValue+0x1fe>
			}
		}
		else if(PinValue == LOW)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <SetPinValue+0x118>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <SetPinValue+0x1fe>
		{
			switch(PortId)
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <SetPinValue+0x182>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <SetPinValue+0x140>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <SetPinValue+0x158>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <SetPinValue+0x1fe>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <SetPinValue+0x1ac>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <SetPinValue+0x156>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <SetPinValue+0x1d6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <SetPinValue+0x1fe>
			{
			case PORTA:	CLR_BIT(PORTA_REG,PinId);break;
     c8e:	ab e3       	ldi	r26, 0x3B	; 59
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	eb e3       	ldi	r30, 0x3B	; 59
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <SetPinValue+0x176>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <SetPinValue+0x172>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <SetPinValue+0x1fe>
			case PORTB:	CLR_BIT(PORTB_REG,PinId);break;
     cb8:	a8 e3       	ldi	r26, 0x38	; 56
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <SetPinValue+0x1a0>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <SetPinValue+0x19c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <SetPinValue+0x1fe>
			case PORTC:	CLR_BIT(PORTC_REG,PinId);break;
     ce2:	a5 e3       	ldi	r26, 0x35	; 53
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e3       	ldi	r30, 0x35	; 53
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <SetPinValue+0x1ca>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <SetPinValue+0x1c6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <SetPinValue+0x1fe>
			case PORTD:	CLR_BIT(PORTD_REG,PinId);break;
     d0c:	a2 e3       	ldi	r26, 0x32	; 50
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e2 e3       	ldi	r30, 0x32	; 50
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <SetPinValue+0x1f4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <SetPinValue+0x1f0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24

	else
	{
		//report error massage
	}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <SetPinMode>:

void SetPinMode(u8 PinId,u8 PortId,u8 PinMode)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if(PinId <= PIN7 && PortId <= PORTD)
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	88 30       	cpi	r24, 0x08	; 8
     d64:	08 f0       	brcs	.+2      	; 0xd68 <SetPinMode+0x22>
     d66:	ee c0       	rjmp	.+476    	; 0xf44 <SetPinMode+0x1fe>
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	84 30       	cpi	r24, 0x04	; 4
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <SetPinMode+0x2a>
     d6e:	ea c0       	rjmp	.+468    	; 0xf44 <SetPinMode+0x1fe>
	{
		if(PinMode == OUTPUT)
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	09 f0       	breq	.+2      	; 0xd78 <SetPinMode+0x32>
     d76:	6f c0       	rjmp	.+222    	; 0xe56 <SetPinMode+0x110>
		{
			switch(PortId)
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	3f 83       	std	Y+7, r19	; 0x07
     d80:	2e 83       	std	Y+6, r18	; 0x06
     d82:	8e 81       	ldd	r24, Y+6	; 0x06
     d84:	9f 81       	ldd	r25, Y+7	; 0x07
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	91 05       	cpc	r25, r1
     d8a:	49 f1       	breq	.+82     	; 0xdde <SetPinMode+0x98>
     d8c:	2e 81       	ldd	r18, Y+6	; 0x06
     d8e:	3f 81       	ldd	r19, Y+7	; 0x07
     d90:	22 30       	cpi	r18, 0x02	; 2
     d92:	31 05       	cpc	r19, r1
     d94:	2c f4       	brge	.+10     	; 0xda0 <SetPinMode+0x5a>
     d96:	8e 81       	ldd	r24, Y+6	; 0x06
     d98:	9f 81       	ldd	r25, Y+7	; 0x07
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	61 f0       	breq	.+24     	; 0xdb6 <SetPinMode+0x70>
     d9e:	d2 c0       	rjmp	.+420    	; 0xf44 <SetPinMode+0x1fe>
     da0:	2e 81       	ldd	r18, Y+6	; 0x06
     da2:	3f 81       	ldd	r19, Y+7	; 0x07
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	71 f1       	breq	.+92     	; 0xe06 <SetPinMode+0xc0>
     daa:	8e 81       	ldd	r24, Y+6	; 0x06
     dac:	9f 81       	ldd	r25, Y+7	; 0x07
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	91 05       	cpc	r25, r1
     db2:	e9 f1       	breq	.+122    	; 0xe2e <SetPinMode+0xe8>
     db4:	c7 c0       	rjmp	.+398    	; 0xf44 <SetPinMode+0x1fe>
			{
			case PORTA:	SET_BIT(DDRA_REG,PinId);break;
     db6:	aa e3       	ldi	r26, 0x3A	; 58
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ea e3       	ldi	r30, 0x3A	; 58
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 2e       	mov	r0, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <SetPinMode+0x8e>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	0a 94       	dec	r0
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <SetPinMode+0x8a>
     dd8:	84 2b       	or	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	b3 c0       	rjmp	.+358    	; 0xf44 <SetPinMode+0x1fe>
			case PORTB:	SET_BIT(DDRB_REG,PinId);break;
     dde:	a7 e3       	ldi	r26, 0x37	; 55
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e7 e3       	ldi	r30, 0x37	; 55
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <SetPinMode+0xb6>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <SetPinMode+0xb2>
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	9f c0       	rjmp	.+318    	; 0xf44 <SetPinMode+0x1fe>
			case PORTC:	SET_BIT(DDRC_REG,PinId);break;
     e06:	a4 e3       	ldi	r26, 0x34	; 52
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e4 e3       	ldi	r30, 0x34	; 52
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <SetPinMode+0xde>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <SetPinMode+0xda>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	8b c0       	rjmp	.+278    	; 0xf44 <SetPinMode+0x1fe>
			case PORTD:	SET_BIT(DDRD_REG,PinId);break;
     e2e:	a1 e3       	ldi	r26, 0x31	; 49
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e1 e3       	ldi	r30, 0x31	; 49
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <SetPinMode+0x106>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <SetPinMode+0x102>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	77 c0       	rjmp	.+238    	; 0xf44 <SetPinMode+0x1fe>
			}
		}
		else if(PinMode == INPUT)
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	88 23       	and	r24, r24
     e5a:	09 f0       	breq	.+2      	; 0xe5e <SetPinMode+0x118>
     e5c:	73 c0       	rjmp	.+230    	; 0xf44 <SetPinMode+0x1fe>
		{
			switch(PortId)
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3d 83       	std	Y+5, r19	; 0x05
     e66:	2c 83       	std	Y+4, r18	; 0x04
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	91 05       	cpc	r25, r1
     e70:	59 f1       	breq	.+86     	; 0xec8 <SetPinMode+0x182>
     e72:	2c 81       	ldd	r18, Y+4	; 0x04
     e74:	3d 81       	ldd	r19, Y+5	; 0x05
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	2c f4       	brge	.+10     	; 0xe86 <SetPinMode+0x140>
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	9d 81       	ldd	r25, Y+5	; 0x05
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	69 f0       	breq	.+26     	; 0xe9e <SetPinMode+0x158>
     e84:	5f c0       	rjmp	.+190    	; 0xf44 <SetPinMode+0x1fe>
     e86:	2c 81       	ldd	r18, Y+4	; 0x04
     e88:	3d 81       	ldd	r19, Y+5	; 0x05
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	31 05       	cpc	r19, r1
     e8e:	89 f1       	breq	.+98     	; 0xef2 <SetPinMode+0x1ac>
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	9d 81       	ldd	r25, Y+5	; 0x05
     e94:	83 30       	cpi	r24, 0x03	; 3
     e96:	91 05       	cpc	r25, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <SetPinMode+0x156>
     e9a:	40 c0       	rjmp	.+128    	; 0xf1c <SetPinMode+0x1d6>
     e9c:	53 c0       	rjmp	.+166    	; 0xf44 <SetPinMode+0x1fe>
			{
			case PORTA:	CLR_BIT(DDRA_REG,PinId);break;
     e9e:	aa e3       	ldi	r26, 0x3A	; 58
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ea e3       	ldi	r30, 0x3A	; 58
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <SetPinMode+0x176>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <SetPinMode+0x172>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	3e c0       	rjmp	.+124    	; 0xf44 <SetPinMode+0x1fe>
			case PORTB:	CLR_BIT(DDRB_REG,PinId);break;
     ec8:	a7 e3       	ldi	r26, 0x37	; 55
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e7 e3       	ldi	r30, 0x37	; 55
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <SetPinMode+0x1a0>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <SetPinMode+0x19c>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	29 c0       	rjmp	.+82     	; 0xf44 <SetPinMode+0x1fe>
			case PORTC:	CLR_BIT(DDRC_REG,PinId);break;
     ef2:	a4 e3       	ldi	r26, 0x34	; 52
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e4 e3       	ldi	r30, 0x34	; 52
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <SetPinMode+0x1ca>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <SetPinMode+0x1c6>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <SetPinMode+0x1fe>
			case PORTD:	CLR_BIT(DDRD_REG,PinId);break;
     f1c:	a1 e3       	ldi	r26, 0x31	; 49
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e1 e3       	ldi	r30, 0x31	; 49
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <SetPinMode+0x1f4>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <SetPinMode+0x1f0>
     f3e:	80 95       	com	r24
     f40:	84 23       	and	r24, r20
     f42:	8c 93       	st	X, r24
	}
		else
		{
			//report error massage
		}
}
     f44:	27 96       	adiw	r28, 0x07	; 7
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <SetPortValue>:


void SetPortValue(u8 PortId,u8 PortValue)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <SetPortValue+0x6>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <SetPortValue+0x8>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <SetPortValue+0xa>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId <= PORTD)
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	84 30       	cpi	r24, 0x04	; 4
     f6c:	08 f0       	brcs	.+2      	; 0xf70 <SetPortValue+0x1a>
     f6e:	67 c0       	rjmp	.+206    	; 0x103e <SetPortValue+0xe8>
	{
		if(PortValue == HIGH)
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	99 f5       	brne	.+102    	; 0xfdc <SetPortValue+0x86>
		{
			switch(PortId)
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	3e 83       	std	Y+6, r19	; 0x06
     f7e:	2d 83       	std	Y+5, r18	; 0x05
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	91 05       	cpc	r25, r1
     f88:	d1 f0       	breq	.+52     	; 0xfbe <SetPortValue+0x68>
     f8a:	2d 81       	ldd	r18, Y+5	; 0x05
     f8c:	3e 81       	ldd	r19, Y+6	; 0x06
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	2c f4       	brge	.+10     	; 0xf9e <SetPortValue+0x48>
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <SetPortValue+0x5e>
     f9c:	50 c0       	rjmp	.+160    	; 0x103e <SetPortValue+0xe8>
     f9e:	2d 81       	ldd	r18, Y+5	; 0x05
     fa0:	3e 81       	ldd	r19, Y+6	; 0x06
     fa2:	22 30       	cpi	r18, 0x02	; 2
     fa4:	31 05       	cpc	r19, r1
     fa6:	81 f0       	breq	.+32     	; 0xfc8 <SetPortValue+0x72>
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	83 30       	cpi	r24, 0x03	; 3
     fae:	91 05       	cpc	r25, r1
     fb0:	81 f0       	breq	.+32     	; 0xfd2 <SetPortValue+0x7c>
     fb2:	45 c0       	rjmp	.+138    	; 0x103e <SetPortValue+0xe8>
			{
			case PORTA:	SET_REG(PORTA_REG);break;
     fb4:	eb e3       	ldi	r30, 0x3B	; 59
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	80 83       	st	Z, r24
     fbc:	40 c0       	rjmp	.+128    	; 0x103e <SetPortValue+0xe8>
			case PORTB:	SET_REG(PORTB_REG);break;
     fbe:	e8 e3       	ldi	r30, 0x38	; 56
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	80 83       	st	Z, r24
     fc6:	3b c0       	rjmp	.+118    	; 0x103e <SetPortValue+0xe8>
			case PORTC:	SET_REG(PORTC_REG);break;
     fc8:	e5 e3       	ldi	r30, 0x35	; 53
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	8f ef       	ldi	r24, 0xFF	; 255
     fce:	80 83       	st	Z, r24
     fd0:	36 c0       	rjmp	.+108    	; 0x103e <SetPortValue+0xe8>
			case PORTD: SET_REG(PORTD_REG);break;
     fd2:	e2 e3       	ldi	r30, 0x32	; 50
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	8f ef       	ldi	r24, 0xFF	; 255
     fd8:	80 83       	st	Z, r24
     fda:	31 c0       	rjmp	.+98     	; 0x103e <SetPortValue+0xe8>
			}
		}
		else if(PortValue == LOW)
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	88 23       	and	r24, r24
     fe0:	71 f5       	brne	.+92     	; 0x103e <SetPortValue+0xe8>
		{
			switch(PortId)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	3c 83       	std	Y+4, r19	; 0x04
     fea:	2b 83       	std	Y+3, r18	; 0x03
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	c9 f0       	breq	.+50     	; 0x1028 <SetPortValue+0xd2>
     ff6:	2b 81       	ldd	r18, Y+3	; 0x03
     ff8:	3c 81       	ldd	r19, Y+4	; 0x04
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	2c f4       	brge	.+10     	; 0x100a <SetPortValue+0xb4>
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	61 f0       	breq	.+24     	; 0x1020 <SetPortValue+0xca>
    1008:	1a c0       	rjmp	.+52     	; 0x103e <SetPortValue+0xe8>
    100a:	2b 81       	ldd	r18, Y+3	; 0x03
    100c:	3c 81       	ldd	r19, Y+4	; 0x04
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	71 f0       	breq	.+28     	; 0x1030 <SetPortValue+0xda>
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	91 05       	cpc	r25, r1
    101c:	69 f0       	breq	.+26     	; 0x1038 <SetPortValue+0xe2>
    101e:	0f c0       	rjmp	.+30     	; 0x103e <SetPortValue+0xe8>
			{
			case PORTA:	CLR_REG(PORTA_REG);break;
    1020:	eb e3       	ldi	r30, 0x3B	; 59
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	10 82       	st	Z, r1
    1026:	0b c0       	rjmp	.+22     	; 0x103e <SetPortValue+0xe8>
			case PORTB:	CLR_REG(PORTB_REG);break;
    1028:	e8 e3       	ldi	r30, 0x38	; 56
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	10 82       	st	Z, r1
    102e:	07 c0       	rjmp	.+14     	; 0x103e <SetPortValue+0xe8>
			case PORTC:	CLR_REG(PORTC_REG);break;
    1030:	e5 e3       	ldi	r30, 0x35	; 53
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	10 82       	st	Z, r1
    1036:	03 c0       	rjmp	.+6      	; 0x103e <SetPortValue+0xe8>
			case PORTD: CLR_REG(PORTD_REG);break;
    1038:	e2 e3       	ldi	r30, 0x32	; 50
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	10 82       	st	Z, r1
	}
	else
	{
		//report error massage
	}
}
    103e:	26 96       	adiw	r28, 0x06	; 6
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <SetPortMode>:

void SetPortMode(u8 PortId,u8 PortMode)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <SetPortMode+0x6>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <SetPortMode+0x8>
    1058:	00 d0       	rcall	.+0      	; 0x105a <SetPortMode+0xa>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId <= PORTD)
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	84 30       	cpi	r24, 0x04	; 4
    1066:	08 f0       	brcs	.+2      	; 0x106a <SetPortMode+0x1a>
    1068:	67 c0       	rjmp	.+206    	; 0x1138 <SetPortMode+0xe8>
	{
		if(PortMode == OUTPUT)
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	99 f5       	brne	.+102    	; 0x10d6 <SetPortMode+0x86>
		{
			switch(PortId)
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	3e 83       	std	Y+6, r19	; 0x06
    1078:	2d 83       	std	Y+5, r18	; 0x05
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	d1 f0       	breq	.+52     	; 0x10b8 <SetPortMode+0x68>
    1084:	2d 81       	ldd	r18, Y+5	; 0x05
    1086:	3e 81       	ldd	r19, Y+6	; 0x06
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	2c f4       	brge	.+10     	; 0x1098 <SetPortMode+0x48>
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	61 f0       	breq	.+24     	; 0x10ae <SetPortMode+0x5e>
    1096:	50 c0       	rjmp	.+160    	; 0x1138 <SetPortMode+0xe8>
    1098:	2d 81       	ldd	r18, Y+5	; 0x05
    109a:	3e 81       	ldd	r19, Y+6	; 0x06
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	81 f0       	breq	.+32     	; 0x10c2 <SetPortMode+0x72>
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	81 f0       	breq	.+32     	; 0x10cc <SetPortMode+0x7c>
    10ac:	45 c0       	rjmp	.+138    	; 0x1138 <SetPortMode+0xe8>
			{
			case PORTA:	SET_REG(DDRA_REG);break;
    10ae:	ea e3       	ldi	r30, 0x3A	; 58
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	80 83       	st	Z, r24
    10b6:	40 c0       	rjmp	.+128    	; 0x1138 <SetPortMode+0xe8>
			case PORTB:	SET_REG(DDRB_REG);break;
    10b8:	e7 e3       	ldi	r30, 0x37	; 55
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	8f ef       	ldi	r24, 0xFF	; 255
    10be:	80 83       	st	Z, r24
    10c0:	3b c0       	rjmp	.+118    	; 0x1138 <SetPortMode+0xe8>
			case PORTC:	SET_REG(DDRC_REG);break;
    10c2:	e4 e3       	ldi	r30, 0x34	; 52
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	8f ef       	ldi	r24, 0xFF	; 255
    10c8:	80 83       	st	Z, r24
    10ca:	36 c0       	rjmp	.+108    	; 0x1138 <SetPortMode+0xe8>
			case PORTD: SET_REG(DDRD_REG);break;
    10cc:	e1 e3       	ldi	r30, 0x31	; 49
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	80 83       	st	Z, r24
    10d4:	31 c0       	rjmp	.+98     	; 0x1138 <SetPortMode+0xe8>
			}
		}
		else if(PortMode == INPUT)
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	88 23       	and	r24, r24
    10da:	71 f5       	brne	.+92     	; 0x1138 <SetPortMode+0xe8>
		{
			switch(PortId)
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3c 83       	std	Y+4, r19	; 0x04
    10e4:	2b 83       	std	Y+3, r18	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 05       	cpc	r25, r1
    10ee:	c9 f0       	breq	.+50     	; 0x1122 <SetPortMode+0xd2>
    10f0:	2b 81       	ldd	r18, Y+3	; 0x03
    10f2:	3c 81       	ldd	r19, Y+4	; 0x04
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	2c f4       	brge	.+10     	; 0x1104 <SetPortMode+0xb4>
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	61 f0       	breq	.+24     	; 0x111a <SetPortMode+0xca>
    1102:	1a c0       	rjmp	.+52     	; 0x1138 <SetPortMode+0xe8>
    1104:	2b 81       	ldd	r18, Y+3	; 0x03
    1106:	3c 81       	ldd	r19, Y+4	; 0x04
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	71 f0       	breq	.+28     	; 0x112a <SetPortMode+0xda>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	91 05       	cpc	r25, r1
    1116:	69 f0       	breq	.+26     	; 0x1132 <SetPortMode+0xe2>
    1118:	0f c0       	rjmp	.+30     	; 0x1138 <SetPortMode+0xe8>
			{
			case PORTA:	CLR_REG(DDRA_REG);break;
    111a:	ea e3       	ldi	r30, 0x3A	; 58
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	10 82       	st	Z, r1
    1120:	0b c0       	rjmp	.+22     	; 0x1138 <SetPortMode+0xe8>
			case PORTB:	CLR_REG(DDRB_REG);break;
    1122:	e7 e3       	ldi	r30, 0x37	; 55
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	10 82       	st	Z, r1
    1128:	07 c0       	rjmp	.+14     	; 0x1138 <SetPortMode+0xe8>
			case PORTC:	CLR_REG(DDRC_REG);break;
    112a:	e4 e3       	ldi	r30, 0x34	; 52
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	10 82       	st	Z, r1
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <SetPortMode+0xe8>
			case PORTD: CLR_REG(DDRD_REG);break;
    1132:	e1 e3       	ldi	r30, 0x31	; 49
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	10 82       	st	Z, r1
	}
	else
	{
		//report error massage
	}
}
    1138:	26 96       	adiw	r28, 0x06	; 6
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <GetPinValue>:

u8 GetPinValue(u8 PinId,u8 PortId)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	00 d0       	rcall	.+0      	; 0x1150 <GetPinValue+0x6>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <GetPinValue+0x8>
    1152:	0f 92       	push	r0
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	8a 83       	std	Y+2, r24	; 0x02
    115a:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	if(PinId <= PIN7 && PortId <= PORTD)
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	88 30       	cpi	r24, 0x08	; 8
    1160:	08 f0       	brcs	.+2      	; 0x1164 <GetPinValue+0x1a>
    1162:	6b c0       	rjmp	.+214    	; 0x123a <GetPinValue+0xf0>
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	84 30       	cpi	r24, 0x04	; 4
    1168:	08 f0       	brcs	.+2      	; 0x116c <GetPinValue+0x22>
    116a:	67 c0       	rjmp	.+206    	; 0x123a <GetPinValue+0xf0>
	{
		switch(PortId)
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3d 83       	std	Y+5, r19	; 0x05
    1174:	2c 83       	std	Y+4, r18	; 0x04
    1176:	4c 81       	ldd	r20, Y+4	; 0x04
    1178:	5d 81       	ldd	r21, Y+5	; 0x05
    117a:	41 30       	cpi	r20, 0x01	; 1
    117c:	51 05       	cpc	r21, r1
    117e:	41 f1       	breq	.+80     	; 0x11d0 <GetPinValue+0x86>
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	91 05       	cpc	r25, r1
    1188:	34 f4       	brge	.+12     	; 0x1196 <GetPinValue+0x4c>
    118a:	2c 81       	ldd	r18, Y+4	; 0x04
    118c:	3d 81       	ldd	r19, Y+5	; 0x05
    118e:	21 15       	cp	r18, r1
    1190:	31 05       	cpc	r19, r1
    1192:	61 f0       	breq	.+24     	; 0x11ac <GetPinValue+0x62>
    1194:	52 c0       	rjmp	.+164    	; 0x123a <GetPinValue+0xf0>
    1196:	4c 81       	ldd	r20, Y+4	; 0x04
    1198:	5d 81       	ldd	r21, Y+5	; 0x05
    119a:	42 30       	cpi	r20, 0x02	; 2
    119c:	51 05       	cpc	r21, r1
    119e:	51 f1       	breq	.+84     	; 0x11f4 <GetPinValue+0xaa>
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	9d 81       	ldd	r25, Y+5	; 0x05
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	91 05       	cpc	r25, r1
    11a8:	b9 f1       	breq	.+110    	; 0x1218 <GetPinValue+0xce>
    11aa:	47 c0       	rjmp	.+142    	; 0x123a <GetPinValue+0xf0>
		{
		case PORTA:	value = GET_BIT(PINA_REG,PinId);break;
    11ac:	e9 e3       	ldi	r30, 0x39	; 57
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <GetPinValue+0x7a>
    11c0:	55 95       	asr	r21
    11c2:	47 95       	ror	r20
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <GetPinValue+0x76>
    11c8:	ca 01       	movw	r24, r20
    11ca:	81 70       	andi	r24, 0x01	; 1
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	35 c0       	rjmp	.+106    	; 0x123a <GetPinValue+0xf0>
		case PORTB:	value = GET_BIT(PINB_REG,PinId);break;
    11d0:	e6 e3       	ldi	r30, 0x36	; 54
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a9 01       	movw	r20, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <GetPinValue+0x9e>
    11e4:	55 95       	asr	r21
    11e6:	47 95       	ror	r20
    11e8:	8a 95       	dec	r24
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <GetPinValue+0x9a>
    11ec:	ca 01       	movw	r24, r20
    11ee:	81 70       	andi	r24, 0x01	; 1
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	23 c0       	rjmp	.+70     	; 0x123a <GetPinValue+0xf0>
		case PORTC: value = GET_BIT(PINC_REG,PinId);break;
    11f4:	e3 e3       	ldi	r30, 0x33	; 51
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a9 01       	movw	r20, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GetPinValue+0xc2>
    1208:	55 95       	asr	r21
    120a:	47 95       	ror	r20
    120c:	8a 95       	dec	r24
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GetPinValue+0xbe>
    1210:	ca 01       	movw	r24, r20
    1212:	81 70       	andi	r24, 0x01	; 1
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	11 c0       	rjmp	.+34     	; 0x123a <GetPinValue+0xf0>
		case PORTD: value = GET_BIT(PIND_REG,PinId);break;
    1218:	e0 e3       	ldi	r30, 0x30	; 48
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a9 01       	movw	r20, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <GetPinValue+0xe6>
    122c:	55 95       	asr	r21
    122e:	47 95       	ror	r20
    1230:	8a 95       	dec	r24
    1232:	e2 f7       	brpl	.-8      	; 0x122c <GetPinValue+0xe2>
    1234:	ca 01       	movw	r24, r20
    1236:	81 70       	andi	r24, 0x01	; 1
    1238:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//report error massage
	}
	return value;
    123a:	89 81       	ldd	r24, Y+1	; 0x01
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <LED_INIT>:
#include"Led.h"
#include"avr/delay.h"


void LED_INIT(void)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <LED_INIT+0x6>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(int i =0;i<LedsNumber;i++)
    1256:	1a 82       	std	Y+2, r1	; 0x02
    1258:	19 82       	std	Y+1, r1	; 0x01
    125a:	0a c0       	rjmp	.+20     	; 0x1270 <LED_INIT+0x24>
			SetPinMode(i,LedPort,OUTPUT);
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	41 e0       	ldi	r20, 0x01	; 1
    1262:	0e 94 a3 06 	call	0xd46	; 0xd46 <SetPinMode>

void LED_INIT(void)
{
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(int i =0;i<LedsNumber;i++)
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	88 30       	cpi	r24, 0x08	; 8
    1276:	91 05       	cpc	r25, r1
    1278:	8c f3       	brlt	.-30     	; 0x125c <LED_INIT+0x10>
	else
	{
		//report error
	}

}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <LED_ON>:

void LED_ON(void)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <LED_ON+0x6>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(int i =0;i<LedsNumber;i++)
    128e:	1a 82       	std	Y+2, r1	; 0x02
    1290:	19 82       	std	Y+1, r1	; 0x01
    1292:	0a c0       	rjmp	.+20     	; 0x12a8 <LED_ON+0x24>
			SetPinValue(i,LedPort,HIGH);
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	41 e0       	ldi	r20, 0x01	; 1
    129a:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>

void LED_ON(void)
{
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(int i =0;i<LedsNumber;i++)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	9a 81       	ldd	r25, Y+2	; 0x02
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	9a 83       	std	Y+2, r25	; 0x02
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	88 30       	cpi	r24, 0x08	; 8
    12ae:	91 05       	cpc	r25, r1
    12b0:	8c f3       	brlt	.-30     	; 0x1294 <LED_ON+0x10>
	else
	{
		//report error
	}

}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <LED_OFF>:

void LED_OFF(void)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <LED_OFF+0x6>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(int i =0;i<LedsNumber;i++)
    12c6:	1a 82       	std	Y+2, r1	; 0x02
    12c8:	19 82       	std	Y+1, r1	; 0x01
    12ca:	0a c0       	rjmp	.+20     	; 0x12e0 <LED_OFF+0x24>
			SetPinValue(i,LedPort,LOW);
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>

void LED_OFF(void)
{
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(int i =0;i<LedsNumber;i++)
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	88 30       	cpi	r24, 0x08	; 8
    12e6:	91 05       	cpc	r25, r1
    12e8:	8c f3       	brlt	.-30     	; 0x12cc <LED_OFF+0x10>
	}
	else
	{
		//report error
	}
}
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <LED_ZigZag>:

void LED_ZigZag(void)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	a0 97       	sbiw	r28, 0x20	; 32
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(int i =0;i<LedsNumber;i++)
    1308:	18 a2       	std	Y+32, r1	; 0x20
    130a:	1f 8e       	std	Y+31, r1	; 0x1f
    130c:	7c c0       	rjmp	.+248    	; 0x1406 <LED_ZigZag+0x112>
		{
			SetPinValue(i,LedPort,HIGH);
    130e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	41 e0       	ldi	r20, 0x01	; 1
    1314:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a0 ef       	ldi	r26, 0xF0	; 240
    131e:	b1 e4       	ldi	r27, 0x41	; 65
    1320:	89 8f       	std	Y+25, r24	; 0x19
    1322:	9a 8f       	std	Y+26, r25	; 0x1a
    1324:	ab 8f       	std	Y+27, r26	; 0x1b
    1326:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1328:	69 8d       	ldd	r22, Y+25	; 0x19
    132a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    132c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    132e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	4a ef       	ldi	r20, 0xFA	; 250
    1336:	54 e4       	ldi	r21, 0x44	; 68
    1338:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	8d 8b       	std	Y+21, r24	; 0x15
    1342:	9e 8b       	std	Y+22, r25	; 0x16
    1344:	af 8b       	std	Y+23, r26	; 0x17
    1346:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1348:	6d 89       	ldd	r22, Y+21	; 0x15
    134a:	7e 89       	ldd	r23, Y+22	; 0x16
    134c:	8f 89       	ldd	r24, Y+23	; 0x17
    134e:	98 8d       	ldd	r25, Y+24	; 0x18
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e8       	ldi	r20, 0x80	; 128
    1356:	5f e3       	ldi	r21, 0x3F	; 63
    1358:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    135c:	88 23       	and	r24, r24
    135e:	2c f4       	brge	.+10     	; 0x136a <LED_ZigZag+0x76>
		__ticks = 1;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9c 8b       	std	Y+20, r25	; 0x14
    1366:	8b 8b       	std	Y+19, r24	; 0x13
    1368:	3f c0       	rjmp	.+126    	; 0x13e8 <LED_ZigZag+0xf4>
	else if (__tmp > 65535)
    136a:	6d 89       	ldd	r22, Y+21	; 0x15
    136c:	7e 89       	ldd	r23, Y+22	; 0x16
    136e:	8f 89       	ldd	r24, Y+23	; 0x17
    1370:	98 8d       	ldd	r25, Y+24	; 0x18
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	3f ef       	ldi	r19, 0xFF	; 255
    1376:	4f e7       	ldi	r20, 0x7F	; 127
    1378:	57 e4       	ldi	r21, 0x47	; 71
    137a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    137e:	18 16       	cp	r1, r24
    1380:	4c f5       	brge	.+82     	; 0x13d4 <LED_ZigZag+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1382:	69 8d       	ldd	r22, Y+25	; 0x19
    1384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	51 e4       	ldi	r21, 0x41	; 65
    1392:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9c 8b       	std	Y+20, r25	; 0x14
    13a8:	8b 8b       	std	Y+19, r24	; 0x13
    13aa:	0f c0       	rjmp	.+30     	; 0x13ca <LED_ZigZag+0xd6>
    13ac:	88 ec       	ldi	r24, 0xC8	; 200
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	9a 8b       	std	Y+18, r25	; 0x12
    13b2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13b4:	89 89       	ldd	r24, Y+17	; 0x11
    13b6:	9a 89       	ldd	r25, Y+18	; 0x12
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <LED_ZigZag+0xc4>
    13bc:	9a 8b       	std	Y+18, r25	; 0x12
    13be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c0:	8b 89       	ldd	r24, Y+19	; 0x13
    13c2:	9c 89       	ldd	r25, Y+20	; 0x14
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	9c 8b       	std	Y+20, r25	; 0x14
    13c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ca:	8b 89       	ldd	r24, Y+19	; 0x13
    13cc:	9c 89       	ldd	r25, Y+20	; 0x14
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	69 f7       	brne	.-38     	; 0x13ac <LED_ZigZag+0xb8>
    13d2:	14 c0       	rjmp	.+40     	; 0x13fc <LED_ZigZag+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d4:	6d 89       	ldd	r22, Y+21	; 0x15
    13d6:	7e 89       	ldd	r23, Y+22	; 0x16
    13d8:	8f 89       	ldd	r24, Y+23	; 0x17
    13da:	98 8d       	ldd	r25, Y+24	; 0x18
    13dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9c 8b       	std	Y+20, r25	; 0x14
    13e6:	8b 8b       	std	Y+19, r24	; 0x13
    13e8:	8b 89       	ldd	r24, Y+19	; 0x13
    13ea:	9c 89       	ldd	r25, Y+20	; 0x14
    13ec:	98 8b       	std	Y+16, r25	; 0x10
    13ee:	8f 87       	std	Y+15, r24	; 0x0f
    13f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f2:	98 89       	ldd	r25, Y+16	; 0x10
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <LED_ZigZag+0x100>
    13f8:	98 8b       	std	Y+16, r25	; 0x10
    13fa:	8f 87       	std	Y+15, r24	; 0x0f

void LED_ZigZag(void)
{
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(int i =0;i<LedsNumber;i++)
    13fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	98 a3       	std	Y+32, r25	; 0x20
    1404:	8f 8f       	std	Y+31, r24	; 0x1f
    1406:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1408:	98 a1       	ldd	r25, Y+32	; 0x20
    140a:	88 30       	cpi	r24, 0x08	; 8
    140c:	91 05       	cpc	r25, r1
    140e:	0c f4       	brge	.+2      	; 0x1412 <LED_ZigZag+0x11e>
    1410:	7e cf       	rjmp	.-260    	; 0x130e <LED_ZigZag+0x1a>
		{
			SetPinValue(i,LedPort,HIGH);
			_delay_ms(30);
		}
		for(int i=LedsNumber-1;i>=0;i--)
    1412:	87 e0       	ldi	r24, 0x07	; 7
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9e 8f       	std	Y+30, r25	; 0x1e
    1418:	8d 8f       	std	Y+29, r24	; 0x1d
    141a:	7c c0       	rjmp	.+248    	; 0x1514 <LED_ZigZag+0x220>
		{
			SetPinValue(i,LedPort,LOW);
    141c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a0 ef       	ldi	r26, 0xF0	; 240
    142c:	b1 e4       	ldi	r27, 0x41	; 65
    142e:	8b 87       	std	Y+11, r24	; 0x0b
    1430:	9c 87       	std	Y+12, r25	; 0x0c
    1432:	ad 87       	std	Y+13, r26	; 0x0d
    1434:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1436:	6b 85       	ldd	r22, Y+11	; 0x0b
    1438:	7c 85       	ldd	r23, Y+12	; 0x0c
    143a:	8d 85       	ldd	r24, Y+13	; 0x0d
    143c:	9e 85       	ldd	r25, Y+14	; 0x0e
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	4a ef       	ldi	r20, 0xFA	; 250
    1444:	54 e4       	ldi	r21, 0x44	; 68
    1446:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	8f 83       	std	Y+7, r24	; 0x07
    1450:	98 87       	std	Y+8, r25	; 0x08
    1452:	a9 87       	std	Y+9, r26	; 0x09
    1454:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1456:	6f 81       	ldd	r22, Y+7	; 0x07
    1458:	78 85       	ldd	r23, Y+8	; 0x08
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e8       	ldi	r20, 0x80	; 128
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    146a:	88 23       	and	r24, r24
    146c:	2c f4       	brge	.+10     	; 0x1478 <LED_ZigZag+0x184>
		__ticks = 1;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	3f c0       	rjmp	.+126    	; 0x14f6 <LED_ZigZag+0x202>
	else if (__tmp > 65535)
    1478:	6f 81       	ldd	r22, Y+7	; 0x07
    147a:	78 85       	ldd	r23, Y+8	; 0x08
    147c:	89 85       	ldd	r24, Y+9	; 0x09
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	3f ef       	ldi	r19, 0xFF	; 255
    1484:	4f e7       	ldi	r20, 0x7F	; 127
    1486:	57 e4       	ldi	r21, 0x47	; 71
    1488:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    148c:	18 16       	cp	r1, r24
    148e:	4c f5       	brge	.+82     	; 0x14e2 <LED_ZigZag+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1490:	6b 85       	ldd	r22, Y+11	; 0x0b
    1492:	7c 85       	ldd	r23, Y+12	; 0x0c
    1494:	8d 85       	ldd	r24, Y+13	; 0x0d
    1496:	9e 85       	ldd	r25, Y+14	; 0x0e
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e2       	ldi	r20, 0x20	; 32
    149e:	51 e4       	ldi	r21, 0x41	; 65
    14a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	bc 01       	movw	r22, r24
    14aa:	cd 01       	movw	r24, r26
    14ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 83       	std	Y+5, r24	; 0x05
    14b8:	0f c0       	rjmp	.+30     	; 0x14d8 <LED_ZigZag+0x1e4>
    14ba:	88 ec       	ldi	r24, 0xC8	; 200
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9c 83       	std	Y+4, r25	; 0x04
    14c0:	8b 83       	std	Y+3, r24	; 0x03
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	f1 f7       	brne	.-4      	; 0x14c6 <LED_ZigZag+0x1d2>
    14ca:	9c 83       	std	Y+4, r25	; 0x04
    14cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	9e 83       	std	Y+6, r25	; 0x06
    14d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	9e 81       	ldd	r25, Y+6	; 0x06
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	69 f7       	brne	.-38     	; 0x14ba <LED_ZigZag+0x1c6>
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <LED_ZigZag+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e2:	6f 81       	ldd	r22, Y+7	; 0x07
    14e4:	78 85       	ldd	r23, Y+8	; 0x08
    14e6:	89 85       	ldd	r24, Y+9	; 0x09
    14e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <LED_ZigZag+0x20e>
    1506:	9a 83       	std	Y+2, r25	; 0x02
    1508:	89 83       	std	Y+1, r24	; 0x01
		for(int i =0;i<LedsNumber;i++)
		{
			SetPinValue(i,LedPort,HIGH);
			_delay_ms(30);
		}
		for(int i=LedsNumber-1;i>=0;i--)
    150a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    150c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9e 8f       	std	Y+30, r25	; 0x1e
    1512:	8d 8f       	std	Y+29, r24	; 0x1d
    1514:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1516:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1518:	99 23       	and	r25, r25
    151a:	0c f0       	brlt	.+2      	; 0x151e <LED_ZigZag+0x22a>
    151c:	7f cf       	rjmp	.-258    	; 0x141c <LED_ZigZag+0x128>
	}
	else
	{
		//report error
	}
}
    151e:	a0 96       	adiw	r28, 0x20	; 32
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <LED_Diverging>:

void LED_Diverging(void)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	a0 97       	sbiw	r28, 0x20	; 32
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
	int i,j;
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(i=0,j=LedsNumber-1;i<LedsNumber/2 && j>=4;i++,j--)
    1544:	18 a2       	std	Y+32, r1	; 0x20
    1546:	1f 8e       	std	Y+31, r1	; 0x1f
    1548:	87 e0       	ldi	r24, 0x07	; 7
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	9e 8f       	std	Y+30, r25	; 0x1e
    154e:	8d 8f       	std	Y+29, r24	; 0x1d
    1550:	86 c0       	rjmp	.+268    	; 0x165e <LED_Diverging+0x12e>
		{
			SetPinValue(i,LedPort,HIGH);
    1552:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
			SetPinValue(j,LedPort,HIGH);
    155c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a0 e2       	ldi	r26, 0x20	; 32
    156c:	b2 e4       	ldi	r27, 0x42	; 66
    156e:	89 8f       	std	Y+25, r24	; 0x19
    1570:	9a 8f       	std	Y+26, r25	; 0x1a
    1572:	ab 8f       	std	Y+27, r26	; 0x1b
    1574:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1576:	69 8d       	ldd	r22, Y+25	; 0x19
    1578:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a ef       	ldi	r20, 0xFA	; 250
    1584:	54 e4       	ldi	r21, 0x44	; 68
    1586:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	8d 8b       	std	Y+21, r24	; 0x15
    1590:	9e 8b       	std	Y+22, r25	; 0x16
    1592:	af 8b       	std	Y+23, r26	; 0x17
    1594:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1596:	6d 89       	ldd	r22, Y+21	; 0x15
    1598:	7e 89       	ldd	r23, Y+22	; 0x16
    159a:	8f 89       	ldd	r24, Y+23	; 0x17
    159c:	98 8d       	ldd	r25, Y+24	; 0x18
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <LED_Diverging+0x88>
		__ticks = 1;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9c 8b       	std	Y+20, r25	; 0x14
    15b4:	8b 8b       	std	Y+19, r24	; 0x13
    15b6:	3f c0       	rjmp	.+126    	; 0x1636 <LED_Diverging+0x106>
	else if (__tmp > 65535)
    15b8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ba:	7e 89       	ldd	r23, Y+22	; 0x16
    15bc:	8f 89       	ldd	r24, Y+23	; 0x17
    15be:	98 8d       	ldd	r25, Y+24	; 0x18
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	4c f5       	brge	.+82     	; 0x1622 <LED_Diverging+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	69 8d       	ldd	r22, Y+25	; 0x19
    15d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e2       	ldi	r20, 0x20	; 32
    15de:	51 e4       	ldi	r21, 0x41	; 65
    15e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9c 8b       	std	Y+20, r25	; 0x14
    15f6:	8b 8b       	std	Y+19, r24	; 0x13
    15f8:	0f c0       	rjmp	.+30     	; 0x1618 <LED_Diverging+0xe8>
    15fa:	88 ec       	ldi	r24, 0xC8	; 200
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9a 8b       	std	Y+18, r25	; 0x12
    1600:	89 8b       	std	Y+17, r24	; 0x11
    1602:	89 89       	ldd	r24, Y+17	; 0x11
    1604:	9a 89       	ldd	r25, Y+18	; 0x12
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <LED_Diverging+0xd6>
    160a:	9a 8b       	std	Y+18, r25	; 0x12
    160c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160e:	8b 89       	ldd	r24, Y+19	; 0x13
    1610:	9c 89       	ldd	r25, Y+20	; 0x14
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	9c 8b       	std	Y+20, r25	; 0x14
    1616:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1618:	8b 89       	ldd	r24, Y+19	; 0x13
    161a:	9c 89       	ldd	r25, Y+20	; 0x14
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	69 f7       	brne	.-38     	; 0x15fa <LED_Diverging+0xca>
    1620:	14 c0       	rjmp	.+40     	; 0x164a <LED_Diverging+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1622:	6d 89       	ldd	r22, Y+21	; 0x15
    1624:	7e 89       	ldd	r23, Y+22	; 0x16
    1626:	8f 89       	ldd	r24, Y+23	; 0x17
    1628:	98 8d       	ldd	r25, Y+24	; 0x18
    162a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	9c 8b       	std	Y+20, r25	; 0x14
    1634:	8b 8b       	std	Y+19, r24	; 0x13
    1636:	8b 89       	ldd	r24, Y+19	; 0x13
    1638:	9c 89       	ldd	r25, Y+20	; 0x14
    163a:	98 8b       	std	Y+16, r25	; 0x10
    163c:	8f 87       	std	Y+15, r24	; 0x0f
    163e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1640:	98 89       	ldd	r25, Y+16	; 0x10
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <LED_Diverging+0x112>
    1646:	98 8b       	std	Y+16, r25	; 0x10
    1648:	8f 87       	std	Y+15, r24	; 0x0f
void LED_Diverging(void)
{
	int i,j;
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(i=0,j=LedsNumber-1;i<LedsNumber/2 && j>=4;i++,j--)
    164a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    164c:	98 a1       	ldd	r25, Y+32	; 0x20
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	98 a3       	std	Y+32, r25	; 0x20
    1652:	8f 8f       	std	Y+31, r24	; 0x1f
    1654:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1656:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	9e 8f       	std	Y+30, r25	; 0x1e
    165c:	8d 8f       	std	Y+29, r24	; 0x1d
    165e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1660:	98 a1       	ldd	r25, Y+32	; 0x20
    1662:	84 30       	cpi	r24, 0x04	; 4
    1664:	91 05       	cpc	r25, r1
    1666:	34 f4       	brge	.+12     	; 0x1674 <LED_Diverging+0x144>
    1668:	8d 8d       	ldd	r24, Y+29	; 0x1d
    166a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	91 05       	cpc	r25, r1
    1670:	0c f0       	brlt	.+2      	; 0x1674 <LED_Diverging+0x144>
    1672:	6f cf       	rjmp	.-290    	; 0x1552 <LED_Diverging+0x22>
		{
			SetPinValue(i,LedPort,HIGH);
			SetPinValue(j,LedPort,HIGH);
			_delay_ms(40);
		}
		LED_OFF();
    1674:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LED_OFF>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 ea       	ldi	r26, 0xA0	; 160
    167e:	b1 e4       	ldi	r27, 0x41	; 65
    1680:	8b 87       	std	Y+11, r24	; 0x0b
    1682:	9c 87       	std	Y+12, r25	; 0x0c
    1684:	ad 87       	std	Y+13, r26	; 0x0d
    1686:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	6b 85       	ldd	r22, Y+11	; 0x0b
    168a:	7c 85       	ldd	r23, Y+12	; 0x0c
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a ef       	ldi	r20, 0xFA	; 250
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8f 83       	std	Y+7, r24	; 0x07
    16a2:	98 87       	std	Y+8, r25	; 0x08
    16a4:	a9 87       	std	Y+9, r26	; 0x09
    16a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a8:	6f 81       	ldd	r22, Y+7	; 0x07
    16aa:	78 85       	ldd	r23, Y+8	; 0x08
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <LED_Diverging+0x19a>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <LED_Diverging+0x218>
	else if (__tmp > 65535)
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <LED_Diverging+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	0f c0       	rjmp	.+30     	; 0x172a <LED_Diverging+0x1fa>
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9c 83       	std	Y+4, r25	; 0x04
    1712:	8b 83       	std	Y+3, r24	; 0x03
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LED_Diverging+0x1e8>
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <LED_Diverging+0x1dc>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <LED_Diverging+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6f 81       	ldd	r22, Y+7	; 0x07
    1736:	78 85       	ldd	r23, Y+8	; 0x08
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LED_Diverging+0x224>
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//report error
	}
}
    175c:	a0 96       	adiw	r28, 0x20	; 32
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <LED_Converging>:

void LED_Converging(void)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	a0 97       	sbiw	r28, 0x20	; 32
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
	int i,j;
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(i=(LedsNumber/2)-1,j=LedsNumber/2;i>=0 && j<=LedsNumber-1;i--,j++)
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	98 a3       	std	Y+32, r25	; 0x20
    1788:	8f 8f       	std	Y+31, r24	; 0x1f
    178a:	84 e0       	ldi	r24, 0x04	; 4
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9e 8f       	std	Y+30, r25	; 0x1e
    1790:	8d 8f       	std	Y+29, r24	; 0x1d
    1792:	86 c0       	rjmp	.+268    	; 0x18a0 <LED_Converging+0x132>
		{
			SetPinValue(i,LedPort,HIGH);
    1794:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
			SetPinValue(j,LedPort,HIGH);
    179e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	a0 e2       	ldi	r26, 0x20	; 32
    17ae:	b2 e4       	ldi	r27, 0x42	; 66
    17b0:	89 8f       	std	Y+25, r24	; 0x19
    17b2:	9a 8f       	std	Y+26, r25	; 0x1a
    17b4:	ab 8f       	std	Y+27, r26	; 0x1b
    17b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a ef       	ldi	r20, 0xFA	; 250
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	8d 8b       	std	Y+21, r24	; 0x15
    17d2:	9e 8b       	std	Y+22, r25	; 0x16
    17d4:	af 8b       	std	Y+23, r26	; 0x17
    17d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17d8:	6d 89       	ldd	r22, Y+21	; 0x15
    17da:	7e 89       	ldd	r23, Y+22	; 0x16
    17dc:	8f 89       	ldd	r24, Y+23	; 0x17
    17de:	98 8d       	ldd	r25, Y+24	; 0x18
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	2c f4       	brge	.+10     	; 0x17fa <LED_Converging+0x8c>
		__ticks = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9c 8b       	std	Y+20, r25	; 0x14
    17f6:	8b 8b       	std	Y+19, r24	; 0x13
    17f8:	3f c0       	rjmp	.+126    	; 0x1878 <LED_Converging+0x10a>
	else if (__tmp > 65535)
    17fa:	6d 89       	ldd	r22, Y+21	; 0x15
    17fc:	7e 89       	ldd	r23, Y+22	; 0x16
    17fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1800:	98 8d       	ldd	r25, Y+24	; 0x18
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    180e:	18 16       	cp	r1, r24
    1810:	4c f5       	brge	.+82     	; 0x1864 <LED_Converging+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	69 8d       	ldd	r22, Y+25	; 0x19
    1814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e2       	ldi	r20, 0x20	; 32
    1820:	51 e4       	ldi	r21, 0x41	; 65
    1822:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9c 8b       	std	Y+20, r25	; 0x14
    1838:	8b 8b       	std	Y+19, r24	; 0x13
    183a:	0f c0       	rjmp	.+30     	; 0x185a <LED_Converging+0xec>
    183c:	88 ec       	ldi	r24, 0xC8	; 200
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9a 8b       	std	Y+18, r25	; 0x12
    1842:	89 8b       	std	Y+17, r24	; 0x11
    1844:	89 89       	ldd	r24, Y+17	; 0x11
    1846:	9a 89       	ldd	r25, Y+18	; 0x12
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <LED_Converging+0xda>
    184c:	9a 8b       	std	Y+18, r25	; 0x12
    184e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1850:	8b 89       	ldd	r24, Y+19	; 0x13
    1852:	9c 89       	ldd	r25, Y+20	; 0x14
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	9c 8b       	std	Y+20, r25	; 0x14
    1858:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	8b 89       	ldd	r24, Y+19	; 0x13
    185c:	9c 89       	ldd	r25, Y+20	; 0x14
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	69 f7       	brne	.-38     	; 0x183c <LED_Converging+0xce>
    1862:	14 c0       	rjmp	.+40     	; 0x188c <LED_Converging+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1864:	6d 89       	ldd	r22, Y+21	; 0x15
    1866:	7e 89       	ldd	r23, Y+22	; 0x16
    1868:	8f 89       	ldd	r24, Y+23	; 0x17
    186a:	98 8d       	ldd	r25, Y+24	; 0x18
    186c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9c 8b       	std	Y+20, r25	; 0x14
    1876:	8b 8b       	std	Y+19, r24	; 0x13
    1878:	8b 89       	ldd	r24, Y+19	; 0x13
    187a:	9c 89       	ldd	r25, Y+20	; 0x14
    187c:	98 8b       	std	Y+16, r25	; 0x10
    187e:	8f 87       	std	Y+15, r24	; 0x0f
    1880:	8f 85       	ldd	r24, Y+15	; 0x0f
    1882:	98 89       	ldd	r25, Y+16	; 0x10
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <LED_Converging+0x116>
    1888:	98 8b       	std	Y+16, r25	; 0x10
    188a:	8f 87       	std	Y+15, r24	; 0x0f
void LED_Converging(void)
{
	int i,j;
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(i=(LedsNumber/2)-1,j=LedsNumber/2;i>=0 && j<=LedsNumber-1;i--,j++)
    188c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    188e:	98 a1       	ldd	r25, Y+32	; 0x20
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	98 a3       	std	Y+32, r25	; 0x20
    1894:	8f 8f       	std	Y+31, r24	; 0x1f
    1896:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1898:	9e 8d       	ldd	r25, Y+30	; 0x1e
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	9e 8f       	std	Y+30, r25	; 0x1e
    189e:	8d 8f       	std	Y+29, r24	; 0x1d
    18a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18a2:	98 a1       	ldd	r25, Y+32	; 0x20
    18a4:	99 23       	and	r25, r25
    18a6:	34 f0       	brlt	.+12     	; 0x18b4 <LED_Converging+0x146>
    18a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ac:	88 30       	cpi	r24, 0x08	; 8
    18ae:	91 05       	cpc	r25, r1
    18b0:	0c f4       	brge	.+2      	; 0x18b4 <LED_Converging+0x146>
    18b2:	70 cf       	rjmp	.-288    	; 0x1794 <LED_Converging+0x26>
		{
			SetPinValue(i,LedPort,HIGH);
			SetPinValue(j,LedPort,HIGH);
			_delay_ms(40);
		}
		LED_OFF();
    18b4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LED_OFF>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 ea       	ldi	r26, 0xA0	; 160
    18be:	b1 e4       	ldi	r27, 0x41	; 65
    18c0:	8b 87       	std	Y+11, r24	; 0x0b
    18c2:	9c 87       	std	Y+12, r25	; 0x0c
    18c4:	ad 87       	std	Y+13, r26	; 0x0d
    18c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    18cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a ef       	ldi	r20, 0xFA	; 250
    18d6:	54 e4       	ldi	r21, 0x44	; 68
    18d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8f 83       	std	Y+7, r24	; 0x07
    18e2:	98 87       	std	Y+8, r25	; 0x08
    18e4:	a9 87       	std	Y+9, r26	; 0x09
    18e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ea:	78 85       	ldd	r23, Y+8	; 0x08
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	2c f4       	brge	.+10     	; 0x190a <LED_Converging+0x19c>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9e 83       	std	Y+6, r25	; 0x06
    1906:	8d 83       	std	Y+5, r24	; 0x05
    1908:	3f c0       	rjmp	.+126    	; 0x1988 <LED_Converging+0x21a>
	else if (__tmp > 65535)
    190a:	6f 81       	ldd	r22, Y+7	; 0x07
    190c:	78 85       	ldd	r23, Y+8	; 0x08
    190e:	89 85       	ldd	r24, Y+9	; 0x09
    1910:	9a 85       	ldd	r25, Y+10	; 0x0a
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f5       	brge	.+82     	; 0x1974 <LED_Converging+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	6b 85       	ldd	r22, Y+11	; 0x0b
    1924:	7c 85       	ldd	r23, Y+12	; 0x0c
    1926:	8d 85       	ldd	r24, Y+13	; 0x0d
    1928:	9e 85       	ldd	r25, Y+14	; 0x0e
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e2       	ldi	r20, 0x20	; 32
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
    194a:	0f c0       	rjmp	.+30     	; 0x196a <LED_Converging+0x1fc>
    194c:	88 ec       	ldi	r24, 0xC8	; 200
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9c 83       	std	Y+4, r25	; 0x04
    1952:	8b 83       	std	Y+3, r24	; 0x03
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LED_Converging+0x1ea>
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	69 f7       	brne	.-38     	; 0x194c <LED_Converging+0x1de>
    1972:	14 c0       	rjmp	.+40     	; 0x199c <LED_Converging+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1974:	6f 81       	ldd	r22, Y+7	; 0x07
    1976:	78 85       	ldd	r23, Y+8	; 0x08
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	9a 81       	ldd	r25, Y+2	; 0x02
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LED_Converging+0x226>
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//report error
	}
}
    199c:	a0 96       	adiw	r28, 0x20	; 32
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <LED_Flashing>:

void LED_Flashing(void)
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	6c 97       	sbiw	r28, 0x1c	; 28
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		LED_ON();
    19c2:	0e 94 42 09 	call	0x1284	; 0x1284 <LED_ON>
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a0 e2       	ldi	r26, 0x20	; 32
    19cc:	b2 e4       	ldi	r27, 0x42	; 66
    19ce:	89 8f       	std	Y+25, r24	; 0x19
    19d0:	9a 8f       	std	Y+26, r25	; 0x1a
    19d2:	ab 8f       	std	Y+27, r26	; 0x1b
    19d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d6:	69 8d       	ldd	r22, Y+25	; 0x19
    19d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	4a ef       	ldi	r20, 0xFA	; 250
    19e4:	54 e4       	ldi	r21, 0x44	; 68
    19e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	8d 8b       	std	Y+21, r24	; 0x15
    19f0:	9e 8b       	std	Y+22, r25	; 0x16
    19f2:	af 8b       	std	Y+23, r26	; 0x17
    19f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19f6:	6d 89       	ldd	r22, Y+21	; 0x15
    19f8:	7e 89       	ldd	r23, Y+22	; 0x16
    19fa:	8f 89       	ldd	r24, Y+23	; 0x17
    19fc:	98 8d       	ldd	r25, Y+24	; 0x18
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e8       	ldi	r20, 0x80	; 128
    1a04:	5f e3       	ldi	r21, 0x3F	; 63
    1a06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a0a:	88 23       	and	r24, r24
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <LED_Flashing+0x6a>
		__ticks = 1;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	9c 8b       	std	Y+20, r25	; 0x14
    1a14:	8b 8b       	std	Y+19, r24	; 0x13
    1a16:	3f c0       	rjmp	.+126    	; 0x1a96 <LED_Flashing+0xe8>
	else if (__tmp > 65535)
    1a18:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	57 e4       	ldi	r21, 0x47	; 71
    1a28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	4c f5       	brge	.+82     	; 0x1a82 <LED_Flashing+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a30:	69 8d       	ldd	r22, Y+25	; 0x19
    1a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e2       	ldi	r20, 0x20	; 32
    1a3e:	51 e4       	ldi	r21, 0x41	; 65
    1a40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9c 8b       	std	Y+20, r25	; 0x14
    1a56:	8b 8b       	std	Y+19, r24	; 0x13
    1a58:	0f c0       	rjmp	.+30     	; 0x1a78 <LED_Flashing+0xca>
    1a5a:	88 ec       	ldi	r24, 0xC8	; 200
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9a 8b       	std	Y+18, r25	; 0x12
    1a60:	89 8b       	std	Y+17, r24	; 0x11
    1a62:	89 89       	ldd	r24, Y+17	; 0x11
    1a64:	9a 89       	ldd	r25, Y+18	; 0x12
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <LED_Flashing+0xb8>
    1a6a:	9a 8b       	std	Y+18, r25	; 0x12
    1a6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a70:	9c 89       	ldd	r25, Y+20	; 0x14
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	9c 8b       	std	Y+20, r25	; 0x14
    1a76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a78:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	69 f7       	brne	.-38     	; 0x1a5a <LED_Flashing+0xac>
    1a80:	14 c0       	rjmp	.+40     	; 0x1aaa <LED_Flashing+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a82:	6d 89       	ldd	r22, Y+21	; 0x15
    1a84:	7e 89       	ldd	r23, Y+22	; 0x16
    1a86:	8f 89       	ldd	r24, Y+23	; 0x17
    1a88:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9c 8b       	std	Y+20, r25	; 0x14
    1a94:	8b 8b       	std	Y+19, r24	; 0x13
    1a96:	8b 89       	ldd	r24, Y+19	; 0x13
    1a98:	9c 89       	ldd	r25, Y+20	; 0x14
    1a9a:	98 8b       	std	Y+16, r25	; 0x10
    1a9c:	8f 87       	std	Y+15, r24	; 0x0f
    1a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa0:	98 89       	ldd	r25, Y+16	; 0x10
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LED_Flashing+0xf4>
    1aa6:	98 8b       	std	Y+16, r25	; 0x10
    1aa8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(40);
		LED_OFF();
    1aaa:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LED_OFF>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e2       	ldi	r26, 0x20	; 32
    1ab4:	b2 e4       	ldi	r27, 0x42	; 66
    1ab6:	8b 87       	std	Y+11, r24	; 0x0b
    1ab8:	9c 87       	std	Y+12, r25	; 0x0c
    1aba:	ad 87       	std	Y+13, r26	; 0x0d
    1abc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a ef       	ldi	r20, 0xFA	; 250
    1acc:	54 e4       	ldi	r21, 0x44	; 68
    1ace:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	8f 83       	std	Y+7, r24	; 0x07
    1ad8:	98 87       	std	Y+8, r25	; 0x08
    1ada:	a9 87       	std	Y+9, r26	; 0x09
    1adc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ade:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae0:	78 85       	ldd	r23, Y+8	; 0x08
    1ae2:	89 85       	ldd	r24, Y+9	; 0x09
    1ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <LED_Flashing+0x152>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <LED_Flashing+0x1d0>
	else if (__tmp > 65535)
    1b00:	6f 81       	ldd	r22, Y+7	; 0x07
    1b02:	78 85       	ldd	r23, Y+8	; 0x08
    1b04:	89 85       	ldd	r24, Y+9	; 0x09
    1b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <LED_Flashing+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <LED_Flashing+0x1b2>
    1b42:	88 ec       	ldi	r24, 0xC8	; 200
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9c 83       	std	Y+4, r25	; 0x04
    1b48:	8b 83       	std	Y+3, r24	; 0x03
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LED_Flashing+0x1a0>
    1b52:	9c 83       	std	Y+4, r25	; 0x04
    1b54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	9e 81       	ldd	r25, Y+6	; 0x06
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <LED_Flashing+0x194>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <LED_Flashing+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	9a 83       	std	Y+2, r25	; 0x02
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LED_Flashing+0x1dc>
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//report error
	}
}
    1b92:	6c 96       	adiw	r28, 0x1c	; 28
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <LED_Shift_Left>:

void LED_Shift_Left(void)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	6e 97       	sbiw	r28, 0x1e	; 30
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
	int i;
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(i=0;i<LedsNumber;i++)
    1bb8:	1e 8e       	std	Y+30, r1	; 0x1e
    1bba:	1d 8e       	std	Y+29, r1	; 0x1d
    1bbc:	7c c0       	rjmp	.+248    	; 0x1cb6 <LED_Shift_Left+0x112>
		{
			SetPinValue(i,LedPort,HIGH);
    1bbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	41 e0       	ldi	r20, 0x01	; 1
    1bc4:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a8 e4       	ldi	r26, 0x48	; 72
    1bce:	b2 e4       	ldi	r27, 0x42	; 66
    1bd0:	89 8f       	std	Y+25, r24	; 0x19
    1bd2:	9a 8f       	std	Y+26, r25	; 0x1a
    1bd4:	ab 8f       	std	Y+27, r26	; 0x1b
    1bd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a ef       	ldi	r20, 0xFA	; 250
    1be6:	54 e4       	ldi	r21, 0x44	; 68
    1be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8d 8b       	std	Y+21, r24	; 0x15
    1bf2:	9e 8b       	std	Y+22, r25	; 0x16
    1bf4:	af 8b       	std	Y+23, r26	; 0x17
    1bf6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <LED_Shift_Left+0x76>
		__ticks = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9c 8b       	std	Y+20, r25	; 0x14
    1c16:	8b 8b       	std	Y+19, r24	; 0x13
    1c18:	3f c0       	rjmp	.+126    	; 0x1c98 <LED_Shift_Left+0xf4>
	else if (__tmp > 65535)
    1c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c20:	98 8d       	ldd	r25, Y+24	; 0x18
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	3f ef       	ldi	r19, 0xFF	; 255
    1c26:	4f e7       	ldi	r20, 0x7F	; 127
    1c28:	57 e4       	ldi	r21, 0x47	; 71
    1c2a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	4c f5       	brge	.+82     	; 0x1c84 <LED_Shift_Left+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	69 8d       	ldd	r22, Y+25	; 0x19
    1c34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e2       	ldi	r20, 0x20	; 32
    1c40:	51 e4       	ldi	r21, 0x41	; 65
    1c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9c 8b       	std	Y+20, r25	; 0x14
    1c58:	8b 8b       	std	Y+19, r24	; 0x13
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <LED_Shift_Left+0xd6>
    1c5c:	88 ec       	ldi	r24, 0xC8	; 200
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9a 8b       	std	Y+18, r25	; 0x12
    1c62:	89 8b       	std	Y+17, r24	; 0x11
    1c64:	89 89       	ldd	r24, Y+17	; 0x11
    1c66:	9a 89       	ldd	r25, Y+18	; 0x12
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <LED_Shift_Left+0xc4>
    1c6c:	9a 8b       	std	Y+18, r25	; 0x12
    1c6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	8b 89       	ldd	r24, Y+19	; 0x13
    1c72:	9c 89       	ldd	r25, Y+20	; 0x14
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	9c 8b       	std	Y+20, r25	; 0x14
    1c78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	69 f7       	brne	.-38     	; 0x1c5c <LED_Shift_Left+0xb8>
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <LED_Shift_Left+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c84:	6d 89       	ldd	r22, Y+21	; 0x15
    1c86:	7e 89       	ldd	r23, Y+22	; 0x16
    1c88:	8f 89       	ldd	r24, Y+23	; 0x17
    1c8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9c 8b       	std	Y+20, r25	; 0x14
    1c96:	8b 8b       	std	Y+19, r24	; 0x13
    1c98:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9c:	98 8b       	std	Y+16, r25	; 0x10
    1c9e:	8f 87       	std	Y+15, r24	; 0x0f
    1ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca2:	98 89       	ldd	r25, Y+16	; 0x10
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LED_Shift_Left+0x100>
    1ca8:	98 8b       	std	Y+16, r25	; 0x10
    1caa:	8f 87       	std	Y+15, r24	; 0x0f
void LED_Shift_Left(void)
{
	int i;
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(i=0;i<LedsNumber;i++)
    1cac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb4:	8d 8f       	std	Y+29, r24	; 0x1d
    1cb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cba:	88 30       	cpi	r24, 0x08	; 8
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	0c f4       	brge	.+2      	; 0x1cc2 <LED_Shift_Left+0x11e>
    1cc0:	7e cf       	rjmp	.-260    	; 0x1bbe <LED_Shift_Left+0x1a>
		{
			SetPinValue(i,LedPort,HIGH);
			_delay_ms(50);
		}
		LED_OFF();
    1cc2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LED_OFF>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a8 e4       	ldi	r26, 0x48	; 72
    1ccc:	b2 e4       	ldi	r27, 0x42	; 66
    1cce:	8b 87       	std	Y+11, r24	; 0x0b
    1cd0:	9c 87       	std	Y+12, r25	; 0x0c
    1cd2:	ad 87       	std	Y+13, r26	; 0x0d
    1cd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a ef       	ldi	r20, 0xFA	; 250
    1ce4:	54 e4       	ldi	r21, 0x44	; 68
    1ce6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8f 83       	std	Y+7, r24	; 0x07
    1cf0:	98 87       	std	Y+8, r25	; 0x08
    1cf2:	a9 87       	std	Y+9, r26	; 0x09
    1cf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <LED_Shift_Left+0x174>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <LED_Shift_Left+0x1f2>
	else if (__tmp > 65535)
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d2c:	18 16       	cp	r1, r24
    1d2e:	4c f5       	brge	.+82     	; 0x1d82 <LED_Shift_Left+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <LED_Shift_Left+0x1d4>
    1d5a:	88 ec       	ldi	r24, 0xC8	; 200
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LED_Shift_Left+0x1c2>
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <LED_Shift_Left+0x1b6>
    1d80:	14 c0       	rjmp	.+40     	; 0x1daa <LED_Shift_Left+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LED_Shift_Left+0x1fe>
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//report error
	}
}
    1daa:	6e 96       	adiw	r28, 0x1e	; 30
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <LED_shift_Right>:

void LED_shift_Right(void)
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	6e 97       	sbiw	r28, 0x1e	; 30
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
	int i;
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(i=LedsNumber-1;i>=0;i--)
    1dd0:	87 e0       	ldi	r24, 0x07	; 7
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd6:	8d 8f       	std	Y+29, r24	; 0x1d
    1dd8:	7c c0       	rjmp	.+248    	; 0x1ed2 <LED_shift_Right+0x116>
		{
			SetPinValue(i,LedPort,HIGH);
    1dda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a8 e4       	ldi	r26, 0x48	; 72
    1dea:	b2 e4       	ldi	r27, 0x42	; 66
    1dec:	89 8f       	std	Y+25, r24	; 0x19
    1dee:	9a 8f       	std	Y+26, r25	; 0x1a
    1df0:	ab 8f       	std	Y+27, r26	; 0x1b
    1df2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df4:	69 8d       	ldd	r22, Y+25	; 0x19
    1df6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	4a ef       	ldi	r20, 0xFA	; 250
    1e02:	54 e4       	ldi	r21, 0x44	; 68
    1e04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	8d 8b       	std	Y+21, r24	; 0x15
    1e0e:	9e 8b       	std	Y+22, r25	; 0x16
    1e10:	af 8b       	std	Y+23, r26	; 0x17
    1e12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e14:	6d 89       	ldd	r22, Y+21	; 0x15
    1e16:	7e 89       	ldd	r23, Y+22	; 0x16
    1e18:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e8       	ldi	r20, 0x80	; 128
    1e22:	5f e3       	ldi	r21, 0x3F	; 63
    1e24:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e28:	88 23       	and	r24, r24
    1e2a:	2c f4       	brge	.+10     	; 0x1e36 <LED_shift_Right+0x7a>
		__ticks = 1;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
    1e32:	8b 8b       	std	Y+19, r24	; 0x13
    1e34:	3f c0       	rjmp	.+126    	; 0x1eb4 <LED_shift_Right+0xf8>
	else if (__tmp > 65535)
    1e36:	6d 89       	ldd	r22, Y+21	; 0x15
    1e38:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	3f ef       	ldi	r19, 0xFF	; 255
    1e42:	4f e7       	ldi	r20, 0x7F	; 127
    1e44:	57 e4       	ldi	r21, 0x47	; 71
    1e46:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e4a:	18 16       	cp	r1, r24
    1e4c:	4c f5       	brge	.+82     	; 0x1ea0 <LED_shift_Right+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e2       	ldi	r20, 0x20	; 32
    1e5c:	51 e4       	ldi	r21, 0x41	; 65
    1e5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	bc 01       	movw	r22, r24
    1e68:	cd 01       	movw	r24, r26
    1e6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	9c 8b       	std	Y+20, r25	; 0x14
    1e74:	8b 8b       	std	Y+19, r24	; 0x13
    1e76:	0f c0       	rjmp	.+30     	; 0x1e96 <LED_shift_Right+0xda>
    1e78:	88 ec       	ldi	r24, 0xC8	; 200
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	9a 8b       	std	Y+18, r25	; 0x12
    1e7e:	89 8b       	std	Y+17, r24	; 0x11
    1e80:	89 89       	ldd	r24, Y+17	; 0x11
    1e82:	9a 89       	ldd	r25, Y+18	; 0x12
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <LED_shift_Right+0xc8>
    1e88:	9a 8b       	std	Y+18, r25	; 0x12
    1e8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	9c 8b       	std	Y+20, r25	; 0x14
    1e94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e96:	8b 89       	ldd	r24, Y+19	; 0x13
    1e98:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	69 f7       	brne	.-38     	; 0x1e78 <LED_shift_Right+0xbc>
    1e9e:	14 c0       	rjmp	.+40     	; 0x1ec8 <LED_shift_Right+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	8b 8b       	std	Y+19, r24	; 0x13
    1eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb8:	98 8b       	std	Y+16, r25	; 0x10
    1eba:	8f 87       	std	Y+15, r24	; 0x0f
    1ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ebe:	98 89       	ldd	r25, Y+16	; 0x10
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LED_shift_Right+0x104>
    1ec4:	98 8b       	std	Y+16, r25	; 0x10
    1ec6:	8f 87       	std	Y+15, r24	; 0x0f
void LED_shift_Right(void)
{
	int i;
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		for(i=LedsNumber-1;i>=0;i--)
    1ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9e 8f       	std	Y+30, r25	; 0x1e
    1ed0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ed2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ed4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ed6:	99 23       	and	r25, r25
    1ed8:	0c f0       	brlt	.+2      	; 0x1edc <LED_shift_Right+0x120>
    1eda:	7f cf       	rjmp	.-258    	; 0x1dda <LED_shift_Right+0x1e>
		{
			SetPinValue(i,LedPort,HIGH);
			_delay_ms(50);
		}
		LED_OFF();
    1edc:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LED_OFF>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a8 e4       	ldi	r26, 0x48	; 72
    1ee6:	b2 e4       	ldi	r27, 0x42	; 66
    1ee8:	8b 87       	std	Y+11, r24	; 0x0b
    1eea:	9c 87       	std	Y+12, r25	; 0x0c
    1eec:	ad 87       	std	Y+13, r26	; 0x0d
    1eee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a ef       	ldi	r20, 0xFA	; 250
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8f 83       	std	Y+7, r24	; 0x07
    1f0a:	98 87       	std	Y+8, r25	; 0x08
    1f0c:	a9 87       	std	Y+9, r26	; 0x09
    1f0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f10:	6f 81       	ldd	r22, Y+7	; 0x07
    1f12:	78 85       	ldd	r23, Y+8	; 0x08
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <LED_shift_Right+0x176>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <LED_shift_Right+0x1f4>
	else if (__tmp > 65535)
    1f32:	6f 81       	ldd	r22, Y+7	; 0x07
    1f34:	78 85       	ldd	r23, Y+8	; 0x08
    1f36:	89 85       	ldd	r24, Y+9	; 0x09
    1f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <LED_shift_Right+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9e 83       	std	Y+6, r25	; 0x06
    1f70:	8d 83       	std	Y+5, r24	; 0x05
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <LED_shift_Right+0x1d6>
    1f74:	88 ec       	ldi	r24, 0xC8	; 200
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9c 83       	std	Y+4, r25	; 0x04
    1f7a:	8b 83       	std	Y+3, r24	; 0x03
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LED_shift_Right+0x1c4>
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <LED_shift_Right+0x1b8>
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <LED_shift_Right+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9e:	78 85       	ldd	r23, Y+8	; 0x08
    1fa0:	89 85       	ldd	r24, Y+9	; 0x09
    1fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	9a 83       	std	Y+2, r25	; 0x02
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LED_shift_Right+0x200>
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//report error
	}
}
    1fc4:	6e 96       	adiw	r28, 0x1e	; 30
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <LED_Ping_Bong>:

void LED_Ping_Bong(void)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	6e 97       	sbiw	r28, 0x1e	; 30
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
	int i;
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		SetPinValue(PIN0,LedPort,HIGH);
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
		SetPinValue(PIN7,LedPort,HIGH);
    1ff4:	87 e0       	ldi	r24, 0x07	; 7
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
		for(i=PIN1;i<=PIN6;i++)
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9e 8f       	std	Y+30, r25	; 0x1e
    2004:	8d 8f       	std	Y+29, r24	; 0x1d
    2006:	81 c0       	rjmp	.+258    	; 0x210a <LED_Ping_Bong+0x134>
		{
			SetPinValue(i,LedPort,HIGH);
    2008:	8d 8d       	ldd	r24, Y+29	; 0x1d
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 ea       	ldi	r26, 0xA0	; 160
    2018:	b1 e4       	ldi	r27, 0x41	; 65
    201a:	89 8f       	std	Y+25, r24	; 0x19
    201c:	9a 8f       	std	Y+26, r25	; 0x1a
    201e:	ab 8f       	std	Y+27, r26	; 0x1b
    2020:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	69 8d       	ldd	r22, Y+25	; 0x19
    2024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a ef       	ldi	r20, 0xFA	; 250
    2030:	54 e4       	ldi	r21, 0x44	; 68
    2032:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8d 8b       	std	Y+21, r24	; 0x15
    203c:	9e 8b       	std	Y+22, r25	; 0x16
    203e:	af 8b       	std	Y+23, r26	; 0x17
    2040:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2042:	6d 89       	ldd	r22, Y+21	; 0x15
    2044:	7e 89       	ldd	r23, Y+22	; 0x16
    2046:	8f 89       	ldd	r24, Y+23	; 0x17
    2048:	98 8d       	ldd	r25, Y+24	; 0x18
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	2c f4       	brge	.+10     	; 0x2064 <LED_Ping_Bong+0x8e>
		__ticks = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	3f c0       	rjmp	.+126    	; 0x20e2 <LED_Ping_Bong+0x10c>
	else if (__tmp > 65535)
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	4c f5       	brge	.+82     	; 0x20ce <LED_Ping_Bong+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207c:	69 8d       	ldd	r22, Y+25	; 0x19
    207e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <LED_Ping_Bong+0xee>
    20a6:	88 ec       	ldi	r24, 0xC8	; 200
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9a 8b       	std	Y+18, r25	; 0x12
    20ac:	89 8b       	std	Y+17, r24	; 0x11
    20ae:	89 89       	ldd	r24, Y+17	; 0x11
    20b0:	9a 89       	ldd	r25, Y+18	; 0x12
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <LED_Ping_Bong+0xdc>
    20b6:	9a 8b       	std	Y+18, r25	; 0x12
    20b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	9c 8b       	std	Y+20, r25	; 0x14
    20c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c4:	8b 89       	ldd	r24, Y+19	; 0x13
    20c6:	9c 89       	ldd	r25, Y+20	; 0x14
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	69 f7       	brne	.-38     	; 0x20a6 <LED_Ping_Bong+0xd0>
    20cc:	14 c0       	rjmp	.+40     	; 0x20f6 <LED_Ping_Bong+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	8b 89       	ldd	r24, Y+19	; 0x13
    20e4:	9c 89       	ldd	r25, Y+20	; 0x14
    20e6:	98 8b       	std	Y+16, r25	; 0x10
    20e8:	8f 87       	std	Y+15, r24	; 0x0f
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	98 89       	ldd	r25, Y+16	; 0x10
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LED_Ping_Bong+0x118>
    20f2:	98 8b       	std	Y+16, r25	; 0x10
    20f4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(20);
			SetPinValue(i,LedPort,LOW);
    20f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
	int i;
	if(LedsNumber<= (PIN7+1) && LedPort <= PORTD )
	{
		SetPinValue(PIN0,LedPort,HIGH);
		SetPinValue(PIN7,LedPort,HIGH);
		for(i=PIN1;i<=PIN6;i++)
    2100:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2102:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	9e 8f       	std	Y+30, r25	; 0x1e
    2108:	8d 8f       	std	Y+29, r24	; 0x1d
    210a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    210c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    210e:	87 30       	cpi	r24, 0x07	; 7
    2110:	91 05       	cpc	r25, r1
    2112:	0c f4       	brge	.+2      	; 0x2116 <LED_Ping_Bong+0x140>
    2114:	79 cf       	rjmp	.-270    	; 0x2008 <LED_Ping_Bong+0x32>
		{
			SetPinValue(i,LedPort,HIGH);
			_delay_ms(20);
			SetPinValue(i,LedPort,LOW);
		}
		for(i=PIN6;i>=PIN1;i--)
    2116:	86 e0       	ldi	r24, 0x06	; 6
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9e 8f       	std	Y+30, r25	; 0x1e
    211c:	8d 8f       	std	Y+29, r24	; 0x1d
    211e:	81 c0       	rjmp	.+258    	; 0x2222 <LED_Ping_Bong+0x24c>
		{
			SetPinValue(i,LedPort,HIGH);
    2120:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 ea       	ldi	r26, 0xA0	; 160
    2130:	b1 e4       	ldi	r27, 0x41	; 65
    2132:	8b 87       	std	Y+11, r24	; 0x0b
    2134:	9c 87       	std	Y+12, r25	; 0x0c
    2136:	ad 87       	std	Y+13, r26	; 0x0d
    2138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	6b 85       	ldd	r22, Y+11	; 0x0b
    213c:	7c 85       	ldd	r23, Y+12	; 0x0c
    213e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2140:	9e 85       	ldd	r25, Y+14	; 0x0e
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a ef       	ldi	r20, 0xFA	; 250
    2148:	54 e4       	ldi	r21, 0x44	; 68
    214a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8f 83       	std	Y+7, r24	; 0x07
    2154:	98 87       	std	Y+8, r25	; 0x08
    2156:	a9 87       	std	Y+9, r26	; 0x09
    2158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215a:	6f 81       	ldd	r22, Y+7	; 0x07
    215c:	78 85       	ldd	r23, Y+8	; 0x08
    215e:	89 85       	ldd	r24, Y+9	; 0x09
    2160:	9a 85       	ldd	r25, Y+10	; 0x0a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <LED_Ping_Bong+0x1a6>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <LED_Ping_Bong+0x224>
	else if (__tmp > 65535)
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <LED_Ping_Bong+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	6b 85       	ldd	r22, Y+11	; 0x0b
    2196:	7c 85       	ldd	r23, Y+12	; 0x0c
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <LED_Ping_Bong+0x206>
    21be:	88 ec       	ldi	r24, 0xC8	; 200
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9c 83       	std	Y+4, r25	; 0x04
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LED_Ping_Bong+0x1f4>
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <LED_Ping_Bong+0x1e8>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <LED_Ping_Bong+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <LED_Ping_Bong+0x230>
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			SetPinValue(i,LedPort,LOW);
    220e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 9b 05 	call	0xb36	; 0xb36 <SetPinValue>
		{
			SetPinValue(i,LedPort,HIGH);
			_delay_ms(20);
			SetPinValue(i,LedPort,LOW);
		}
		for(i=PIN6;i>=PIN1;i--)
    2218:	8d 8d       	ldd	r24, Y+29	; 0x1d
    221a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	9e 8f       	std	Y+30, r25	; 0x1e
    2220:	8d 8f       	std	Y+29, r24	; 0x1d
    2222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2224:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2226:	18 16       	cp	r1, r24
    2228:	19 06       	cpc	r1, r25
    222a:	0c f4       	brge	.+2      	; 0x222e <LED_Ping_Bong+0x258>
    222c:	79 cf       	rjmp	.-270    	; 0x2120 <LED_Ping_Bong+0x14a>
	}
	else
	{
		//report error
	}
}
    222e:	6e 96       	adiw	r28, 0x1e	; 30
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <main>:
#include"Led.h"
#include"avr/delay.h"


void main(void)
{
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	ce 57       	subi	r28, 0x7E	; 126
    224e:	d0 40       	sbci	r29, 0x00	; 0
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
	LED_INIT();
    225a:	0e 94 26 09 	call	0x124c	; 0x124c <LED_INIT>
	while(1)
	{
		LED_ON();
    225e:	0e 94 42 09 	call	0x1284	; 0x1284 <LED_ON>
    2262:	fe 01       	movw	r30, r28
    2264:	e5 58       	subi	r30, 0x85	; 133
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a8 e4       	ldi	r26, 0x48	; 72
    226e:	b3 e4       	ldi	r27, 0x43	; 67
    2270:	80 83       	st	Z, r24
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	a2 83       	std	Z+2, r26	; 0x02
    2276:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2278:	8e 01       	movw	r16, r28
    227a:	09 58       	subi	r16, 0x89	; 137
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
    227e:	fe 01       	movw	r30, r28
    2280:	e5 58       	subi	r30, 0x85	; 133
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	60 81       	ld	r22, Z
    2286:	71 81       	ldd	r23, Z+1	; 0x01
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	93 81       	ldd	r25, Z+3	; 0x03
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a ef       	ldi	r20, 0xFA	; 250
    2292:	54 e4       	ldi	r21, 0x44	; 68
    2294:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	f8 01       	movw	r30, r16
    229e:	80 83       	st	Z, r24
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	a2 83       	std	Z+2, r26	; 0x02
    22a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22a6:	fe 01       	movw	r30, r28
    22a8:	e9 58       	subi	r30, 0x89	; 137
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	44 f4       	brge	.+16     	; 0x22d4 <main+0x94>
		__ticks = 1;
    22c4:	fe 01       	movw	r30, r28
    22c6:	eb 58       	subi	r30, 0x8B	; 139
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	64 c0       	rjmp	.+200    	; 0x239c <main+0x15c>
	else if (__tmp > 65535)
    22d4:	fe 01       	movw	r30, r28
    22d6:	e9 58       	subi	r30, 0x89	; 137
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	0c f0       	brlt	.+2      	; 0x22f4 <main+0xb4>
    22f2:	43 c0       	rjmp	.+134    	; 0x237a <main+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	fe 01       	movw	r30, r28
    22f6:	e5 58       	subi	r30, 0x85	; 133
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e2       	ldi	r20, 0x20	; 32
    2308:	51 e4       	ldi	r21, 0x41	; 65
    230a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	8e 01       	movw	r16, r28
    2314:	0b 58       	subi	r16, 0x8B	; 139
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	f8 01       	movw	r30, r16
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
    232a:	1f c0       	rjmp	.+62     	; 0x236a <main+0x12a>
    232c:	fe 01       	movw	r30, r28
    232e:	ed 58       	subi	r30, 0x8D	; 141
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	88 ec       	ldi	r24, 0xC8	; 200
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
    233a:	fe 01       	movw	r30, r28
    233c:	ed 58       	subi	r30, 0x8D	; 141
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <main+0x104>
    2348:	fe 01       	movw	r30, r28
    234a:	ed 58       	subi	r30, 0x8D	; 141
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2352:	de 01       	movw	r26, r28
    2354:	ab 58       	subi	r26, 0x8B	; 139
    2356:	bf 4f       	sbci	r27, 0xFF	; 255
    2358:	fe 01       	movw	r30, r28
    235a:	eb 58       	subi	r30, 0x8B	; 139
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	11 96       	adiw	r26, 0x01	; 1
    2366:	9c 93       	st	X, r25
    2368:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236a:	fe 01       	movw	r30, r28
    236c:	eb 58       	subi	r30, 0x8B	; 139
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	d1 f6       	brne	.-76     	; 0x232c <main+0xec>
    2378:	27 c0       	rjmp	.+78     	; 0x23c8 <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237a:	8e 01       	movw	r16, r28
    237c:	0b 58       	subi	r16, 0x8B	; 139
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	fe 01       	movw	r30, r28
    2382:	e9 58       	subi	r30, 0x89	; 137
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	f8 01       	movw	r30, r16
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	80 83       	st	Z, r24
    239c:	de 01       	movw	r26, r28
    239e:	af 58       	subi	r26, 0x8F	; 143
    23a0:	bf 4f       	sbci	r27, 0xFF	; 255
    23a2:	fe 01       	movw	r30, r28
    23a4:	eb 58       	subi	r30, 0x8B	; 139
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	8d 93       	st	X+, r24
    23ae:	9c 93       	st	X, r25
    23b0:	fe 01       	movw	r30, r28
    23b2:	ef 58       	subi	r30, 0x8F	; 143
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <main+0x17a>
    23be:	fe 01       	movw	r30, r28
    23c0:	ef 58       	subi	r30, 0x8F	; 143
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	80 83       	st	Z, r24
		_delay_ms(200);
		LED_OFF();
    23c8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LED_OFF>
    23cc:	fe 01       	movw	r30, r28
    23ce:	e3 59       	subi	r30, 0x93	; 147
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a8 e4       	ldi	r26, 0x48	; 72
    23d8:	b3 e4       	ldi	r27, 0x43	; 67
    23da:	80 83       	st	Z, r24
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	a2 83       	std	Z+2, r26	; 0x02
    23e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e2:	8e 01       	movw	r16, r28
    23e4:	07 59       	subi	r16, 0x97	; 151
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	fe 01       	movw	r30, r28
    23ea:	e3 59       	subi	r30, 0x93	; 147
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a ef       	ldi	r20, 0xFA	; 250
    23fc:	54 e4       	ldi	r21, 0x44	; 68
    23fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	f8 01       	movw	r30, r16
    2408:	80 83       	st	Z, r24
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	a2 83       	std	Z+2, r26	; 0x02
    240e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2410:	fe 01       	movw	r30, r28
    2412:	e7 59       	subi	r30, 0x97	; 151
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	60 81       	ld	r22, Z
    2418:	71 81       	ldd	r23, Z+1	; 0x01
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    242a:	88 23       	and	r24, r24
    242c:	44 f4       	brge	.+16     	; 0x243e <main+0x1fe>
		__ticks = 1;
    242e:	fe 01       	movw	r30, r28
    2430:	e9 59       	subi	r30, 0x99	; 153
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	80 83       	st	Z, r24
    243c:	64 c0       	rjmp	.+200    	; 0x2506 <main+0x2c6>
	else if (__tmp > 65535)
    243e:	fe 01       	movw	r30, r28
    2440:	e7 59       	subi	r30, 0x97	; 151
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	0c f0       	brlt	.+2      	; 0x245e <main+0x21e>
    245c:	43 c0       	rjmp	.+134    	; 0x24e4 <main+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	fe 01       	movw	r30, r28
    2460:	e3 59       	subi	r30, 0x93	; 147
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	60 81       	ld	r22, Z
    2466:	71 81       	ldd	r23, Z+1	; 0x01
    2468:	82 81       	ldd	r24, Z+2	; 0x02
    246a:	93 81       	ldd	r25, Z+3	; 0x03
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e2       	ldi	r20, 0x20	; 32
    2472:	51 e4       	ldi	r21, 0x41	; 65
    2474:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8e 01       	movw	r16, r28
    247e:	09 59       	subi	r16, 0x99	; 153
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	f8 01       	movw	r30, r16
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
    2494:	1f c0       	rjmp	.+62     	; 0x24d4 <main+0x294>
    2496:	fe 01       	movw	r30, r28
    2498:	eb 59       	subi	r30, 0x9B	; 155
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	88 ec       	ldi	r24, 0xC8	; 200
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    24a4:	fe 01       	movw	r30, r28
    24a6:	eb 59       	subi	r30, 0x9B	; 155
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <main+0x26e>
    24b2:	fe 01       	movw	r30, r28
    24b4:	eb 59       	subi	r30, 0x9B	; 155
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	de 01       	movw	r26, r28
    24be:	a9 59       	subi	r26, 0x99	; 153
    24c0:	bf 4f       	sbci	r27, 0xFF	; 255
    24c2:	fe 01       	movw	r30, r28
    24c4:	e9 59       	subi	r30, 0x99	; 153
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 81       	ld	r24, Z
    24ca:	91 81       	ldd	r25, Z+1	; 0x01
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	11 96       	adiw	r26, 0x01	; 1
    24d0:	9c 93       	st	X, r25
    24d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d4:	fe 01       	movw	r30, r28
    24d6:	e9 59       	subi	r30, 0x99	; 153
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	d1 f6       	brne	.-76     	; 0x2496 <main+0x256>
    24e2:	27 c0       	rjmp	.+78     	; 0x2532 <main+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e4:	8e 01       	movw	r16, r28
    24e6:	09 59       	subi	r16, 0x99	; 153
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	e7 59       	subi	r30, 0x97	; 151
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	f8 01       	movw	r30, r16
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	de 01       	movw	r26, r28
    2508:	ad 59       	subi	r26, 0x9D	; 157
    250a:	bf 4f       	sbci	r27, 0xFF	; 255
    250c:	fe 01       	movw	r30, r28
    250e:	e9 59       	subi	r30, 0x99	; 153
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	8d 93       	st	X+, r24
    2518:	9c 93       	st	X, r25
    251a:	fe 01       	movw	r30, r28
    251c:	ed 59       	subi	r30, 0x9D	; 157
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 81       	ld	r24, Z
    2522:	91 81       	ldd	r25, Z+1	; 0x01
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <main+0x2e4>
    2528:	fe 01       	movw	r30, r28
    252a:	ed 59       	subi	r30, 0x9D	; 157
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
		_delay_ms(200);
		LED_Flashing();
    2532:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <LED_Flashing>
    2536:	fe 01       	movw	r30, r28
    2538:	e1 5a       	subi	r30, 0xA1	; 161
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a8 e4       	ldi	r26, 0x48	; 72
    2542:	b3 e4       	ldi	r27, 0x43	; 67
    2544:	80 83       	st	Z, r24
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	a2 83       	std	Z+2, r26	; 0x02
    254a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	8e 01       	movw	r16, r28
    254e:	05 5a       	subi	r16, 0xA5	; 165
    2550:	1f 4f       	sbci	r17, 0xFF	; 255
    2552:	fe 01       	movw	r30, r28
    2554:	e1 5a       	subi	r30, 0xA1	; 161
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4a ef       	ldi	r20, 0xFA	; 250
    2566:	54 e4       	ldi	r21, 0x44	; 68
    2568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	f8 01       	movw	r30, r16
    2572:	80 83       	st	Z, r24
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	a2 83       	std	Z+2, r26	; 0x02
    2578:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    257a:	fe 01       	movw	r30, r28
    257c:	e5 5a       	subi	r30, 0xA5	; 165
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2594:	88 23       	and	r24, r24
    2596:	44 f4       	brge	.+16     	; 0x25a8 <main+0x368>
		__ticks = 1;
    2598:	fe 01       	movw	r30, r28
    259a:	e7 5a       	subi	r30, 0xA7	; 167
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
    25a6:	64 c0       	rjmp	.+200    	; 0x2670 <main+0x430>
	else if (__tmp > 65535)
    25a8:	fe 01       	movw	r30, r28
    25aa:	e5 5a       	subi	r30, 0xA5	; 165
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	57 e4       	ldi	r21, 0x47	; 71
    25be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	0c f0       	brlt	.+2      	; 0x25c8 <main+0x388>
    25c6:	43 c0       	rjmp	.+134    	; 0x264e <main+0x40e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	fe 01       	movw	r30, r28
    25ca:	e1 5a       	subi	r30, 0xA1	; 161
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e2       	ldi	r20, 0x20	; 32
    25dc:	51 e4       	ldi	r21, 0x41	; 65
    25de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8e 01       	movw	r16, r28
    25e8:	07 5a       	subi	r16, 0xA7	; 167
    25ea:	1f 4f       	sbci	r17, 0xFF	; 255
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	f8 01       	movw	r30, r16
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
    25fe:	1f c0       	rjmp	.+62     	; 0x263e <main+0x3fe>
    2600:	fe 01       	movw	r30, r28
    2602:	e9 5a       	subi	r30, 0xA9	; 169
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	88 ec       	ldi	r24, 0xC8	; 200
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
    260e:	fe 01       	movw	r30, r28
    2610:	e9 5a       	subi	r30, 0xA9	; 169
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <main+0x3d8>
    261c:	fe 01       	movw	r30, r28
    261e:	e9 5a       	subi	r30, 0xA9	; 169
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2626:	de 01       	movw	r26, r28
    2628:	a7 5a       	subi	r26, 0xA7	; 167
    262a:	bf 4f       	sbci	r27, 0xFF	; 255
    262c:	fe 01       	movw	r30, r28
    262e:	e7 5a       	subi	r30, 0xA7	; 167
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	11 96       	adiw	r26, 0x01	; 1
    263a:	9c 93       	st	X, r25
    263c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	fe 01       	movw	r30, r28
    2640:	e7 5a       	subi	r30, 0xA7	; 167
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	d1 f6       	brne	.-76     	; 0x2600 <main+0x3c0>
    264c:	27 c0       	rjmp	.+78     	; 0x269c <main+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	8e 01       	movw	r16, r28
    2650:	07 5a       	subi	r16, 0xA7	; 167
    2652:	1f 4f       	sbci	r17, 0xFF	; 255
    2654:	fe 01       	movw	r30, r28
    2656:	e5 5a       	subi	r30, 0xA5	; 165
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	f8 01       	movw	r30, r16
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
    2670:	de 01       	movw	r26, r28
    2672:	ab 5a       	subi	r26, 0xAB	; 171
    2674:	bf 4f       	sbci	r27, 0xFF	; 255
    2676:	fe 01       	movw	r30, r28
    2678:	e7 5a       	subi	r30, 0xA7	; 167
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	8d 93       	st	X+, r24
    2682:	9c 93       	st	X, r25
    2684:	fe 01       	movw	r30, r28
    2686:	eb 5a       	subi	r30, 0xAB	; 171
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	91 81       	ldd	r25, Z+1	; 0x01
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <main+0x44e>
    2692:	fe 01       	movw	r30, r28
    2694:	eb 5a       	subi	r30, 0xAB	; 171
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	91 83       	std	Z+1, r25	; 0x01
    269a:	80 83       	st	Z, r24
		_delay_ms(200);
		LED_ZigZag();
    269c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LED_ZigZag>
    26a0:	fe 01       	movw	r30, r28
    26a2:	ef 5a       	subi	r30, 0xAF	; 175
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	a8 e4       	ldi	r26, 0x48	; 72
    26ac:	b3 e4       	ldi	r27, 0x43	; 67
    26ae:	80 83       	st	Z, r24
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	a2 83       	std	Z+2, r26	; 0x02
    26b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b6:	8e 01       	movw	r16, r28
    26b8:	03 5b       	subi	r16, 0xB3	; 179
    26ba:	1f 4f       	sbci	r17, 0xFF	; 255
    26bc:	fe 01       	movw	r30, r28
    26be:	ef 5a       	subi	r30, 0xAF	; 175
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	60 81       	ld	r22, Z
    26c4:	71 81       	ldd	r23, Z+1	; 0x01
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a ef       	ldi	r20, 0xFA	; 250
    26d0:	54 e4       	ldi	r21, 0x44	; 68
    26d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	f8 01       	movw	r30, r16
    26dc:	80 83       	st	Z, r24
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	a2 83       	std	Z+2, r26	; 0x02
    26e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26e4:	fe 01       	movw	r30, r28
    26e6:	e3 5b       	subi	r30, 0xB3	; 179
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	60 81       	ld	r22, Z
    26ec:	71 81       	ldd	r23, Z+1	; 0x01
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	93 81       	ldd	r25, Z+3	; 0x03
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e8       	ldi	r20, 0x80	; 128
    26f8:	5f e3       	ldi	r21, 0x3F	; 63
    26fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26fe:	88 23       	and	r24, r24
    2700:	44 f4       	brge	.+16     	; 0x2712 <main+0x4d2>
		__ticks = 1;
    2702:	fe 01       	movw	r30, r28
    2704:	e5 5b       	subi	r30, 0xB5	; 181
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
    2710:	64 c0       	rjmp	.+200    	; 0x27da <main+0x59a>
	else if (__tmp > 65535)
    2712:	fe 01       	movw	r30, r28
    2714:	e3 5b       	subi	r30, 0xB3	; 179
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	60 81       	ld	r22, Z
    271a:	71 81       	ldd	r23, Z+1	; 0x01
    271c:	82 81       	ldd	r24, Z+2	; 0x02
    271e:	93 81       	ldd	r25, Z+3	; 0x03
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	57 e4       	ldi	r21, 0x47	; 71
    2728:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	0c f0       	brlt	.+2      	; 0x2732 <main+0x4f2>
    2730:	43 c0       	rjmp	.+134    	; 0x27b8 <main+0x578>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2732:	fe 01       	movw	r30, r28
    2734:	ef 5a       	subi	r30, 0xAF	; 175
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	60 81       	ld	r22, Z
    273a:	71 81       	ldd	r23, Z+1	; 0x01
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	93 81       	ldd	r25, Z+3	; 0x03
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e2       	ldi	r20, 0x20	; 32
    2746:	51 e4       	ldi	r21, 0x41	; 65
    2748:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	8e 01       	movw	r16, r28
    2752:	05 5b       	subi	r16, 0xB5	; 181
    2754:	1f 4f       	sbci	r17, 0xFF	; 255
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	f8 01       	movw	r30, r16
    2764:	91 83       	std	Z+1, r25	; 0x01
    2766:	80 83       	st	Z, r24
    2768:	1f c0       	rjmp	.+62     	; 0x27a8 <main+0x568>
    276a:	fe 01       	movw	r30, r28
    276c:	e7 5b       	subi	r30, 0xB7	; 183
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	88 ec       	ldi	r24, 0xC8	; 200
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	80 83       	st	Z, r24
    2778:	fe 01       	movw	r30, r28
    277a:	e7 5b       	subi	r30, 0xB7	; 183
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <main+0x542>
    2786:	fe 01       	movw	r30, r28
    2788:	e7 5b       	subi	r30, 0xB7	; 183
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2790:	de 01       	movw	r26, r28
    2792:	a5 5b       	subi	r26, 0xB5	; 181
    2794:	bf 4f       	sbci	r27, 0xFF	; 255
    2796:	fe 01       	movw	r30, r28
    2798:	e5 5b       	subi	r30, 0xB5	; 181
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 81       	ld	r24, Z
    279e:	91 81       	ldd	r25, Z+1	; 0x01
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	11 96       	adiw	r26, 0x01	; 1
    27a4:	9c 93       	st	X, r25
    27a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	fe 01       	movw	r30, r28
    27aa:	e5 5b       	subi	r30, 0xB5	; 181
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	d1 f6       	brne	.-76     	; 0x276a <main+0x52a>
    27b6:	27 c0       	rjmp	.+78     	; 0x2806 <main+0x5c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b8:	8e 01       	movw	r16, r28
    27ba:	05 5b       	subi	r16, 0xB5	; 181
    27bc:	1f 4f       	sbci	r17, 0xFF	; 255
    27be:	fe 01       	movw	r30, r28
    27c0:	e3 5b       	subi	r30, 0xB3	; 179
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	f8 01       	movw	r30, r16
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	80 83       	st	Z, r24
    27da:	de 01       	movw	r26, r28
    27dc:	a9 5b       	subi	r26, 0xB9	; 185
    27de:	bf 4f       	sbci	r27, 0xFF	; 255
    27e0:	fe 01       	movw	r30, r28
    27e2:	e5 5b       	subi	r30, 0xB5	; 181
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	8d 93       	st	X+, r24
    27ec:	9c 93       	st	X, r25
    27ee:	fe 01       	movw	r30, r28
    27f0:	e9 5b       	subi	r30, 0xB9	; 185
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	91 81       	ldd	r25, Z+1	; 0x01
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <main+0x5b8>
    27fc:	fe 01       	movw	r30, r28
    27fe:	e9 5b       	subi	r30, 0xB9	; 185
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	91 83       	std	Z+1, r25	; 0x01
    2804:	80 83       	st	Z, r24
		_delay_ms(200);
		LED_Diverging();
    2806:	0e 94 98 0a 	call	0x1530	; 0x1530 <LED_Diverging>
    280a:	fe 01       	movw	r30, r28
    280c:	ed 5b       	subi	r30, 0xBD	; 189
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a8 e4       	ldi	r26, 0x48	; 72
    2816:	b3 e4       	ldi	r27, 0x43	; 67
    2818:	80 83       	st	Z, r24
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	a2 83       	std	Z+2, r26	; 0x02
    281e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2820:	8e 01       	movw	r16, r28
    2822:	01 5c       	subi	r16, 0xC1	; 193
    2824:	1f 4f       	sbci	r17, 0xFF	; 255
    2826:	fe 01       	movw	r30, r28
    2828:	ed 5b       	subi	r30, 0xBD	; 189
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a ef       	ldi	r20, 0xFA	; 250
    283a:	54 e4       	ldi	r21, 0x44	; 68
    283c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	f8 01       	movw	r30, r16
    2846:	80 83       	st	Z, r24
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	a2 83       	std	Z+2, r26	; 0x02
    284c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    284e:	fe 01       	movw	r30, r28
    2850:	ff 96       	adiw	r30, 0x3f	; 63
    2852:	60 81       	ld	r22, Z
    2854:	71 81       	ldd	r23, Z+1	; 0x01
    2856:	82 81       	ldd	r24, Z+2	; 0x02
    2858:	93 81       	ldd	r25, Z+3	; 0x03
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	2c f4       	brge	.+10     	; 0x2874 <main+0x634>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9e af       	std	Y+62, r25	; 0x3e
    2870:	8d af       	std	Y+61, r24	; 0x3d
    2872:	46 c0       	rjmp	.+140    	; 0x2900 <main+0x6c0>
	else if (__tmp > 65535)
    2874:	fe 01       	movw	r30, r28
    2876:	ff 96       	adiw	r30, 0x3f	; 63
    2878:	60 81       	ld	r22, Z
    287a:	71 81       	ldd	r23, Z+1	; 0x01
    287c:	82 81       	ldd	r24, Z+2	; 0x02
    287e:	93 81       	ldd	r25, Z+3	; 0x03
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	3f ef       	ldi	r19, 0xFF	; 255
    2884:	4f e7       	ldi	r20, 0x7F	; 127
    2886:	57 e4       	ldi	r21, 0x47	; 71
    2888:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    288c:	18 16       	cp	r1, r24
    288e:	64 f5       	brge	.+88     	; 0x28e8 <main+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2890:	fe 01       	movw	r30, r28
    2892:	ed 5b       	subi	r30, 0xBD	; 189
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	60 81       	ld	r22, Z
    2898:	71 81       	ldd	r23, Z+1	; 0x01
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e2       	ldi	r20, 0x20	; 32
    28a4:	51 e4       	ldi	r21, 0x41	; 65
    28a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9e af       	std	Y+62, r25	; 0x3e
    28bc:	8d af       	std	Y+61, r24	; 0x3d
    28be:	0f c0       	rjmp	.+30     	; 0x28de <main+0x69e>
    28c0:	88 ec       	ldi	r24, 0xC8	; 200
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9c af       	std	Y+60, r25	; 0x3c
    28c6:	8b af       	std	Y+59, r24	; 0x3b
    28c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <main+0x68c>
    28d0:	9c af       	std	Y+60, r25	; 0x3c
    28d2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    28d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	9e af       	std	Y+62, r25	; 0x3e
    28dc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28de:	8d ad       	ldd	r24, Y+61	; 0x3d
    28e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	69 f7       	brne	.-38     	; 0x28c0 <main+0x680>
    28e6:	16 c0       	rjmp	.+44     	; 0x2914 <main+0x6d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e8:	fe 01       	movw	r30, r28
    28ea:	ff 96       	adiw	r30, 0x3f	; 63
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9e af       	std	Y+62, r25	; 0x3e
    28fe:	8d af       	std	Y+61, r24	; 0x3d
    2900:	8d ad       	ldd	r24, Y+61	; 0x3d
    2902:	9e ad       	ldd	r25, Y+62	; 0x3e
    2904:	9a af       	std	Y+58, r25	; 0x3a
    2906:	89 af       	std	Y+57, r24	; 0x39
    2908:	89 ad       	ldd	r24, Y+57	; 0x39
    290a:	9a ad       	ldd	r25, Y+58	; 0x3a
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <main+0x6cc>
    2910:	9a af       	std	Y+58, r25	; 0x3a
    2912:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(200);
		LED_Converging();
    2914:	0e 94 b7 0b 	call	0x176e	; 0x176e <LED_Converging>
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a8 e4       	ldi	r26, 0x48	; 72
    291e:	b3 e4       	ldi	r27, 0x43	; 67
    2920:	8d ab       	std	Y+53, r24	; 0x35
    2922:	9e ab       	std	Y+54, r25	; 0x36
    2924:	af ab       	std	Y+55, r26	; 0x37
    2926:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2928:	6d a9       	ldd	r22, Y+53	; 0x35
    292a:	7e a9       	ldd	r23, Y+54	; 0x36
    292c:	8f a9       	ldd	r24, Y+55	; 0x37
    292e:	98 ad       	ldd	r25, Y+56	; 0x38
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	4a ef       	ldi	r20, 0xFA	; 250
    2936:	54 e4       	ldi	r21, 0x44	; 68
    2938:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	89 ab       	std	Y+49, r24	; 0x31
    2942:	9a ab       	std	Y+50, r25	; 0x32
    2944:	ab ab       	std	Y+51, r26	; 0x33
    2946:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2948:	69 a9       	ldd	r22, Y+49	; 0x31
    294a:	7a a9       	ldd	r23, Y+50	; 0x32
    294c:	8b a9       	ldd	r24, Y+51	; 0x33
    294e:	9c a9       	ldd	r25, Y+52	; 0x34
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e8       	ldi	r20, 0x80	; 128
    2956:	5f e3       	ldi	r21, 0x3F	; 63
    2958:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    295c:	88 23       	and	r24, r24
    295e:	2c f4       	brge	.+10     	; 0x296a <main+0x72a>
		__ticks = 1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	98 ab       	std	Y+48, r25	; 0x30
    2966:	8f a7       	std	Y+47, r24	; 0x2f
    2968:	3f c0       	rjmp	.+126    	; 0x29e8 <main+0x7a8>
	else if (__tmp > 65535)
    296a:	69 a9       	ldd	r22, Y+49	; 0x31
    296c:	7a a9       	ldd	r23, Y+50	; 0x32
    296e:	8b a9       	ldd	r24, Y+51	; 0x33
    2970:	9c a9       	ldd	r25, Y+52	; 0x34
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	3f ef       	ldi	r19, 0xFF	; 255
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	57 e4       	ldi	r21, 0x47	; 71
    297a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    297e:	18 16       	cp	r1, r24
    2980:	4c f5       	brge	.+82     	; 0x29d4 <main+0x794>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2982:	6d a9       	ldd	r22, Y+53	; 0x35
    2984:	7e a9       	ldd	r23, Y+54	; 0x36
    2986:	8f a9       	ldd	r24, Y+55	; 0x37
    2988:	98 ad       	ldd	r25, Y+56	; 0x38
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e2       	ldi	r20, 0x20	; 32
    2990:	51 e4       	ldi	r21, 0x41	; 65
    2992:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	bc 01       	movw	r22, r24
    299c:	cd 01       	movw	r24, r26
    299e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	98 ab       	std	Y+48, r25	; 0x30
    29a8:	8f a7       	std	Y+47, r24	; 0x2f
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <main+0x78a>
    29ac:	88 ec       	ldi	r24, 0xC8	; 200
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9e a7       	std	Y+46, r25	; 0x2e
    29b2:	8d a7       	std	Y+45, r24	; 0x2d
    29b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    29b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <main+0x778>
    29bc:	9e a7       	std	Y+46, r25	; 0x2e
    29be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c2:	98 a9       	ldd	r25, Y+48	; 0x30
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	98 ab       	std	Y+48, r25	; 0x30
    29c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    29cc:	98 a9       	ldd	r25, Y+48	; 0x30
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	69 f7       	brne	.-38     	; 0x29ac <main+0x76c>
    29d2:	14 c0       	rjmp	.+40     	; 0x29fc <main+0x7bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d4:	69 a9       	ldd	r22, Y+49	; 0x31
    29d6:	7a a9       	ldd	r23, Y+50	; 0x32
    29d8:	8b a9       	ldd	r24, Y+51	; 0x33
    29da:	9c a9       	ldd	r25, Y+52	; 0x34
    29dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	98 ab       	std	Y+48, r25	; 0x30
    29e6:	8f a7       	std	Y+47, r24	; 0x2f
    29e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ea:	98 a9       	ldd	r25, Y+48	; 0x30
    29ec:	9c a7       	std	Y+44, r25	; 0x2c
    29ee:	8b a7       	std	Y+43, r24	; 0x2b
    29f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <main+0x7b4>
    29f8:	9c a7       	std	Y+44, r25	; 0x2c
    29fa:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(200);
		LED_Shift_Left();
    29fc:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LED_Shift_Left>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a8 e4       	ldi	r26, 0x48	; 72
    2a06:	b3 e4       	ldi	r27, 0x43	; 67
    2a08:	8f a3       	std	Y+39, r24	; 0x27
    2a0a:	98 a7       	std	Y+40, r25	; 0x28
    2a0c:	a9 a7       	std	Y+41, r26	; 0x29
    2a0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a10:	6f a1       	ldd	r22, Y+39	; 0x27
    2a12:	78 a5       	ldd	r23, Y+40	; 0x28
    2a14:	89 a5       	ldd	r24, Y+41	; 0x29
    2a16:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4a ef       	ldi	r20, 0xFA	; 250
    2a1e:	54 e4       	ldi	r21, 0x44	; 68
    2a20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8b a3       	std	Y+35, r24	; 0x23
    2a2a:	9c a3       	std	Y+36, r25	; 0x24
    2a2c:	ad a3       	std	Y+37, r26	; 0x25
    2a2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a30:	6b a1       	ldd	r22, Y+35	; 0x23
    2a32:	7c a1       	ldd	r23, Y+36	; 0x24
    2a34:	8d a1       	ldd	r24, Y+37	; 0x25
    2a36:	9e a1       	ldd	r25, Y+38	; 0x26
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e8       	ldi	r20, 0x80	; 128
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <main+0x812>
		__ticks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9a a3       	std	Y+34, r25	; 0x22
    2a4e:	89 a3       	std	Y+33, r24	; 0x21
    2a50:	3f c0       	rjmp	.+126    	; 0x2ad0 <main+0x890>
	else if (__tmp > 65535)
    2a52:	6b a1       	ldd	r22, Y+35	; 0x23
    2a54:	7c a1       	ldd	r23, Y+36	; 0x24
    2a56:	8d a1       	ldd	r24, Y+37	; 0x25
    2a58:	9e a1       	ldd	r25, Y+38	; 0x26
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	3f ef       	ldi	r19, 0xFF	; 255
    2a5e:	4f e7       	ldi	r20, 0x7F	; 127
    2a60:	57 e4       	ldi	r21, 0x47	; 71
    2a62:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a66:	18 16       	cp	r1, r24
    2a68:	4c f5       	brge	.+82     	; 0x2abc <main+0x87c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a6c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a6e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a70:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e2       	ldi	r20, 0x20	; 32
    2a78:	51 e4       	ldi	r21, 0x41	; 65
    2a7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9a a3       	std	Y+34, r25	; 0x22
    2a90:	89 a3       	std	Y+33, r24	; 0x21
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <main+0x872>
    2a94:	88 ec       	ldi	r24, 0xC8	; 200
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	98 a3       	std	Y+32, r25	; 0x20
    2a9a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a9e:	98 a1       	ldd	r25, Y+32	; 0x20
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <main+0x860>
    2aa4:	98 a3       	std	Y+32, r25	; 0x20
    2aa6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aaa:	9a a1       	ldd	r25, Y+34	; 0x22
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	9a a3       	std	Y+34, r25	; 0x22
    2ab0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	69 f7       	brne	.-38     	; 0x2a94 <main+0x854>
    2aba:	14 c0       	rjmp	.+40     	; 0x2ae4 <main+0x8a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abc:	6b a1       	ldd	r22, Y+35	; 0x23
    2abe:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9a a3       	std	Y+34, r25	; 0x22
    2ace:	89 a3       	std	Y+33, r24	; 0x21
    2ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ad8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ada:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <main+0x89c>
    2ae0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ae2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		LED_shift_Right();
    2ae4:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <LED_shift_Right>
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	a8 e4       	ldi	r26, 0x48	; 72
    2aee:	b3 e4       	ldi	r27, 0x43	; 67
    2af0:	89 8f       	std	Y+25, r24	; 0x19
    2af2:	9a 8f       	std	Y+26, r25	; 0x1a
    2af4:	ab 8f       	std	Y+27, r26	; 0x1b
    2af6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af8:	69 8d       	ldd	r22, Y+25	; 0x19
    2afa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	4a ef       	ldi	r20, 0xFA	; 250
    2b06:	54 e4       	ldi	r21, 0x44	; 68
    2b08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	8d 8b       	std	Y+21, r24	; 0x15
    2b12:	9e 8b       	std	Y+22, r25	; 0x16
    2b14:	af 8b       	std	Y+23, r26	; 0x17
    2b16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b18:	6d 89       	ldd	r22, Y+21	; 0x15
    2b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e8       	ldi	r20, 0x80	; 128
    2b26:	5f e3       	ldi	r21, 0x3F	; 63
    2b28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b2c:	88 23       	and	r24, r24
    2b2e:	2c f4       	brge	.+10     	; 0x2b3a <main+0x8fa>
		__ticks = 1;
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	9c 8b       	std	Y+20, r25	; 0x14
    2b36:	8b 8b       	std	Y+19, r24	; 0x13
    2b38:	3f c0       	rjmp	.+126    	; 0x2bb8 <main+0x978>
	else if (__tmp > 65535)
    2b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b40:	98 8d       	ldd	r25, Y+24	; 0x18
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	3f ef       	ldi	r19, 0xFF	; 255
    2b46:	4f e7       	ldi	r20, 0x7F	; 127
    2b48:	57 e4       	ldi	r21, 0x47	; 71
    2b4a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b4e:	18 16       	cp	r1, r24
    2b50:	4c f5       	brge	.+82     	; 0x2ba4 <main+0x964>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b52:	69 8d       	ldd	r22, Y+25	; 0x19
    2b54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e2       	ldi	r20, 0x20	; 32
    2b60:	51 e4       	ldi	r21, 0x41	; 65
    2b62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	9c 8b       	std	Y+20, r25	; 0x14
    2b78:	8b 8b       	std	Y+19, r24	; 0x13
    2b7a:	0f c0       	rjmp	.+30     	; 0x2b9a <main+0x95a>
    2b7c:	88 ec       	ldi	r24, 0xC8	; 200
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	9a 8b       	std	Y+18, r25	; 0x12
    2b82:	89 8b       	std	Y+17, r24	; 0x11
    2b84:	89 89       	ldd	r24, Y+17	; 0x11
    2b86:	9a 89       	ldd	r25, Y+18	; 0x12
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <main+0x948>
    2b8c:	9a 8b       	std	Y+18, r25	; 0x12
    2b8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b90:	8b 89       	ldd	r24, Y+19	; 0x13
    2b92:	9c 89       	ldd	r25, Y+20	; 0x14
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	9c 8b       	std	Y+20, r25	; 0x14
    2b98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	69 f7       	brne	.-38     	; 0x2b7c <main+0x93c>
    2ba2:	14 c0       	rjmp	.+40     	; 0x2bcc <main+0x98c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    2baa:	98 8d       	ldd	r25, Y+24	; 0x18
    2bac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	9c 8b       	std	Y+20, r25	; 0x14
    2bb6:	8b 8b       	std	Y+19, r24	; 0x13
    2bb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bba:	9c 89       	ldd	r25, Y+20	; 0x14
    2bbc:	98 8b       	std	Y+16, r25	; 0x10
    2bbe:	8f 87       	std	Y+15, r24	; 0x0f
    2bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc2:	98 89       	ldd	r25, Y+16	; 0x10
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <main+0x984>
    2bc8:	98 8b       	std	Y+16, r25	; 0x10
    2bca:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		LED_Ping_Bong();
    2bcc:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <LED_Ping_Bong>
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	a8 e4       	ldi	r26, 0x48	; 72
    2bd6:	b3 e4       	ldi	r27, 0x43	; 67
    2bd8:	8b 87       	std	Y+11, r24	; 0x0b
    2bda:	9c 87       	std	Y+12, r25	; 0x0c
    2bdc:	ad 87       	std	Y+13, r26	; 0x0d
    2bde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	4a ef       	ldi	r20, 0xFA	; 250
    2bee:	54 e4       	ldi	r21, 0x44	; 68
    2bf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	8f 83       	std	Y+7, r24	; 0x07
    2bfa:	98 87       	std	Y+8, r25	; 0x08
    2bfc:	a9 87       	std	Y+9, r26	; 0x09
    2bfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c00:	6f 81       	ldd	r22, Y+7	; 0x07
    2c02:	78 85       	ldd	r23, Y+8	; 0x08
    2c04:	89 85       	ldd	r24, Y+9	; 0x09
    2c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e8       	ldi	r20, 0x80	; 128
    2c0e:	5f e3       	ldi	r21, 0x3F	; 63
    2c10:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c14:	88 23       	and	r24, r24
    2c16:	2c f4       	brge	.+10     	; 0x2c22 <main+0x9e2>
		__ticks = 1;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	9e 83       	std	Y+6, r25	; 0x06
    2c1e:	8d 83       	std	Y+5, r24	; 0x05
    2c20:	3f c0       	rjmp	.+126    	; 0x2ca0 <main+0xa60>
	else if (__tmp > 65535)
    2c22:	6f 81       	ldd	r22, Y+7	; 0x07
    2c24:	78 85       	ldd	r23, Y+8	; 0x08
    2c26:	89 85       	ldd	r24, Y+9	; 0x09
    2c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	3f ef       	ldi	r19, 0xFF	; 255
    2c2e:	4f e7       	ldi	r20, 0x7F	; 127
    2c30:	57 e4       	ldi	r21, 0x47	; 71
    2c32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c36:	18 16       	cp	r1, r24
    2c38:	4c f5       	brge	.+82     	; 0x2c8c <main+0xa4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e2       	ldi	r20, 0x20	; 32
    2c48:	51 e4       	ldi	r21, 0x41	; 65
    2c4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	9e 83       	std	Y+6, r25	; 0x06
    2c60:	8d 83       	std	Y+5, r24	; 0x05
    2c62:	0f c0       	rjmp	.+30     	; 0x2c82 <main+0xa42>
    2c64:	88 ec       	ldi	r24, 0xC8	; 200
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	9c 83       	std	Y+4, r25	; 0x04
    2c6a:	8b 83       	std	Y+3, r24	; 0x03
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <main+0xa30>
    2c74:	9c 83       	std	Y+4, r25	; 0x04
    2c76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	9e 83       	std	Y+6, r25	; 0x06
    2c80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	69 f7       	brne	.-38     	; 0x2c64 <main+0xa24>
    2c8a:	e9 ca       	rjmp	.-2606   	; 0x225e <main+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8e:	78 85       	ldd	r23, Y+8	; 0x08
    2c90:	89 85       	ldd	r24, Y+9	; 0x09
    2c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9e 83       	std	Y+6, r25	; 0x06
    2c9e:	8d 83       	std	Y+5, r24	; 0x05
    2ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca4:	9a 83       	std	Y+2, r25	; 0x02
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	f1 f7       	brne	.-4      	; 0x2cac <main+0xa6c>
    2cb0:	9a 83       	std	Y+2, r25	; 0x02
    2cb2:	89 83       	std	Y+1, r24	; 0x01
    2cb4:	d4 ca       	rjmp	.-2648   	; 0x225e <main+0x1e>

00002cb6 <__prologue_saves__>:
    2cb6:	2f 92       	push	r2
    2cb8:	3f 92       	push	r3
    2cba:	4f 92       	push	r4
    2cbc:	5f 92       	push	r5
    2cbe:	6f 92       	push	r6
    2cc0:	7f 92       	push	r7
    2cc2:	8f 92       	push	r8
    2cc4:	9f 92       	push	r9
    2cc6:	af 92       	push	r10
    2cc8:	bf 92       	push	r11
    2cca:	cf 92       	push	r12
    2ccc:	df 92       	push	r13
    2cce:	ef 92       	push	r14
    2cd0:	ff 92       	push	r15
    2cd2:	0f 93       	push	r16
    2cd4:	1f 93       	push	r17
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	ca 1b       	sub	r28, r26
    2ce0:	db 0b       	sbc	r29, r27
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	09 94       	ijmp

00002cee <__epilogue_restores__>:
    2cee:	2a 88       	ldd	r2, Y+18	; 0x12
    2cf0:	39 88       	ldd	r3, Y+17	; 0x11
    2cf2:	48 88       	ldd	r4, Y+16	; 0x10
    2cf4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cf6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cf8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cfa:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cfc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cfe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d00:	b9 84       	ldd	r11, Y+9	; 0x09
    2d02:	c8 84       	ldd	r12, Y+8	; 0x08
    2d04:	df 80       	ldd	r13, Y+7	; 0x07
    2d06:	ee 80       	ldd	r14, Y+6	; 0x06
    2d08:	fd 80       	ldd	r15, Y+5	; 0x05
    2d0a:	0c 81       	ldd	r16, Y+4	; 0x04
    2d0c:	1b 81       	ldd	r17, Y+3	; 0x03
    2d0e:	aa 81       	ldd	r26, Y+2	; 0x02
    2d10:	b9 81       	ldd	r27, Y+1	; 0x01
    2d12:	ce 0f       	add	r28, r30
    2d14:	d1 1d       	adc	r29, r1
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	ed 01       	movw	r28, r26
    2d22:	08 95       	ret

00002d24 <_exit>:
    2d24:	f8 94       	cli

00002d26 <__stop_program>:
    2d26:	ff cf       	rjmp	.-2      	; 0x2d26 <__stop_program>
