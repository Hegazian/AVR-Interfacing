
DC_Motor_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00004270  00004304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000be  008000be  00004362  2**0
                  ALLOC
  3 .stab         00002a18  00000000  00000000  00004364  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c4e  00000000  00000000  00006d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000079ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ad  00000000  00000000  00007b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000022c4  00000000  00000000  00007cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000125b  00000000  00000000  00009fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001055  00000000  00000000  0000b216  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c26c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ca  00000000  00000000  0000c40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ca  00000000  00000000  0000c6d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cfa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1e 20 	call	0x403c	; 0x403c <main>
      8a:	0c 94 36 21 	jmp	0x426c	; 0x426c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ea       	ldi	r26, 0xA6	; 166
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ea       	ldi	r24, 0xA6	; 166
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 07 21 	jmp	0x420e	; 0x420e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 ea       	ldi	r22, 0xA6	; 166
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__epilogue_restores__+0x20>

000009b2 <__pack_f>:
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	fc 01       	movw	r30, r24
     9be:	e4 80       	ldd	r14, Z+4	; 0x04
     9c0:	f5 80       	ldd	r15, Z+5	; 0x05
     9c2:	06 81       	ldd	r16, Z+6	; 0x06
     9c4:	17 81       	ldd	r17, Z+7	; 0x07
     9c6:	d1 80       	ldd	r13, Z+1	; 0x01
     9c8:	80 81       	ld	r24, Z
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	48 f4       	brcc	.+18     	; 0x9e0 <__pack_f+0x2e>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e1       	ldi	r26, 0x10	; 16
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	e8 2a       	or	r14, r24
     9d8:	f9 2a       	or	r15, r25
     9da:	0a 2b       	or	r16, r26
     9dc:	1b 2b       	or	r17, r27
     9de:	a5 c0       	rjmp	.+330    	; 0xb2a <__pack_f+0x178>
     9e0:	84 30       	cpi	r24, 0x04	; 4
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <__pack_f+0x34>
     9e4:	9f c0       	rjmp	.+318    	; 0xb24 <__pack_f+0x172>
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <__pack_f+0x40>
     9ea:	ee 24       	eor	r14, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	87 01       	movw	r16, r14
     9f0:	05 c0       	rjmp	.+10     	; 0x9fc <__pack_f+0x4a>
     9f2:	e1 14       	cp	r14, r1
     9f4:	f1 04       	cpc	r15, r1
     9f6:	01 05       	cpc	r16, r1
     9f8:	11 05       	cpc	r17, r1
     9fa:	19 f4       	brne	.+6      	; 0xa02 <__pack_f+0x50>
     9fc:	e0 e0       	ldi	r30, 0x00	; 0
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	96 c0       	rjmp	.+300    	; 0xb2e <__pack_f+0x17c>
     a02:	62 81       	ldd	r22, Z+2	; 0x02
     a04:	73 81       	ldd	r23, Z+3	; 0x03
     a06:	9f ef       	ldi	r25, 0xFF	; 255
     a08:	62 38       	cpi	r22, 0x82	; 130
     a0a:	79 07       	cpc	r23, r25
     a0c:	0c f0       	brlt	.+2      	; 0xa10 <__pack_f+0x5e>
     a0e:	5b c0       	rjmp	.+182    	; 0xac6 <__pack_f+0x114>
     a10:	22 e8       	ldi	r18, 0x82	; 130
     a12:	3f ef       	ldi	r19, 0xFF	; 255
     a14:	26 1b       	sub	r18, r22
     a16:	37 0b       	sbc	r19, r23
     a18:	2a 31       	cpi	r18, 0x1A	; 26
     a1a:	31 05       	cpc	r19, r1
     a1c:	2c f0       	brlt	.+10     	; 0xa28 <__pack_f+0x76>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	2a c0       	rjmp	.+84     	; 0xa7c <__pack_f+0xca>
     a28:	b8 01       	movw	r22, r16
     a2a:	a7 01       	movw	r20, r14
     a2c:	02 2e       	mov	r0, r18
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0x86>
     a30:	76 95       	lsr	r23
     a32:	67 95       	ror	r22
     a34:	57 95       	ror	r21
     a36:	47 95       	ror	r20
     a38:	0a 94       	dec	r0
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__pack_f+0x7e>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <__pack_f+0x9c>
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	aa 1f       	adc	r26, r26
     a4c:	bb 1f       	adc	r27, r27
     a4e:	2a 95       	dec	r18
     a50:	d2 f7       	brpl	.-12     	; 0xa46 <__pack_f+0x94>
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	a1 09       	sbc	r26, r1
     a56:	b1 09       	sbc	r27, r1
     a58:	8e 21       	and	r24, r14
     a5a:	9f 21       	and	r25, r15
     a5c:	a0 23       	and	r26, r16
     a5e:	b1 23       	and	r27, r17
     a60:	00 97       	sbiw	r24, 0x00	; 0
     a62:	a1 05       	cpc	r26, r1
     a64:	b1 05       	cpc	r27, r1
     a66:	21 f0       	breq	.+8      	; 0xa70 <__pack_f+0xbe>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	9a 01       	movw	r18, r20
     a72:	ab 01       	movw	r20, r22
     a74:	28 2b       	or	r18, r24
     a76:	39 2b       	or	r19, r25
     a78:	4a 2b       	or	r20, r26
     a7a:	5b 2b       	or	r21, r27
     a7c:	da 01       	movw	r26, r20
     a7e:	c9 01       	movw	r24, r18
     a80:	8f 77       	andi	r24, 0x7F	; 127
     a82:	90 70       	andi	r25, 0x00	; 0
     a84:	a0 70       	andi	r26, 0x00	; 0
     a86:	b0 70       	andi	r27, 0x00	; 0
     a88:	80 34       	cpi	r24, 0x40	; 64
     a8a:	91 05       	cpc	r25, r1
     a8c:	a1 05       	cpc	r26, r1
     a8e:	b1 05       	cpc	r27, r1
     a90:	39 f4       	brne	.+14     	; 0xaa0 <__pack_f+0xee>
     a92:	27 ff       	sbrs	r18, 7
     a94:	09 c0       	rjmp	.+18     	; 0xaa8 <__pack_f+0xf6>
     a96:	20 5c       	subi	r18, 0xC0	; 192
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	4f 4f       	sbci	r20, 0xFF	; 255
     a9c:	5f 4f       	sbci	r21, 0xFF	; 255
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0xf6>
     aa0:	21 5c       	subi	r18, 0xC1	; 193
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	4f 4f       	sbci	r20, 0xFF	; 255
     aa6:	5f 4f       	sbci	r21, 0xFF	; 255
     aa8:	e0 e0       	ldi	r30, 0x00	; 0
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	20 30       	cpi	r18, 0x00	; 0
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	3a 07       	cpc	r19, r26
     ab2:	a0 e0       	ldi	r26, 0x00	; 0
     ab4:	4a 07       	cpc	r20, r26
     ab6:	a0 e4       	ldi	r26, 0x40	; 64
     ab8:	5a 07       	cpc	r21, r26
     aba:	10 f0       	brcs	.+4      	; 0xac0 <__pack_f+0x10e>
     abc:	e1 e0       	ldi	r30, 0x01	; 1
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	79 01       	movw	r14, r18
     ac2:	8a 01       	movw	r16, r20
     ac4:	27 c0       	rjmp	.+78     	; 0xb14 <__pack_f+0x162>
     ac6:	60 38       	cpi	r22, 0x80	; 128
     ac8:	71 05       	cpc	r23, r1
     aca:	64 f5       	brge	.+88     	; 0xb24 <__pack_f+0x172>
     acc:	fb 01       	movw	r30, r22
     ace:	e1 58       	subi	r30, 0x81	; 129
     ad0:	ff 4f       	sbci	r31, 0xFF	; 255
     ad2:	d8 01       	movw	r26, r16
     ad4:	c7 01       	movw	r24, r14
     ad6:	8f 77       	andi	r24, 0x7F	; 127
     ad8:	90 70       	andi	r25, 0x00	; 0
     ada:	a0 70       	andi	r26, 0x00	; 0
     adc:	b0 70       	andi	r27, 0x00	; 0
     ade:	80 34       	cpi	r24, 0x40	; 64
     ae0:	91 05       	cpc	r25, r1
     ae2:	a1 05       	cpc	r26, r1
     ae4:	b1 05       	cpc	r27, r1
     ae6:	39 f4       	brne	.+14     	; 0xaf6 <__pack_f+0x144>
     ae8:	e7 fe       	sbrs	r14, 7
     aea:	0d c0       	rjmp	.+26     	; 0xb06 <__pack_f+0x154>
     aec:	80 e4       	ldi	r24, 0x40	; 64
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	04 c0       	rjmp	.+8      	; 0xafe <__pack_f+0x14c>
     af6:	8f e3       	ldi	r24, 0x3F	; 63
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	e8 0e       	add	r14, r24
     b00:	f9 1e       	adc	r15, r25
     b02:	0a 1f       	adc	r16, r26
     b04:	1b 1f       	adc	r17, r27
     b06:	17 ff       	sbrs	r17, 7
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <__pack_f+0x162>
     b0a:	16 95       	lsr	r17
     b0c:	07 95       	ror	r16
     b0e:	f7 94       	ror	r15
     b10:	e7 94       	ror	r14
     b12:	31 96       	adiw	r30, 0x01	; 1
     b14:	87 e0       	ldi	r24, 0x07	; 7
     b16:	16 95       	lsr	r17
     b18:	07 95       	ror	r16
     b1a:	f7 94       	ror	r15
     b1c:	e7 94       	ror	r14
     b1e:	8a 95       	dec	r24
     b20:	d1 f7       	brne	.-12     	; 0xb16 <__pack_f+0x164>
     b22:	05 c0       	rjmp	.+10     	; 0xb2e <__pack_f+0x17c>
     b24:	ee 24       	eor	r14, r14
     b26:	ff 24       	eor	r15, r15
     b28:	87 01       	movw	r16, r14
     b2a:	ef ef       	ldi	r30, 0xFF	; 255
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	6e 2f       	mov	r22, r30
     b30:	67 95       	ror	r22
     b32:	66 27       	eor	r22, r22
     b34:	67 95       	ror	r22
     b36:	90 2f       	mov	r25, r16
     b38:	9f 77       	andi	r25, 0x7F	; 127
     b3a:	d7 94       	ror	r13
     b3c:	dd 24       	eor	r13, r13
     b3e:	d7 94       	ror	r13
     b40:	8e 2f       	mov	r24, r30
     b42:	86 95       	lsr	r24
     b44:	49 2f       	mov	r20, r25
     b46:	46 2b       	or	r20, r22
     b48:	58 2f       	mov	r21, r24
     b4a:	5d 29       	or	r21, r13
     b4c:	b7 01       	movw	r22, r14
     b4e:	ca 01       	movw	r24, r20
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	08 95       	ret

00000b5c <__unpack_f>:
     b5c:	fc 01       	movw	r30, r24
     b5e:	db 01       	movw	r26, r22
     b60:	40 81       	ld	r20, Z
     b62:	51 81       	ldd	r21, Z+1	; 0x01
     b64:	22 81       	ldd	r18, Z+2	; 0x02
     b66:	62 2f       	mov	r22, r18
     b68:	6f 77       	andi	r22, 0x7F	; 127
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	22 1f       	adc	r18, r18
     b6e:	22 27       	eor	r18, r18
     b70:	22 1f       	adc	r18, r18
     b72:	93 81       	ldd	r25, Z+3	; 0x03
     b74:	89 2f       	mov	r24, r25
     b76:	88 0f       	add	r24, r24
     b78:	82 2b       	or	r24, r18
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	99 1f       	adc	r25, r25
     b80:	99 27       	eor	r25, r25
     b82:	99 1f       	adc	r25, r25
     b84:	11 96       	adiw	r26, 0x01	; 1
     b86:	9c 93       	st	X, r25
     b88:	11 97       	sbiw	r26, 0x01	; 1
     b8a:	21 15       	cp	r18, r1
     b8c:	31 05       	cpc	r19, r1
     b8e:	a9 f5       	brne	.+106    	; 0xbfa <__unpack_f+0x9e>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	11 f4       	brne	.+4      	; 0xb9e <__unpack_f+0x42>
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	37 c0       	rjmp	.+110    	; 0xc0c <__unpack_f+0xb0>
     b9e:	82 e8       	ldi	r24, 0x82	; 130
     ba0:	9f ef       	ldi	r25, 0xFF	; 255
     ba2:	13 96       	adiw	r26, 0x03	; 3
     ba4:	9c 93       	st	X, r25
     ba6:	8e 93       	st	-X, r24
     ba8:	12 97       	sbiw	r26, 0x02	; 2
     baa:	9a 01       	movw	r18, r20
     bac:	ab 01       	movw	r20, r22
     bae:	67 e0       	ldi	r22, 0x07	; 7
     bb0:	22 0f       	add	r18, r18
     bb2:	33 1f       	adc	r19, r19
     bb4:	44 1f       	adc	r20, r20
     bb6:	55 1f       	adc	r21, r21
     bb8:	6a 95       	dec	r22
     bba:	d1 f7       	brne	.-12     	; 0xbb0 <__unpack_f+0x54>
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	0d c0       	rjmp	.+26     	; 0xbdc <__unpack_f+0x80>
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	44 1f       	adc	r20, r20
     bc8:	55 1f       	adc	r21, r21
     bca:	12 96       	adiw	r26, 0x02	; 2
     bcc:	8d 91       	ld	r24, X+
     bce:	9c 91       	ld	r25, X
     bd0:	13 97       	sbiw	r26, 0x03	; 3
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	13 96       	adiw	r26, 0x03	; 3
     bd6:	9c 93       	st	X, r25
     bd8:	8e 93       	st	-X, r24
     bda:	12 97       	sbiw	r26, 0x02	; 2
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	38 07       	cpc	r19, r24
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	48 07       	cpc	r20, r24
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	58 07       	cpc	r21, r24
     bea:	58 f3       	brcs	.-42     	; 0xbc2 <__unpack_f+0x66>
     bec:	14 96       	adiw	r26, 0x04	; 4
     bee:	2d 93       	st	X+, r18
     bf0:	3d 93       	st	X+, r19
     bf2:	4d 93       	st	X+, r20
     bf4:	5c 93       	st	X, r21
     bf6:	17 97       	sbiw	r26, 0x07	; 7
     bf8:	08 95       	ret
     bfa:	2f 3f       	cpi	r18, 0xFF	; 255
     bfc:	31 05       	cpc	r19, r1
     bfe:	79 f4       	brne	.+30     	; 0xc1e <__unpack_f+0xc2>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	19 f4       	brne	.+6      	; 0xc10 <__unpack_f+0xb4>
     c0a:	84 e0       	ldi	r24, 0x04	; 4
     c0c:	8c 93       	st	X, r24
     c0e:	08 95       	ret
     c10:	64 ff       	sbrs	r22, 4
     c12:	03 c0       	rjmp	.+6      	; 0xc1a <__unpack_f+0xbe>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	8c 93       	st	X, r24
     c18:	12 c0       	rjmp	.+36     	; 0xc3e <__unpack_f+0xe2>
     c1a:	1c 92       	st	X, r1
     c1c:	10 c0       	rjmp	.+32     	; 0xc3e <__unpack_f+0xe2>
     c1e:	2f 57       	subi	r18, 0x7F	; 127
     c20:	30 40       	sbci	r19, 0x00	; 0
     c22:	13 96       	adiw	r26, 0x03	; 3
     c24:	3c 93       	st	X, r19
     c26:	2e 93       	st	-X, r18
     c28:	12 97       	sbiw	r26, 0x02	; 2
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	8c 93       	st	X, r24
     c2e:	87 e0       	ldi	r24, 0x07	; 7
     c30:	44 0f       	add	r20, r20
     c32:	55 1f       	adc	r21, r21
     c34:	66 1f       	adc	r22, r22
     c36:	77 1f       	adc	r23, r23
     c38:	8a 95       	dec	r24
     c3a:	d1 f7       	brne	.-12     	; 0xc30 <__unpack_f+0xd4>
     c3c:	70 64       	ori	r23, 0x40	; 64
     c3e:	14 96       	adiw	r26, 0x04	; 4
     c40:	4d 93       	st	X+, r20
     c42:	5d 93       	st	X+, r21
     c44:	6d 93       	st	X+, r22
     c46:	7c 93       	st	X, r23
     c48:	17 97       	sbiw	r26, 0x07	; 7
     c4a:	08 95       	ret

00000c4c <__fpcmp_parts_f>:
     c4c:	1f 93       	push	r17
     c4e:	dc 01       	movw	r26, r24
     c50:	fb 01       	movw	r30, r22
     c52:	9c 91       	ld	r25, X
     c54:	92 30       	cpi	r25, 0x02	; 2
     c56:	08 f4       	brcc	.+2      	; 0xc5a <__fpcmp_parts_f+0xe>
     c58:	47 c0       	rjmp	.+142    	; 0xce8 <__fpcmp_parts_f+0x9c>
     c5a:	80 81       	ld	r24, Z
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <__fpcmp_parts_f+0x16>
     c60:	43 c0       	rjmp	.+134    	; 0xce8 <__fpcmp_parts_f+0x9c>
     c62:	94 30       	cpi	r25, 0x04	; 4
     c64:	51 f4       	brne	.+20     	; 0xc7a <__fpcmp_parts_f+0x2e>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	84 30       	cpi	r24, 0x04	; 4
     c6c:	99 f5       	brne	.+102    	; 0xcd4 <__fpcmp_parts_f+0x88>
     c6e:	81 81       	ldd	r24, Z+1	; 0x01
     c70:	68 2f       	mov	r22, r24
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	61 1b       	sub	r22, r17
     c76:	71 09       	sbc	r23, r1
     c78:	3f c0       	rjmp	.+126    	; 0xcf8 <__fpcmp_parts_f+0xac>
     c7a:	84 30       	cpi	r24, 0x04	; 4
     c7c:	21 f0       	breq	.+8      	; 0xc86 <__fpcmp_parts_f+0x3a>
     c7e:	92 30       	cpi	r25, 0x02	; 2
     c80:	31 f4       	brne	.+12     	; 0xc8e <__fpcmp_parts_f+0x42>
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	b9 f1       	breq	.+110    	; 0xcf4 <__fpcmp_parts_f+0xa8>
     c86:	81 81       	ldd	r24, Z+1	; 0x01
     c88:	88 23       	and	r24, r24
     c8a:	89 f1       	breq	.+98     	; 0xcee <__fpcmp_parts_f+0xa2>
     c8c:	2d c0       	rjmp	.+90     	; 0xce8 <__fpcmp_parts_f+0x9c>
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	1c 91       	ld	r17, X
     c92:	11 97       	sbiw	r26, 0x01	; 1
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	f1 f0       	breq	.+60     	; 0xcd4 <__fpcmp_parts_f+0x88>
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	18 17       	cp	r17, r24
     c9c:	d9 f4       	brne	.+54     	; 0xcd4 <__fpcmp_parts_f+0x88>
     c9e:	12 96       	adiw	r26, 0x02	; 2
     ca0:	2d 91       	ld	r18, X+
     ca2:	3c 91       	ld	r19, X
     ca4:	13 97       	sbiw	r26, 0x03	; 3
     ca6:	82 81       	ldd	r24, Z+2	; 0x02
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	82 17       	cp	r24, r18
     cac:	93 07       	cpc	r25, r19
     cae:	94 f0       	brlt	.+36     	; 0xcd4 <__fpcmp_parts_f+0x88>
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	bc f0       	brlt	.+46     	; 0xce4 <__fpcmp_parts_f+0x98>
     cb6:	14 96       	adiw	r26, 0x04	; 4
     cb8:	8d 91       	ld	r24, X+
     cba:	9d 91       	ld	r25, X+
     cbc:	0d 90       	ld	r0, X+
     cbe:	bc 91       	ld	r27, X
     cc0:	a0 2d       	mov	r26, r0
     cc2:	24 81       	ldd	r18, Z+4	; 0x04
     cc4:	35 81       	ldd	r19, Z+5	; 0x05
     cc6:	46 81       	ldd	r20, Z+6	; 0x06
     cc8:	57 81       	ldd	r21, Z+7	; 0x07
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	4a 07       	cpc	r20, r26
     cd0:	5b 07       	cpc	r21, r27
     cd2:	18 f4       	brcc	.+6      	; 0xcda <__fpcmp_parts_f+0x8e>
     cd4:	11 23       	and	r17, r17
     cd6:	41 f0       	breq	.+16     	; 0xce8 <__fpcmp_parts_f+0x9c>
     cd8:	0a c0       	rjmp	.+20     	; 0xcee <__fpcmp_parts_f+0xa2>
     cda:	82 17       	cp	r24, r18
     cdc:	93 07       	cpc	r25, r19
     cde:	a4 07       	cpc	r26, r20
     ce0:	b5 07       	cpc	r27, r21
     ce2:	40 f4       	brcc	.+16     	; 0xcf4 <__fpcmp_parts_f+0xa8>
     ce4:	11 23       	and	r17, r17
     ce6:	19 f0       	breq	.+6      	; 0xcee <__fpcmp_parts_f+0xa2>
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <__fpcmp_parts_f+0xac>
     cee:	6f ef       	ldi	r22, 0xFF	; 255
     cf0:	7f ef       	ldi	r23, 0xFF	; 255
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <__fpcmp_parts_f+0xac>
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	cb 01       	movw	r24, r22
     cfa:	1f 91       	pop	r17
     cfc:	08 95       	ret

00000cfe <SetPinValue>:
#include"LIB/set_math.h"
#include"DIO.h"
#include"DIO_Registers.h"

void SetPinValue(u8 PinId,u8 PortId,u8 PinValue)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	27 97       	sbiw	r28, 0x07	; 7
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	6a 83       	std	Y+2, r22	; 0x02
     d16:	4b 83       	std	Y+3, r20	; 0x03
	if(PinId <= PIN7 && PortId <= PORTD)
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	88 30       	cpi	r24, 0x08	; 8
     d1c:	08 f0       	brcs	.+2      	; 0xd20 <SetPinValue+0x22>
     d1e:	ee c0       	rjmp	.+476    	; 0xefc <SetPinValue+0x1fe>
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	84 30       	cpi	r24, 0x04	; 4
     d24:	08 f0       	brcs	.+2      	; 0xd28 <SetPinValue+0x2a>
     d26:	ea c0       	rjmp	.+468    	; 0xefc <SetPinValue+0x1fe>
	{
		if(PinValue == HIGH)
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	09 f0       	breq	.+2      	; 0xd30 <SetPinValue+0x32>
     d2e:	6f c0       	rjmp	.+222    	; 0xe0e <SetPinValue+0x110>
		{
			switch(PortId)
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3f 83       	std	Y+7, r19	; 0x07
     d38:	2e 83       	std	Y+6, r18	; 0x06
     d3a:	8e 81       	ldd	r24, Y+6	; 0x06
     d3c:	9f 81       	ldd	r25, Y+7	; 0x07
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	49 f1       	breq	.+82     	; 0xd96 <SetPinValue+0x98>
     d44:	2e 81       	ldd	r18, Y+6	; 0x06
     d46:	3f 81       	ldd	r19, Y+7	; 0x07
     d48:	22 30       	cpi	r18, 0x02	; 2
     d4a:	31 05       	cpc	r19, r1
     d4c:	2c f4       	brge	.+10     	; 0xd58 <SetPinValue+0x5a>
     d4e:	8e 81       	ldd	r24, Y+6	; 0x06
     d50:	9f 81       	ldd	r25, Y+7	; 0x07
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	61 f0       	breq	.+24     	; 0xd6e <SetPinValue+0x70>
     d56:	d2 c0       	rjmp	.+420    	; 0xefc <SetPinValue+0x1fe>
     d58:	2e 81       	ldd	r18, Y+6	; 0x06
     d5a:	3f 81       	ldd	r19, Y+7	; 0x07
     d5c:	22 30       	cpi	r18, 0x02	; 2
     d5e:	31 05       	cpc	r19, r1
     d60:	71 f1       	breq	.+92     	; 0xdbe <SetPinValue+0xc0>
     d62:	8e 81       	ldd	r24, Y+6	; 0x06
     d64:	9f 81       	ldd	r25, Y+7	; 0x07
     d66:	83 30       	cpi	r24, 0x03	; 3
     d68:	91 05       	cpc	r25, r1
     d6a:	e9 f1       	breq	.+122    	; 0xde6 <SetPinValue+0xe8>
     d6c:	c7 c0       	rjmp	.+398    	; 0xefc <SetPinValue+0x1fe>
			{
			case PORTA:	SET_BIT(PORTA_REG,PinId);break;
     d6e:	ab e3       	ldi	r26, 0x3B	; 59
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	eb e3       	ldi	r30, 0x3B	; 59
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <SetPinValue+0x8e>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <SetPinValue+0x8a>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	b3 c0       	rjmp	.+358    	; 0xefc <SetPinValue+0x1fe>
			case PORTB:	SET_BIT(PORTB_REG,PinId);break;
     d96:	a8 e3       	ldi	r26, 0x38	; 56
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e8 e3       	ldi	r30, 0x38	; 56
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <SetPinValue+0xb6>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <SetPinValue+0xb2>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	9f c0       	rjmp	.+318    	; 0xefc <SetPinValue+0x1fe>
			case PORTC:	SET_BIT(PORTC_REG,PinId);break;
     dbe:	a5 e3       	ldi	r26, 0x35	; 53
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e5 e3       	ldi	r30, 0x35	; 53
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <SetPinValue+0xde>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <SetPinValue+0xda>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	8b c0       	rjmp	.+278    	; 0xefc <SetPinValue+0x1fe>
			case PORTD:	SET_BIT(PORTD_REG,PinId);break;
     de6:	a2 e3       	ldi	r26, 0x32	; 50
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e2 e3       	ldi	r30, 0x32	; 50
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <SetPinValue+0x106>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <SetPinValue+0x102>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	77 c0       	rjmp	.+238    	; 0xefc <SetPinValue+0x1fe>
			}
		}
		else if(PinValue == LOW)
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	88 23       	and	r24, r24
     e12:	09 f0       	breq	.+2      	; 0xe16 <SetPinValue+0x118>
     e14:	73 c0       	rjmp	.+230    	; 0xefc <SetPinValue+0x1fe>
		{
			switch(PortId)
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	3d 83       	std	Y+5, r19	; 0x05
     e1e:	2c 83       	std	Y+4, r18	; 0x04
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	9d 81       	ldd	r25, Y+5	; 0x05
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	91 05       	cpc	r25, r1
     e28:	59 f1       	breq	.+86     	; 0xe80 <SetPinValue+0x182>
     e2a:	2c 81       	ldd	r18, Y+4	; 0x04
     e2c:	3d 81       	ldd	r19, Y+5	; 0x05
     e2e:	22 30       	cpi	r18, 0x02	; 2
     e30:	31 05       	cpc	r19, r1
     e32:	2c f4       	brge	.+10     	; 0xe3e <SetPinValue+0x140>
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	9d 81       	ldd	r25, Y+5	; 0x05
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	69 f0       	breq	.+26     	; 0xe56 <SetPinValue+0x158>
     e3c:	5f c0       	rjmp	.+190    	; 0xefc <SetPinValue+0x1fe>
     e3e:	2c 81       	ldd	r18, Y+4	; 0x04
     e40:	3d 81       	ldd	r19, Y+5	; 0x05
     e42:	22 30       	cpi	r18, 0x02	; 2
     e44:	31 05       	cpc	r19, r1
     e46:	89 f1       	breq	.+98     	; 0xeaa <SetPinValue+0x1ac>
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	9d 81       	ldd	r25, Y+5	; 0x05
     e4c:	83 30       	cpi	r24, 0x03	; 3
     e4e:	91 05       	cpc	r25, r1
     e50:	09 f4       	brne	.+2      	; 0xe54 <SetPinValue+0x156>
     e52:	40 c0       	rjmp	.+128    	; 0xed4 <SetPinValue+0x1d6>
     e54:	53 c0       	rjmp	.+166    	; 0xefc <SetPinValue+0x1fe>
			{
			case PORTA:	CLR_BIT(PORTA_REG,PinId);break;
     e56:	ab e3       	ldi	r26, 0x3B	; 59
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <SetPinValue+0x176>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <SetPinValue+0x172>
     e78:	80 95       	com	r24
     e7a:	84 23       	and	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	3e c0       	rjmp	.+124    	; 0xefc <SetPinValue+0x1fe>
			case PORTB:	CLR_BIT(PORTB_REG,PinId);break;
     e80:	a8 e3       	ldi	r26, 0x38	; 56
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e8 e3       	ldi	r30, 0x38	; 56
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <SetPinValue+0x1a0>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <SetPinValue+0x19c>
     ea2:	80 95       	com	r24
     ea4:	84 23       	and	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	29 c0       	rjmp	.+82     	; 0xefc <SetPinValue+0x1fe>
			case PORTC:	CLR_BIT(PORTC_REG,PinId);break;
     eaa:	a5 e3       	ldi	r26, 0x35	; 53
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e3       	ldi	r30, 0x35	; 53
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <SetPinValue+0x1ca>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <SetPinValue+0x1c6>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	14 c0       	rjmp	.+40     	; 0xefc <SetPinValue+0x1fe>
			case PORTD:	CLR_BIT(PORTD_REG,PinId);break;
     ed4:	a2 e3       	ldi	r26, 0x32	; 50
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e2 e3       	ldi	r30, 0x32	; 50
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <SetPinValue+0x1f4>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <SetPinValue+0x1f0>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24

	else
	{
		//report error massage
	}
}
     efc:	27 96       	adiw	r28, 0x07	; 7
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <SetPinMode>:

void SetPinMode(u8 PinId,u8 PortId,u8 PinMode)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	27 97       	sbiw	r28, 0x07	; 7
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	6a 83       	std	Y+2, r22	; 0x02
     f26:	4b 83       	std	Y+3, r20	; 0x03
	if(PinId <= PIN7 && PortId <= PORTD)
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	88 30       	cpi	r24, 0x08	; 8
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <SetPinMode+0x22>
     f2e:	ee c0       	rjmp	.+476    	; 0x110c <SetPinMode+0x1fe>
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	84 30       	cpi	r24, 0x04	; 4
     f34:	08 f0       	brcs	.+2      	; 0xf38 <SetPinMode+0x2a>
     f36:	ea c0       	rjmp	.+468    	; 0x110c <SetPinMode+0x1fe>
	{
		if(PinMode == OUTPUT)
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	09 f0       	breq	.+2      	; 0xf40 <SetPinMode+0x32>
     f3e:	6f c0       	rjmp	.+222    	; 0x101e <SetPinMode+0x110>
		{
			switch(PortId)
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3f 83       	std	Y+7, r19	; 0x07
     f48:	2e 83       	std	Y+6, r18	; 0x06
     f4a:	8e 81       	ldd	r24, Y+6	; 0x06
     f4c:	9f 81       	ldd	r25, Y+7	; 0x07
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	91 05       	cpc	r25, r1
     f52:	49 f1       	breq	.+82     	; 0xfa6 <SetPinMode+0x98>
     f54:	2e 81       	ldd	r18, Y+6	; 0x06
     f56:	3f 81       	ldd	r19, Y+7	; 0x07
     f58:	22 30       	cpi	r18, 0x02	; 2
     f5a:	31 05       	cpc	r19, r1
     f5c:	2c f4       	brge	.+10     	; 0xf68 <SetPinMode+0x5a>
     f5e:	8e 81       	ldd	r24, Y+6	; 0x06
     f60:	9f 81       	ldd	r25, Y+7	; 0x07
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	61 f0       	breq	.+24     	; 0xf7e <SetPinMode+0x70>
     f66:	d2 c0       	rjmp	.+420    	; 0x110c <SetPinMode+0x1fe>
     f68:	2e 81       	ldd	r18, Y+6	; 0x06
     f6a:	3f 81       	ldd	r19, Y+7	; 0x07
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	71 f1       	breq	.+92     	; 0xfce <SetPinMode+0xc0>
     f72:	8e 81       	ldd	r24, Y+6	; 0x06
     f74:	9f 81       	ldd	r25, Y+7	; 0x07
     f76:	83 30       	cpi	r24, 0x03	; 3
     f78:	91 05       	cpc	r25, r1
     f7a:	e9 f1       	breq	.+122    	; 0xff6 <SetPinMode+0xe8>
     f7c:	c7 c0       	rjmp	.+398    	; 0x110c <SetPinMode+0x1fe>
			{
			case PORTA:	SET_BIT(DDRA_REG,PinId);break;
     f7e:	aa e3       	ldi	r26, 0x3A	; 58
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ea e3       	ldi	r30, 0x3A	; 58
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <SetPinMode+0x8e>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <SetPinMode+0x8a>
     fa0:	84 2b       	or	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	b3 c0       	rjmp	.+358    	; 0x110c <SetPinMode+0x1fe>
			case PORTB:	SET_BIT(DDRB_REG,PinId);break;
     fa6:	a7 e3       	ldi	r26, 0x37	; 55
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e7 e3       	ldi	r30, 0x37	; 55
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <SetPinMode+0xb6>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <SetPinMode+0xb2>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	9f c0       	rjmp	.+318    	; 0x110c <SetPinMode+0x1fe>
			case PORTC:	SET_BIT(DDRC_REG,PinId);break;
     fce:	a4 e3       	ldi	r26, 0x34	; 52
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e4 e3       	ldi	r30, 0x34	; 52
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <SetPinMode+0xde>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <SetPinMode+0xda>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	8b c0       	rjmp	.+278    	; 0x110c <SetPinMode+0x1fe>
			case PORTD:	SET_BIT(DDRD_REG,PinId);break;
     ff6:	a1 e3       	ldi	r26, 0x31	; 49
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e1 e3       	ldi	r30, 0x31	; 49
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <SetPinMode+0x106>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <SetPinMode+0x102>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	77 c0       	rjmp	.+238    	; 0x110c <SetPinMode+0x1fe>
			}
		}
		else if(PinMode == INPUT)
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	88 23       	and	r24, r24
    1022:	09 f0       	breq	.+2      	; 0x1026 <SetPinMode+0x118>
    1024:	73 c0       	rjmp	.+230    	; 0x110c <SetPinMode+0x1fe>
		{
			switch(PortId)
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	3d 83       	std	Y+5, r19	; 0x05
    102e:	2c 83       	std	Y+4, r18	; 0x04
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	91 05       	cpc	r25, r1
    1038:	59 f1       	breq	.+86     	; 0x1090 <SetPinMode+0x182>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	2c f4       	brge	.+10     	; 0x104e <SetPinMode+0x140>
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	69 f0       	breq	.+26     	; 0x1066 <SetPinMode+0x158>
    104c:	5f c0       	rjmp	.+190    	; 0x110c <SetPinMode+0x1fe>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	89 f1       	breq	.+98     	; 0x10ba <SetPinMode+0x1ac>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	91 05       	cpc	r25, r1
    1060:	09 f4       	brne	.+2      	; 0x1064 <SetPinMode+0x156>
    1062:	40 c0       	rjmp	.+128    	; 0x10e4 <SetPinMode+0x1d6>
    1064:	53 c0       	rjmp	.+166    	; 0x110c <SetPinMode+0x1fe>
			{
			case PORTA:	CLR_BIT(DDRA_REG,PinId);break;
    1066:	aa e3       	ldi	r26, 0x3A	; 58
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ea e3       	ldi	r30, 0x3A	; 58
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <SetPinMode+0x176>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <SetPinMode+0x172>
    1088:	80 95       	com	r24
    108a:	84 23       	and	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	3e c0       	rjmp	.+124    	; 0x110c <SetPinMode+0x1fe>
			case PORTB:	CLR_BIT(DDRB_REG,PinId);break;
    1090:	a7 e3       	ldi	r26, 0x37	; 55
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e7 e3       	ldi	r30, 0x37	; 55
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <SetPinMode+0x1a0>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <SetPinMode+0x19c>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	29 c0       	rjmp	.+82     	; 0x110c <SetPinMode+0x1fe>
			case PORTC:	CLR_BIT(DDRC_REG,PinId);break;
    10ba:	a4 e3       	ldi	r26, 0x34	; 52
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e4 e3       	ldi	r30, 0x34	; 52
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <SetPinMode+0x1ca>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <SetPinMode+0x1c6>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	14 c0       	rjmp	.+40     	; 0x110c <SetPinMode+0x1fe>
			case PORTD:	CLR_BIT(DDRD_REG,PinId);break;
    10e4:	a1 e3       	ldi	r26, 0x31	; 49
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e1 e3       	ldi	r30, 0x31	; 49
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <SetPinMode+0x1f4>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <SetPinMode+0x1f0>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
	}
		else
		{
			//report error massage
		}
}
    110c:	27 96       	adiw	r28, 0x07	; 7
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <SetPortValue>:


void SetPortValue(u8 PortId,u8 PortValue)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	28 97       	sbiw	r28, 0x08	; 8
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId <= PORTD)
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	84 30       	cpi	r24, 0x04	; 4
    113a:	08 f0       	brcs	.+2      	; 0x113e <SetPortValue+0x20>
    113c:	9a c0       	rjmp	.+308    	; 0x1272 <SetPortValue+0x154>
	{
		if(PortValue == HIGH)
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	99 f5       	brne	.+102    	; 0x11aa <SetPortValue+0x8c>
		{
			switch(PortId)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	38 87       	std	Y+8, r19	; 0x08
    114c:	2f 83       	std	Y+7, r18	; 0x07
    114e:	8f 81       	ldd	r24, Y+7	; 0x07
    1150:	98 85       	ldd	r25, Y+8	; 0x08
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	d1 f0       	breq	.+52     	; 0x118c <SetPortValue+0x6e>
    1158:	2f 81       	ldd	r18, Y+7	; 0x07
    115a:	38 85       	ldd	r19, Y+8	; 0x08
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	2c f4       	brge	.+10     	; 0x116c <SetPortValue+0x4e>
    1162:	8f 81       	ldd	r24, Y+7	; 0x07
    1164:	98 85       	ldd	r25, Y+8	; 0x08
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	61 f0       	breq	.+24     	; 0x1182 <SetPortValue+0x64>
    116a:	83 c0       	rjmp	.+262    	; 0x1272 <SetPortValue+0x154>
    116c:	2f 81       	ldd	r18, Y+7	; 0x07
    116e:	38 85       	ldd	r19, Y+8	; 0x08
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <SetPortValue+0x78>
    1176:	8f 81       	ldd	r24, Y+7	; 0x07
    1178:	98 85       	ldd	r25, Y+8	; 0x08
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	91 05       	cpc	r25, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <SetPortValue+0x82>
    1180:	78 c0       	rjmp	.+240    	; 0x1272 <SetPortValue+0x154>
			{
			case PORTA:	SET_REG(PORTA_REG);break;
    1182:	eb e3       	ldi	r30, 0x3B	; 59
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	80 83       	st	Z, r24
    118a:	73 c0       	rjmp	.+230    	; 0x1272 <SetPortValue+0x154>
			case PORTB:	SET_REG(PORTB_REG);break;
    118c:	e8 e3       	ldi	r30, 0x38	; 56
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	80 83       	st	Z, r24
    1194:	6e c0       	rjmp	.+220    	; 0x1272 <SetPortValue+0x154>
			case PORTC:	SET_REG(PORTC_REG);break;
    1196:	e5 e3       	ldi	r30, 0x35	; 53
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	80 83       	st	Z, r24
    119e:	69 c0       	rjmp	.+210    	; 0x1272 <SetPortValue+0x154>
			case PORTD: SET_REG(PORTD_REG);break;
    11a0:	e2 e3       	ldi	r30, 0x32	; 50
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	80 83       	st	Z, r24
    11a8:	64 c0       	rjmp	.+200    	; 0x1272 <SetPortValue+0x154>
			}
		}
		else if(PortValue == LOW)
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	88 23       	and	r24, r24
    11ae:	79 f5       	brne	.+94     	; 0x120e <SetPortValue+0xf0>
		{
			switch(PortId)
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	3e 83       	std	Y+6, r19	; 0x06
    11b8:	2d 83       	std	Y+5, r18	; 0x05
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	91 05       	cpc	r25, r1
    11c2:	c9 f0       	breq	.+50     	; 0x11f6 <SetPortValue+0xd8>
    11c4:	2d 81       	ldd	r18, Y+5	; 0x05
    11c6:	3e 81       	ldd	r19, Y+6	; 0x06
    11c8:	22 30       	cpi	r18, 0x02	; 2
    11ca:	31 05       	cpc	r19, r1
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <SetPortValue+0xba>
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	61 f0       	breq	.+24     	; 0x11ee <SetPortValue+0xd0>
    11d6:	4d c0       	rjmp	.+154    	; 0x1272 <SetPortValue+0x154>
    11d8:	2d 81       	ldd	r18, Y+5	; 0x05
    11da:	3e 81       	ldd	r19, Y+6	; 0x06
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	71 f0       	breq	.+28     	; 0x11fe <SetPortValue+0xe0>
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	91 05       	cpc	r25, r1
    11ea:	69 f0       	breq	.+26     	; 0x1206 <SetPortValue+0xe8>
    11ec:	42 c0       	rjmp	.+132    	; 0x1272 <SetPortValue+0x154>
			{
			case PORTA:	CLR_REG(PORTA_REG);break;
    11ee:	eb e3       	ldi	r30, 0x3B	; 59
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	10 82       	st	Z, r1
    11f4:	3e c0       	rjmp	.+124    	; 0x1272 <SetPortValue+0x154>
			case PORTB:	CLR_REG(PORTB_REG);break;
    11f6:	e8 e3       	ldi	r30, 0x38	; 56
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	10 82       	st	Z, r1
    11fc:	3a c0       	rjmp	.+116    	; 0x1272 <SetPortValue+0x154>
			case PORTC:	CLR_REG(PORTC_REG);break;
    11fe:	e5 e3       	ldi	r30, 0x35	; 53
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	10 82       	st	Z, r1
    1204:	36 c0       	rjmp	.+108    	; 0x1272 <SetPortValue+0x154>
			case PORTD: CLR_REG(PORTD_REG);break;
    1206:	e2 e3       	ldi	r30, 0x32	; 50
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	10 82       	st	Z, r1
    120c:	32 c0       	rjmp	.+100    	; 0x1272 <SetPortValue+0x154>
			}
		}
		else
		{
			switch(PortId)
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	3c 83       	std	Y+4, r19	; 0x04
    1216:	2b 83       	std	Y+3, r18	; 0x03
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	91 05       	cpc	r25, r1
    1220:	d1 f0       	breq	.+52     	; 0x1256 <SetPortValue+0x138>
    1222:	2b 81       	ldd	r18, Y+3	; 0x03
    1224:	3c 81       	ldd	r19, Y+4	; 0x04
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	2c f4       	brge	.+10     	; 0x1236 <SetPortValue+0x118>
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	61 f0       	breq	.+24     	; 0x124c <SetPortValue+0x12e>
    1234:	1e c0       	rjmp	.+60     	; 0x1272 <SetPortValue+0x154>
    1236:	2b 81       	ldd	r18, Y+3	; 0x03
    1238:	3c 81       	ldd	r19, Y+4	; 0x04
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	81 f0       	breq	.+32     	; 0x1260 <SetPortValue+0x142>
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <SetPortValue+0x14c>
    124a:	13 c0       	rjmp	.+38     	; 0x1272 <SetPortValue+0x154>
			{
				case PORTA:	ASSIGN_REG(PORTA_REG,PortValue);break;
    124c:	eb e3       	ldi	r30, 0x3B	; 59
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	80 83       	st	Z, r24
    1254:	0e c0       	rjmp	.+28     	; 0x1272 <SetPortValue+0x154>
				case PORTB:	ASSIGN_REG(PORTB_REG,PortValue);break;
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	80 83       	st	Z, r24
    125e:	09 c0       	rjmp	.+18     	; 0x1272 <SetPortValue+0x154>
				case PORTC:	ASSIGN_REG(PORTC_REG,PortValue);break;
    1260:	e5 e3       	ldi	r30, 0x35	; 53
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	80 83       	st	Z, r24
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <SetPortValue+0x154>
				case PORTD: ASSIGN_REG(PORTD_REG,PortValue);break;
    126a:	e2 e3       	ldi	r30, 0x32	; 50
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	80 83       	st	Z, r24
	}
	else
	{
		//report error massage
	}
}
    1272:	28 96       	adiw	r28, 0x08	; 8
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <SetPortMode>:

void SetPortMode(u8 PortId,u8 PortMode)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	28 97       	sbiw	r28, 0x08	; 8
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId <= PORTD)
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	84 30       	cpi	r24, 0x04	; 4
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <SetPortMode+0x20>
    12a2:	9a c0       	rjmp	.+308    	; 0x13d8 <SetPortMode+0x154>
	{
		if(PortMode == OUTPUT)
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	99 f5       	brne	.+102    	; 0x1310 <SetPortMode+0x8c>
		{
			switch(PortId)
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	38 87       	std	Y+8, r19	; 0x08
    12b2:	2f 83       	std	Y+7, r18	; 0x07
    12b4:	8f 81       	ldd	r24, Y+7	; 0x07
    12b6:	98 85       	ldd	r25, Y+8	; 0x08
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	d1 f0       	breq	.+52     	; 0x12f2 <SetPortMode+0x6e>
    12be:	2f 81       	ldd	r18, Y+7	; 0x07
    12c0:	38 85       	ldd	r19, Y+8	; 0x08
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <SetPortMode+0x4e>
    12c8:	8f 81       	ldd	r24, Y+7	; 0x07
    12ca:	98 85       	ldd	r25, Y+8	; 0x08
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <SetPortMode+0x64>
    12d0:	83 c0       	rjmp	.+262    	; 0x13d8 <SetPortMode+0x154>
    12d2:	2f 81       	ldd	r18, Y+7	; 0x07
    12d4:	38 85       	ldd	r19, Y+8	; 0x08
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	81 f0       	breq	.+32     	; 0x12fc <SetPortMode+0x78>
    12dc:	8f 81       	ldd	r24, Y+7	; 0x07
    12de:	98 85       	ldd	r25, Y+8	; 0x08
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	91 05       	cpc	r25, r1
    12e4:	81 f0       	breq	.+32     	; 0x1306 <SetPortMode+0x82>
    12e6:	78 c0       	rjmp	.+240    	; 0x13d8 <SetPortMode+0x154>
			{
			case PORTA:	SET_REG(DDRA_REG);break;
    12e8:	ea e3       	ldi	r30, 0x3A	; 58
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	80 83       	st	Z, r24
    12f0:	73 c0       	rjmp	.+230    	; 0x13d8 <SetPortMode+0x154>
			case PORTB:	SET_REG(DDRB_REG);break;
    12f2:	e7 e3       	ldi	r30, 0x37	; 55
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
    12f8:	80 83       	st	Z, r24
    12fa:	6e c0       	rjmp	.+220    	; 0x13d8 <SetPortMode+0x154>
			case PORTC:	SET_REG(DDRC_REG);break;
    12fc:	e4 e3       	ldi	r30, 0x34	; 52
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	80 83       	st	Z, r24
    1304:	69 c0       	rjmp	.+210    	; 0x13d8 <SetPortMode+0x154>
			case PORTD: SET_REG(DDRD_REG);break;
    1306:	e1 e3       	ldi	r30, 0x31	; 49
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	80 83       	st	Z, r24
    130e:	64 c0       	rjmp	.+200    	; 0x13d8 <SetPortMode+0x154>
			}
		}
		else if(PortMode == INPUT)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	88 23       	and	r24, r24
    1314:	79 f5       	brne	.+94     	; 0x1374 <SetPortMode+0xf0>
		{
			switch(PortId)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3e 83       	std	Y+6, r19	; 0x06
    131e:	2d 83       	std	Y+5, r18	; 0x05
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	c9 f0       	breq	.+50     	; 0x135c <SetPortMode+0xd8>
    132a:	2d 81       	ldd	r18, Y+5	; 0x05
    132c:	3e 81       	ldd	r19, Y+6	; 0x06
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <SetPortMode+0xba>
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	61 f0       	breq	.+24     	; 0x1354 <SetPortMode+0xd0>
    133c:	4d c0       	rjmp	.+154    	; 0x13d8 <SetPortMode+0x154>
    133e:	2d 81       	ldd	r18, Y+5	; 0x05
    1340:	3e 81       	ldd	r19, Y+6	; 0x06
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	71 f0       	breq	.+28     	; 0x1364 <SetPortMode+0xe0>
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	69 f0       	breq	.+26     	; 0x136c <SetPortMode+0xe8>
    1352:	42 c0       	rjmp	.+132    	; 0x13d8 <SetPortMode+0x154>
			{
			case PORTA:	CLR_REG(DDRA_REG);break;
    1354:	ea e3       	ldi	r30, 0x3A	; 58
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	10 82       	st	Z, r1
    135a:	3e c0       	rjmp	.+124    	; 0x13d8 <SetPortMode+0x154>
			case PORTB:	CLR_REG(DDRB_REG);break;
    135c:	e7 e3       	ldi	r30, 0x37	; 55
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	10 82       	st	Z, r1
    1362:	3a c0       	rjmp	.+116    	; 0x13d8 <SetPortMode+0x154>
			case PORTC:	CLR_REG(DDRC_REG);break;
    1364:	e4 e3       	ldi	r30, 0x34	; 52
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	10 82       	st	Z, r1
    136a:	36 c0       	rjmp	.+108    	; 0x13d8 <SetPortMode+0x154>
			case PORTD: CLR_REG(DDRD_REG);break;
    136c:	e1 e3       	ldi	r30, 0x31	; 49
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	10 82       	st	Z, r1
    1372:	32 c0       	rjmp	.+100    	; 0x13d8 <SetPortMode+0x154>
			}
		}
		else
		{
			switch(PortId)
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3c 83       	std	Y+4, r19	; 0x04
    137c:	2b 83       	std	Y+3, r18	; 0x03
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	d1 f0       	breq	.+52     	; 0x13bc <SetPortMode+0x138>
    1388:	2b 81       	ldd	r18, Y+3	; 0x03
    138a:	3c 81       	ldd	r19, Y+4	; 0x04
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	2c f4       	brge	.+10     	; 0x139c <SetPortMode+0x118>
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	61 f0       	breq	.+24     	; 0x13b2 <SetPortMode+0x12e>
    139a:	1e c0       	rjmp	.+60     	; 0x13d8 <SetPortMode+0x154>
    139c:	2b 81       	ldd	r18, Y+3	; 0x03
    139e:	3c 81       	ldd	r19, Y+4	; 0x04
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	81 f0       	breq	.+32     	; 0x13c6 <SetPortMode+0x142>
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	91 05       	cpc	r25, r1
    13ae:	81 f0       	breq	.+32     	; 0x13d0 <SetPortMode+0x14c>
    13b0:	13 c0       	rjmp	.+38     	; 0x13d8 <SetPortMode+0x154>
			{
				case PORTA:	ASSIGN_REG(DDRA_REG,PortMode);break;
    13b2:	ea e3       	ldi	r30, 0x3A	; 58
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	80 83       	st	Z, r24
    13ba:	0e c0       	rjmp	.+28     	; 0x13d8 <SetPortMode+0x154>
				case PORTB:	ASSIGN_REG(DDRA_REG,PortMode);break;
    13bc:	ea e3       	ldi	r30, 0x3A	; 58
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	80 83       	st	Z, r24
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <SetPortMode+0x154>
				case PORTC:	ASSIGN_REG(DDRA_REG,PortMode);break;
    13c6:	ea e3       	ldi	r30, 0x3A	; 58
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	80 83       	st	Z, r24
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <SetPortMode+0x154>
				case PORTD: ASSIGN_REG(DDRA_REG,PortMode);break;
    13d0:	ea e3       	ldi	r30, 0x3A	; 58
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	80 83       	st	Z, r24
	}
	else
	{
		//report error massage
	}
}
    13d8:	28 96       	adiw	r28, 0x08	; 8
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <GetPinValue>:

u8 GetPinValue(u8 PinId,u8 PortId)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <GetPinValue+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <GetPinValue+0x8>
    13f2:	0f 92       	push	r0
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	8a 83       	std	Y+2, r24	; 0x02
    13fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	if(PinId <= PIN7 && PortId <= PORTD)
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	88 30       	cpi	r24, 0x08	; 8
    1400:	08 f0       	brcs	.+2      	; 0x1404 <GetPinValue+0x1a>
    1402:	6b c0       	rjmp	.+214    	; 0x14da <GetPinValue+0xf0>
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	84 30       	cpi	r24, 0x04	; 4
    1408:	08 f0       	brcs	.+2      	; 0x140c <GetPinValue+0x22>
    140a:	67 c0       	rjmp	.+206    	; 0x14da <GetPinValue+0xf0>
	{
		switch(PortId)
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	3d 83       	std	Y+5, r19	; 0x05
    1414:	2c 83       	std	Y+4, r18	; 0x04
    1416:	4c 81       	ldd	r20, Y+4	; 0x04
    1418:	5d 81       	ldd	r21, Y+5	; 0x05
    141a:	41 30       	cpi	r20, 0x01	; 1
    141c:	51 05       	cpc	r21, r1
    141e:	41 f1       	breq	.+80     	; 0x1470 <GetPinValue+0x86>
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	9d 81       	ldd	r25, Y+5	; 0x05
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	91 05       	cpc	r25, r1
    1428:	34 f4       	brge	.+12     	; 0x1436 <GetPinValue+0x4c>
    142a:	2c 81       	ldd	r18, Y+4	; 0x04
    142c:	3d 81       	ldd	r19, Y+5	; 0x05
    142e:	21 15       	cp	r18, r1
    1430:	31 05       	cpc	r19, r1
    1432:	61 f0       	breq	.+24     	; 0x144c <GetPinValue+0x62>
    1434:	52 c0       	rjmp	.+164    	; 0x14da <GetPinValue+0xf0>
    1436:	4c 81       	ldd	r20, Y+4	; 0x04
    1438:	5d 81       	ldd	r21, Y+5	; 0x05
    143a:	42 30       	cpi	r20, 0x02	; 2
    143c:	51 05       	cpc	r21, r1
    143e:	51 f1       	breq	.+84     	; 0x1494 <GetPinValue+0xaa>
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	91 05       	cpc	r25, r1
    1448:	b9 f1       	breq	.+110    	; 0x14b8 <GetPinValue+0xce>
    144a:	47 c0       	rjmp	.+142    	; 0x14da <GetPinValue+0xf0>
		{
		case PORTA:	value = GET_BIT(PINA_REG,PinId);break;
    144c:	e9 e3       	ldi	r30, 0x39	; 57
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a9 01       	movw	r20, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <GetPinValue+0x7a>
    1460:	55 95       	asr	r21
    1462:	47 95       	ror	r20
    1464:	8a 95       	dec	r24
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <GetPinValue+0x76>
    1468:	ca 01       	movw	r24, r20
    146a:	81 70       	andi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	35 c0       	rjmp	.+106    	; 0x14da <GetPinValue+0xf0>
		case PORTB:	value = GET_BIT(PINB_REG,PinId);break;
    1470:	e6 e3       	ldi	r30, 0x36	; 54
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a9 01       	movw	r20, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <GetPinValue+0x9e>
    1484:	55 95       	asr	r21
    1486:	47 95       	ror	r20
    1488:	8a 95       	dec	r24
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <GetPinValue+0x9a>
    148c:	ca 01       	movw	r24, r20
    148e:	81 70       	andi	r24, 0x01	; 1
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	23 c0       	rjmp	.+70     	; 0x14da <GetPinValue+0xf0>
		case PORTC: value = GET_BIT(PINC_REG,PinId);break;
    1494:	e3 e3       	ldi	r30, 0x33	; 51
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a9 01       	movw	r20, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <GetPinValue+0xc2>
    14a8:	55 95       	asr	r21
    14aa:	47 95       	ror	r20
    14ac:	8a 95       	dec	r24
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <GetPinValue+0xbe>
    14b0:	ca 01       	movw	r24, r20
    14b2:	81 70       	andi	r24, 0x01	; 1
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	11 c0       	rjmp	.+34     	; 0x14da <GetPinValue+0xf0>
		case PORTD: value = GET_BIT(PIND_REG,PinId);break;
    14b8:	e0 e3       	ldi	r30, 0x30	; 48
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <GetPinValue+0xe6>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <GetPinValue+0xe2>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//report error massage
	}
	return value;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <GetPressedKey>:
					   {'c','0','=','-'}};



u8 GetPressedKey(void)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <GetPressedKey+0x6>
    14f2:	0f 92       	push	r0
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
	u8 col;
	u8 row;
	u8 PressedKey = 0;
    14f8:	19 82       	std	Y+1, r1	; 0x01
	for(col = Col1 ; col <= Col4 ; col++)
    14fa:	1b 82       	std	Y+3, r1	; 0x03
    14fc:	37 c0       	rjmp	.+110    	; 0x156c <GetPressedKey+0x80>
	{
		SetPinValue(col,KPD_PORT,LOW);
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
		for(row = Row1; row <= Row4; row++)
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	8a 83       	std	Y+2, r24	; 0x02
    150c:	24 c0       	rjmp	.+72     	; 0x1556 <GetPressedKey+0x6a>
		{
			if(GetPinValue(row,KPD_PORT) == LOW)
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	0e 94 f5 09 	call	0x13ea	; 0x13ea <GetPinValue>
    1516:	88 23       	and	r24, r24
    1518:	d9 f4       	brne	.+54     	; 0x1550 <GetPressedKey+0x64>
			{
				PressedKey = SwitchValue[row-4][col];
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	ac 01       	movw	r20, r24
    1522:	44 50       	subi	r20, 0x04	; 4
    1524:	50 40       	sbci	r21, 0x00	; 0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	ca 01       	movw	r24, r20
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	82 0f       	add	r24, r18
    1538:	93 1f       	adc	r25, r19
    153a:	fc 01       	movw	r30, r24
    153c:	e2 55       	subi	r30, 0x52	; 82
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	80 81       	ld	r24, Z
    1542:	89 83       	std	Y+1, r24	; 0x01
				while(GetPinValue(row,KPD_PORT) == LOW);
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	0e 94 f5 09 	call	0x13ea	; 0x13ea <GetPinValue>
    154c:	88 23       	and	r24, r24
    154e:	d1 f3       	breq	.-12     	; 0x1544 <GetPressedKey+0x58>
	u8 row;
	u8 PressedKey = 0;
	for(col = Col1 ; col <= Col4 ; col++)
	{
		SetPinValue(col,KPD_PORT,LOW);
		for(row = Row1; row <= Row4; row++)
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	8f 5f       	subi	r24, 0xFF	; 255
    1554:	8a 83       	std	Y+2, r24	; 0x02
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	88 30       	cpi	r24, 0x08	; 8
    155a:	c8 f2       	brcs	.-78     	; 0x150e <GetPressedKey+0x22>
				PressedKey = SwitchValue[row-4][col];
				while(GetPinValue(row,KPD_PORT) == LOW);
				//_delay_ms(50);
			}
		}
		SetPinValue(col,KPD_PORT,HIGH);
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
u8 GetPressedKey(void)
{
	u8 col;
	u8 row;
	u8 PressedKey = 0;
	for(col = Col1 ; col <= Col4 ; col++)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	8b 83       	std	Y+3, r24	; 0x03
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	84 30       	cpi	r24, 0x04	; 4
    1570:	30 f2       	brcs	.-116    	; 0x14fe <GetPressedKey+0x12>
			}
		}
		SetPinValue(col,KPD_PORT,HIGH);
	}

	return PressedKey;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
}
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <LCD_Init>:
#include"DIO.h"
#include"LCD.h"

u8 x = 0;
void LCD_Init(void)
{
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	c6 54       	subi	r28, 0x46	; 70
    158e:	d0 40       	sbci	r29, 0x00	; 0
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	fe 01       	movw	r30, r28
    159c:	ed 5b       	subi	r30, 0xBD	; 189
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	a0 ef       	ldi	r26, 0xF0	; 240
    15a6:	b1 e4       	ldi	r27, 0x41	; 65
    15a8:	80 83       	st	Z, r24
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	a2 83       	std	Z+2, r26	; 0x02
    15ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	8e 01       	movw	r16, r28
    15b2:	01 5c       	subi	r16, 0xC1	; 193
    15b4:	1f 4f       	sbci	r17, 0xFF	; 255
    15b6:	fe 01       	movw	r30, r28
    15b8:	ed 5b       	subi	r30, 0xBD	; 189
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a ef       	ldi	r20, 0xFA	; 250
    15ca:	54 e4       	ldi	r21, 0x44	; 68
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	f8 01       	movw	r30, r16
    15d6:	80 83       	st	Z, r24
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	a2 83       	std	Z+2, r26	; 0x02
    15dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15de:	fe 01       	movw	r30, r28
    15e0:	ff 96       	adiw	r30, 0x3f	; 63
    15e2:	60 81       	ld	r22, Z
    15e4:	71 81       	ldd	r23, Z+1	; 0x01
    15e6:	82 81       	ldd	r24, Z+2	; 0x02
    15e8:	93 81       	ldd	r25, Z+3	; 0x03
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e8       	ldi	r20, 0x80	; 128
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15f6:	88 23       	and	r24, r24
    15f8:	2c f4       	brge	.+10     	; 0x1604 <LCD_Init+0x84>
		__ticks = 1;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9e af       	std	Y+62, r25	; 0x3e
    1600:	8d af       	std	Y+61, r24	; 0x3d
    1602:	46 c0       	rjmp	.+140    	; 0x1690 <LCD_Init+0x110>
	else if (__tmp > 65535)
    1604:	fe 01       	movw	r30, r28
    1606:	ff 96       	adiw	r30, 0x3f	; 63
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	57 e4       	ldi	r21, 0x47	; 71
    1618:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	64 f5       	brge	.+88     	; 0x1678 <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1620:	fe 01       	movw	r30, r28
    1622:	ed 5b       	subi	r30, 0xBD	; 189
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	60 81       	ld	r22, Z
    1628:	71 81       	ldd	r23, Z+1	; 0x01
    162a:	82 81       	ldd	r24, Z+2	; 0x02
    162c:	93 81       	ldd	r25, Z+3	; 0x03
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e2       	ldi	r20, 0x20	; 32
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9e af       	std	Y+62, r25	; 0x3e
    164c:	8d af       	std	Y+61, r24	; 0x3d
    164e:	0f c0       	rjmp	.+30     	; 0x166e <LCD_Init+0xee>
    1650:	88 ec       	ldi	r24, 0xC8	; 200
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9c af       	std	Y+60, r25	; 0x3c
    1656:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1658:	8b ad       	ldd	r24, Y+59	; 0x3b
    165a:	9c ad       	ldd	r25, Y+60	; 0x3c
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <LCD_Init+0xdc>
    1660:	9c af       	std	Y+60, r25	; 0x3c
    1662:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	8d ad       	ldd	r24, Y+61	; 0x3d
    1666:	9e ad       	ldd	r25, Y+62	; 0x3e
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	9e af       	std	Y+62, r25	; 0x3e
    166c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1670:	9e ad       	ldd	r25, Y+62	; 0x3e
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	69 f7       	brne	.-38     	; 0x1650 <LCD_Init+0xd0>
    1676:	16 c0       	rjmp	.+44     	; 0x16a4 <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1678:	fe 01       	movw	r30, r28
    167a:	ff 96       	adiw	r30, 0x3f	; 63
    167c:	60 81       	ld	r22, Z
    167e:	71 81       	ldd	r23, Z+1	; 0x01
    1680:	82 81       	ldd	r24, Z+2	; 0x02
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9e af       	std	Y+62, r25	; 0x3e
    168e:	8d af       	std	Y+61, r24	; 0x3d
    1690:	8d ad       	ldd	r24, Y+61	; 0x3d
    1692:	9e ad       	ldd	r25, Y+62	; 0x3e
    1694:	9a af       	std	Y+58, r25	; 0x3a
    1696:	89 af       	std	Y+57, r24	; 0x39
    1698:	89 ad       	ldd	r24, Y+57	; 0x39
    169a:	9a ad       	ldd	r25, Y+58	; 0x3a
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <LCD_Init+0x11c>
    16a0:	9a af       	std	Y+58, r25	; 0x3a
    16a2:	89 af       	std	Y+57, r24	; 0x39
	/*delay 30 ms to ensure That LCD Initialized and power on*/
	_delay_ms(30);
	/*Return Home*/

	/*Function SET (8bit/2-line/5x7 dot character)*/
	LCD_Function_Set();
    16a4:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_Function_Set>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a0 e8       	ldi	r26, 0x80	; 128
    16ae:	bf e3       	ldi	r27, 0x3F	; 63
    16b0:	8d ab       	std	Y+53, r24	; 0x35
    16b2:	9e ab       	std	Y+54, r25	; 0x36
    16b4:	af ab       	std	Y+55, r26	; 0x37
    16b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	6d a9       	ldd	r22, Y+53	; 0x35
    16ba:	7e a9       	ldd	r23, Y+54	; 0x36
    16bc:	8f a9       	ldd	r24, Y+55	; 0x37
    16be:	98 ad       	ldd	r25, Y+56	; 0x38
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	4a ef       	ldi	r20, 0xFA	; 250
    16c6:	54 e4       	ldi	r21, 0x44	; 68
    16c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	89 ab       	std	Y+49, r24	; 0x31
    16d2:	9a ab       	std	Y+50, r25	; 0x32
    16d4:	ab ab       	std	Y+51, r26	; 0x33
    16d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16d8:	69 a9       	ldd	r22, Y+49	; 0x31
    16da:	7a a9       	ldd	r23, Y+50	; 0x32
    16dc:	8b a9       	ldd	r24, Y+51	; 0x33
    16de:	9c a9       	ldd	r25, Y+52	; 0x34
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <LCD_Init+0x17a>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	98 ab       	std	Y+48, r25	; 0x30
    16f6:	8f a7       	std	Y+47, r24	; 0x2f
    16f8:	3f c0       	rjmp	.+126    	; 0x1778 <LCD_Init+0x1f8>
	else if (__tmp > 65535)
    16fa:	69 a9       	ldd	r22, Y+49	; 0x31
    16fc:	7a a9       	ldd	r23, Y+50	; 0x32
    16fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1700:	9c a9       	ldd	r25, Y+52	; 0x34
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	3f ef       	ldi	r19, 0xFF	; 255
    1706:	4f e7       	ldi	r20, 0x7F	; 127
    1708:	57 e4       	ldi	r21, 0x47	; 71
    170a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    170e:	18 16       	cp	r1, r24
    1710:	4c f5       	brge	.+82     	; 0x1764 <LCD_Init+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	6d a9       	ldd	r22, Y+53	; 0x35
    1714:	7e a9       	ldd	r23, Y+54	; 0x36
    1716:	8f a9       	ldd	r24, Y+55	; 0x37
    1718:	98 ad       	ldd	r25, Y+56	; 0x38
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e2       	ldi	r20, 0x20	; 32
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	98 ab       	std	Y+48, r25	; 0x30
    1738:	8f a7       	std	Y+47, r24	; 0x2f
    173a:	0f c0       	rjmp	.+30     	; 0x175a <LCD_Init+0x1da>
    173c:	88 ec       	ldi	r24, 0xC8	; 200
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9e a7       	std	Y+46, r25	; 0x2e
    1742:	8d a7       	std	Y+45, r24	; 0x2d
    1744:	8d a5       	ldd	r24, Y+45	; 0x2d
    1746:	9e a5       	ldd	r25, Y+46	; 0x2e
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <LCD_Init+0x1c8>
    174c:	9e a7       	std	Y+46, r25	; 0x2e
    174e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	8f a5       	ldd	r24, Y+47	; 0x2f
    1752:	98 a9       	ldd	r25, Y+48	; 0x30
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	98 ab       	std	Y+48, r25	; 0x30
    1758:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175a:	8f a5       	ldd	r24, Y+47	; 0x2f
    175c:	98 a9       	ldd	r25, Y+48	; 0x30
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	69 f7       	brne	.-38     	; 0x173c <LCD_Init+0x1bc>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <LCD_Init+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	69 a9       	ldd	r22, Y+49	; 0x31
    1766:	7a a9       	ldd	r23, Y+50	; 0x32
    1768:	8b a9       	ldd	r24, Y+51	; 0x33
    176a:	9c a9       	ldd	r25, Y+52	; 0x34
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	98 ab       	std	Y+48, r25	; 0x30
    1776:	8f a7       	std	Y+47, r24	; 0x2f
    1778:	8f a5       	ldd	r24, Y+47	; 0x2f
    177a:	98 a9       	ldd	r25, Y+48	; 0x30
    177c:	9c a7       	std	Y+44, r25	; 0x2c
    177e:	8b a7       	std	Y+43, r24	; 0x2b
    1780:	8b a5       	ldd	r24, Y+43	; 0x2b
    1782:	9c a5       	ldd	r25, Y+44	; 0x2c
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <LCD_Init+0x204>
    1788:	9c a7       	std	Y+44, r25	; 0x2c
    178a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/*Display ON/OFF Control*/
	LCD_Display_Control(ON,ON,ON);
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <LCD_Display_Control>
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a0 e8       	ldi	r26, 0x80	; 128
    179c:	bf e3       	ldi	r27, 0x3F	; 63
    179e:	8f a3       	std	Y+39, r24	; 0x27
    17a0:	98 a7       	std	Y+40, r25	; 0x28
    17a2:	a9 a7       	std	Y+41, r26	; 0x29
    17a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a6:	6f a1       	ldd	r22, Y+39	; 0x27
    17a8:	78 a5       	ldd	r23, Y+40	; 0x28
    17aa:	89 a5       	ldd	r24, Y+41	; 0x29
    17ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	4a ef       	ldi	r20, 0xFA	; 250
    17b4:	54 e4       	ldi	r21, 0x44	; 68
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	8b a3       	std	Y+35, r24	; 0x23
    17c0:	9c a3       	std	Y+36, r25	; 0x24
    17c2:	ad a3       	std	Y+37, r26	; 0x25
    17c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17c6:	6b a1       	ldd	r22, Y+35	; 0x23
    17c8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ca:	8d a1       	ldd	r24, Y+37	; 0x25
    17cc:	9e a1       	ldd	r25, Y+38	; 0x26
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e8       	ldi	r20, 0x80	; 128
    17d4:	5f e3       	ldi	r21, 0x3F	; 63
    17d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17da:	88 23       	and	r24, r24
    17dc:	2c f4       	brge	.+10     	; 0x17e8 <LCD_Init+0x268>
		__ticks = 1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	9a a3       	std	Y+34, r25	; 0x22
    17e4:	89 a3       	std	Y+33, r24	; 0x21
    17e6:	3f c0       	rjmp	.+126    	; 0x1866 <LCD_Init+0x2e6>
	else if (__tmp > 65535)
    17e8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ea:	7c a1       	ldd	r23, Y+36	; 0x24
    17ec:	8d a1       	ldd	r24, Y+37	; 0x25
    17ee:	9e a1       	ldd	r25, Y+38	; 0x26
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
    17f4:	4f e7       	ldi	r20, 0x7F	; 127
    17f6:	57 e4       	ldi	r21, 0x47	; 71
    17f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17fc:	18 16       	cp	r1, r24
    17fe:	4c f5       	brge	.+82     	; 0x1852 <LCD_Init+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1800:	6f a1       	ldd	r22, Y+39	; 0x27
    1802:	78 a5       	ldd	r23, Y+40	; 0x28
    1804:	89 a5       	ldd	r24, Y+41	; 0x29
    1806:	9a a5       	ldd	r25, Y+42	; 0x2a
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e2       	ldi	r20, 0x20	; 32
    180e:	51 e4       	ldi	r21, 0x41	; 65
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	bc 01       	movw	r22, r24
    181a:	cd 01       	movw	r24, r26
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	9a a3       	std	Y+34, r25	; 0x22
    1826:	89 a3       	std	Y+33, r24	; 0x21
    1828:	0f c0       	rjmp	.+30     	; 0x1848 <LCD_Init+0x2c8>
    182a:	88 ec       	ldi	r24, 0xC8	; 200
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	98 a3       	std	Y+32, r25	; 0x20
    1830:	8f 8f       	std	Y+31, r24	; 0x1f
    1832:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1834:	98 a1       	ldd	r25, Y+32	; 0x20
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <LCD_Init+0x2b6>
    183a:	98 a3       	std	Y+32, r25	; 0x20
    183c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183e:	89 a1       	ldd	r24, Y+33	; 0x21
    1840:	9a a1       	ldd	r25, Y+34	; 0x22
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	9a a3       	std	Y+34, r25	; 0x22
    1846:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1848:	89 a1       	ldd	r24, Y+33	; 0x21
    184a:	9a a1       	ldd	r25, Y+34	; 0x22
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	69 f7       	brne	.-38     	; 0x182a <LCD_Init+0x2aa>
    1850:	14 c0       	rjmp	.+40     	; 0x187a <LCD_Init+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1852:	6b a1       	ldd	r22, Y+35	; 0x23
    1854:	7c a1       	ldd	r23, Y+36	; 0x24
    1856:	8d a1       	ldd	r24, Y+37	; 0x25
    1858:	9e a1       	ldd	r25, Y+38	; 0x26
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9a a3       	std	Y+34, r25	; 0x22
    1864:	89 a3       	std	Y+33, r24	; 0x21
    1866:	89 a1       	ldd	r24, Y+33	; 0x21
    1868:	9a a1       	ldd	r25, Y+34	; 0x22
    186a:	9e 8f       	std	Y+30, r25	; 0x1e
    186c:	8d 8f       	std	Y+29, r24	; 0x1d
    186e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1870:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <LCD_Init+0x2f2>
    1876:	9e 8f       	std	Y+30, r25	; 0x1e
    1878:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Clear Screen*/
	LCD_Clear_Screen();
    187a:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_Clear_Screen>
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a0 e0       	ldi	r26, 0x00	; 0
    1884:	b0 e4       	ldi	r27, 0x40	; 64
    1886:	89 8f       	std	Y+25, r24	; 0x19
    1888:	9a 8f       	std	Y+26, r25	; 0x1a
    188a:	ab 8f       	std	Y+27, r26	; 0x1b
    188c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188e:	69 8d       	ldd	r22, Y+25	; 0x19
    1890:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1894:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a ef       	ldi	r20, 0xFA	; 250
    189c:	54 e4       	ldi	r21, 0x44	; 68
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	8d 8b       	std	Y+21, r24	; 0x15
    18a8:	9e 8b       	std	Y+22, r25	; 0x16
    18aa:	af 8b       	std	Y+23, r26	; 0x17
    18ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18ae:	6d 89       	ldd	r22, Y+21	; 0x15
    18b0:	7e 89       	ldd	r23, Y+22	; 0x16
    18b2:	8f 89       	ldd	r24, Y+23	; 0x17
    18b4:	98 8d       	ldd	r25, Y+24	; 0x18
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	5f e3       	ldi	r21, 0x3F	; 63
    18be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <LCD_Init+0x350>
		__ticks = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9c 8b       	std	Y+20, r25	; 0x14
    18cc:	8b 8b       	std	Y+19, r24	; 0x13
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <LCD_Init+0x3ce>
	else if (__tmp > 65535)
    18d0:	6d 89       	ldd	r22, Y+21	; 0x15
    18d2:	7e 89       	ldd	r23, Y+22	; 0x16
    18d4:	8f 89       	ldd	r24, Y+23	; 0x17
    18d6:	98 8d       	ldd	r25, Y+24	; 0x18
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	4c f5       	brge	.+82     	; 0x193a <LCD_Init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e2       	ldi	r20, 0x20	; 32
    18f6:	51 e4       	ldi	r21, 0x41	; 65
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9c 8b       	std	Y+20, r25	; 0x14
    190e:	8b 8b       	std	Y+19, r24	; 0x13
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <LCD_Init+0x3b0>
    1912:	88 ec       	ldi	r24, 0xC8	; 200
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9a 8b       	std	Y+18, r25	; 0x12
    1918:	89 8b       	std	Y+17, r24	; 0x11
    191a:	89 89       	ldd	r24, Y+17	; 0x11
    191c:	9a 89       	ldd	r25, Y+18	; 0x12
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_Init+0x39e>
    1922:	9a 8b       	std	Y+18, r25	; 0x12
    1924:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	9c 89       	ldd	r25, Y+20	; 0x14
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	9c 8b       	std	Y+20, r25	; 0x14
    192e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	9c 89       	ldd	r25, Y+20	; 0x14
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	69 f7       	brne	.-38     	; 0x1912 <LCD_Init+0x392>
    1938:	14 c0       	rjmp	.+40     	; 0x1962 <LCD_Init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193a:	6d 89       	ldd	r22, Y+21	; 0x15
    193c:	7e 89       	ldd	r23, Y+22	; 0x16
    193e:	8f 89       	ldd	r24, Y+23	; 0x17
    1940:	98 8d       	ldd	r25, Y+24	; 0x18
    1942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9c 8b       	std	Y+20, r25	; 0x14
    194c:	8b 8b       	std	Y+19, r24	; 0x13
    194e:	8b 89       	ldd	r24, Y+19	; 0x13
    1950:	9c 89       	ldd	r25, Y+20	; 0x14
    1952:	98 8b       	std	Y+16, r25	; 0x10
    1954:	8f 87       	std	Y+15, r24	; 0x0f
    1956:	8f 85       	ldd	r24, Y+15	; 0x0f
    1958:	98 89       	ldd	r25, Y+16	; 0x10
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <LCD_Init+0x3da>
    195e:	98 8b       	std	Y+16, r25	; 0x10
    1960:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/*Entry Mode SET*/
	LCD_EntryMode();
    1962:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_EntryMode>
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a0 e8       	ldi	r26, 0x80	; 128
    196c:	bf e3       	ldi	r27, 0x3F	; 63
    196e:	8b 87       	std	Y+11, r24	; 0x0b
    1970:	9c 87       	std	Y+12, r25	; 0x0c
    1972:	ad 87       	std	Y+13, r26	; 0x0d
    1974:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	6b 85       	ldd	r22, Y+11	; 0x0b
    1978:	7c 85       	ldd	r23, Y+12	; 0x0c
    197a:	8d 85       	ldd	r24, Y+13	; 0x0d
    197c:	9e 85       	ldd	r25, Y+14	; 0x0e
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a ef       	ldi	r20, 0xFA	; 250
    1984:	54 e4       	ldi	r21, 0x44	; 68
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8f 83       	std	Y+7, r24	; 0x07
    1990:	98 87       	std	Y+8, r25	; 0x08
    1992:	a9 87       	std	Y+9, r26	; 0x09
    1994:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1996:	6f 81       	ldd	r22, Y+7	; 0x07
    1998:	78 85       	ldd	r23, Y+8	; 0x08
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <LCD_Init+0x438>
		__ticks = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <LCD_Init+0x4b6>
	else if (__tmp > 65535)
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	4c f5       	brge	.+82     	; 0x1a22 <LCD_Init+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <LCD_Init+0x498>
    19fa:	88 ec       	ldi	r24, 0xC8	; 200
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	8b 83       	std	Y+3, r24	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <LCD_Init+0x486>
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <LCD_Init+0x47a>
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <LCD_Init+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	8d 83       	std	Y+5, r24	; 0x05
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_Init+0x4c2>
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	x = 1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 be 00 	sts	0x00BE, r24

}
    1a50:	ca 5b       	subi	r28, 0xBA	; 186
    1a52:	df 4f       	sbci	r29, 0xFF	; 255
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <LCD_Write_Cmd>:
void LCD_Write_Cmd(u8 cmd)
{
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	cf 56       	subi	r28, 0x6F	; 111
    1a76:	d0 40       	sbci	r29, 0x00	; 0
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	fe 01       	movw	r30, r28
    1a84:	e1 59       	subi	r30, 0x91	; 145
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 83       	st	Z, r24
	/*Set RS Pin to LOW*/
	SetPinValue(RS,Control_Port,LOW);
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	63 e0       	ldi	r22, 0x03	; 3
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	/*Set RW Pin to LOW*/
	SetPinValue(RW,Control_Port,LOW);
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	63 e0       	ldi	r22, 0x03	; 3
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>

	/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
	SetPinValue(PIN4,Data_Port,GET_BIT(cmd,4));
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e1 59       	subi	r30, 0x91	; 145
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	80 81       	ld	r24, Z
    1aa6:	82 95       	swap	r24
    1aa8:	8f 70       	andi	r24, 0x0F	; 15
    1aaa:	98 2f       	mov	r25, r24
    1aac:	91 70       	andi	r25, 0x01	; 1
    1aae:	84 e0       	ldi	r24, 0x04	; 4
    1ab0:	62 e0       	ldi	r22, 0x02	; 2
    1ab2:	49 2f       	mov	r20, r25
    1ab4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	SetPinValue(PIN5,Data_Port,GET_BIT(cmd,5));
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e1 59       	subi	r30, 0x91	; 145
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	80 81       	ld	r24, Z
    1ac0:	82 95       	swap	r24
    1ac2:	86 95       	lsr	r24
    1ac4:	87 70       	andi	r24, 0x07	; 7
    1ac6:	98 2f       	mov	r25, r24
    1ac8:	91 70       	andi	r25, 0x01	; 1
    1aca:	85 e0       	ldi	r24, 0x05	; 5
    1acc:	62 e0       	ldi	r22, 0x02	; 2
    1ace:	49 2f       	mov	r20, r25
    1ad0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	SetPinValue(PIN6,Data_Port,GET_BIT(cmd,6));
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e1 59       	subi	r30, 0x91	; 145
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	82 95       	swap	r24
    1ade:	86 95       	lsr	r24
    1ae0:	86 95       	lsr	r24
    1ae2:	83 70       	andi	r24, 0x03	; 3
    1ae4:	98 2f       	mov	r25, r24
    1ae6:	91 70       	andi	r25, 0x01	; 1
    1ae8:	86 e0       	ldi	r24, 0x06	; 6
    1aea:	62 e0       	ldi	r22, 0x02	; 2
    1aec:	49 2f       	mov	r20, r25
    1aee:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	SetPinValue(PIN7,Data_Port,GET_BIT(cmd,7));
    1af2:	fe 01       	movw	r30, r28
    1af4:	e1 59       	subi	r30, 0x91	; 145
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	98 2f       	mov	r25, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	99 27       	eor	r25, r25
    1b00:	99 1f       	adc	r25, r25
    1b02:	87 e0       	ldi	r24, 0x07	; 7
    1b04:	62 e0       	ldi	r22, 0x02	; 2
    1b06:	49 2f       	mov	r20, r25
    1b08:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>

	/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
	SetPinValue(E,Control_Port,HIGH);
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	63 e0       	ldi	r22, 0x03	; 3
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
    1b16:	fe 01       	movw	r30, r28
    1b18:	e5 59       	subi	r30, 0x95	; 149
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a0 e8       	ldi	r26, 0x80	; 128
    1b22:	bf e3       	ldi	r27, 0x3F	; 63
    1b24:	80 83       	st	Z, r24
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	a2 83       	std	Z+2, r26	; 0x02
    1b2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b2c:	8e 01       	movw	r16, r28
    1b2e:	09 59       	subi	r16, 0x99	; 153
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	fe 01       	movw	r30, r28
    1b34:	e5 59       	subi	r30, 0x95	; 149
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	60 81       	ld	r22, Z
    1b3a:	71 81       	ldd	r23, Z+1	; 0x01
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	2b ea       	ldi	r18, 0xAB	; 171
    1b42:	3a ea       	ldi	r19, 0xAA	; 170
    1b44:	4a e2       	ldi	r20, 0x2A	; 42
    1b46:	50 e4       	ldi	r21, 0x40	; 64
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	f8 01       	movw	r30, r16
    1b52:	80 83       	st	Z, r24
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	a2 83       	std	Z+2, r26	; 0x02
    1b58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e9 59       	subi	r30, 0x99	; 153
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	60 81       	ld	r22, Z
    1b62:	71 81       	ldd	r23, Z+1	; 0x01
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	34 f4       	brge	.+12     	; 0x1b84 <LCD_Write_Cmd+0x11c>
		__ticks = 1;
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ea 59       	subi	r30, 0x9A	; 154
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	80 83       	st	Z, r24
    1b82:	e0 c0       	rjmp	.+448    	; 0x1d44 <LCD_Write_Cmd+0x2dc>
	else if (__tmp > 255)
    1b84:	fe 01       	movw	r30, r28
    1b86:	e9 59       	subi	r30, 0x99	; 153
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	53 e4       	ldi	r21, 0x43	; 67
    1b9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	0c f0       	brlt	.+2      	; 0x1ba4 <LCD_Write_Cmd+0x13c>
    1ba2:	c0 c0       	rjmp	.+384    	; 0x1d24 <LCD_Write_Cmd+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e5 59       	subi	r30, 0x95	; 149
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	4a e7       	ldi	r20, 0x7A	; 122
    1bb8:	54 e4       	ldi	r21, 0x44	; 68
    1bba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ee 59       	subi	r30, 0x9E	; 158
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 83       	st	Z, r24
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	a2 83       	std	Z+2, r26	; 0x02
    1bce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	8e 01       	movw	r16, r28
    1bd2:	02 5a       	subi	r16, 0xA2	; 162
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	ee 59       	subi	r30, 0x9E	; 158
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4a ef       	ldi	r20, 0xFA	; 250
    1bea:	54 e4       	ldi	r21, 0x44	; 68
    1bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	80 83       	st	Z, r24
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	a2 83       	std	Z+2, r26	; 0x02
    1bfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e2 5a       	subi	r30, 0xA2	; 162
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	44 f4       	brge	.+16     	; 0x1c2c <LCD_Write_Cmd+0x1c4>
		__ticks = 1;
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e4 5a       	subi	r30, 0xA4	; 164
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	80 83       	st	Z, r24
    1c2a:	64 c0       	rjmp	.+200    	; 0x1cf4 <LCD_Write_Cmd+0x28c>
	else if (__tmp > 65535)
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e2 5a       	subi	r30, 0xA2	; 162
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	60 81       	ld	r22, Z
    1c34:	71 81       	ldd	r23, Z+1	; 0x01
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	0c f0       	brlt	.+2      	; 0x1c4c <LCD_Write_Cmd+0x1e4>
    1c4a:	43 c0       	rjmp	.+134    	; 0x1cd2 <LCD_Write_Cmd+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	ee 59       	subi	r30, 0x9E	; 158
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e2       	ldi	r20, 0x20	; 32
    1c60:	51 e4       	ldi	r21, 0x41	; 65
    1c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8e 01       	movw	r16, r28
    1c6c:	04 5a       	subi	r16, 0xA4	; 164
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	80 83       	st	Z, r24
    1c82:	1f c0       	rjmp	.+62     	; 0x1cc2 <LCD_Write_Cmd+0x25a>
    1c84:	fe 01       	movw	r30, r28
    1c86:	e6 5a       	subi	r30, 0xA6	; 166
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	88 ec       	ldi	r24, 0xC8	; 200
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
    1c92:	fe 01       	movw	r30, r28
    1c94:	e6 5a       	subi	r30, 0xA6	; 166
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <LCD_Write_Cmd+0x234>
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e6 5a       	subi	r30, 0xA6	; 166
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	91 83       	std	Z+1, r25	; 0x01
    1ca8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1caa:	de 01       	movw	r26, r28
    1cac:	a4 5a       	subi	r26, 0xA4	; 164
    1cae:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e4 5a       	subi	r30, 0xA4	; 164
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	11 96       	adiw	r26, 0x01	; 1
    1cbe:	9c 93       	st	X, r25
    1cc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e4 5a       	subi	r30, 0xA4	; 164
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	d1 f6       	brne	.-76     	; 0x1c84 <LCD_Write_Cmd+0x21c>
    1cd0:	4b c0       	rjmp	.+150    	; 0x1d68 <LCD_Write_Cmd+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd2:	8e 01       	movw	r16, r28
    1cd4:	04 5a       	subi	r16, 0xA4	; 164
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e2 5a       	subi	r30, 0xA2	; 162
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	f8 01       	movw	r30, r16
    1cf0:	91 83       	std	Z+1, r25	; 0x01
    1cf2:	80 83       	st	Z, r24
    1cf4:	de 01       	movw	r26, r28
    1cf6:	a8 5a       	subi	r26, 0xA8	; 168
    1cf8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e4 5a       	subi	r30, 0xA4	; 164
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	80 81       	ld	r24, Z
    1d02:	91 81       	ldd	r25, Z+1	; 0x01
    1d04:	11 96       	adiw	r26, 0x01	; 1
    1d06:	9c 93       	st	X, r25
    1d08:	8e 93       	st	-X, r24
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e8 5a       	subi	r30, 0xA8	; 168
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_Write_Cmd+0x2ac>
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e8 5a       	subi	r30, 0xA8	; 168
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
    1d22:	22 c0       	rjmp	.+68     	; 0x1d68 <LCD_Write_Cmd+0x300>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d24:	8e 01       	movw	r16, r28
    1d26:	0a 59       	subi	r16, 0x9A	; 154
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e9 59       	subi	r30, 0x99	; 153
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	60 81       	ld	r22, Z
    1d32:	71 81       	ldd	r23, Z+1	; 0x01
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	f8 01       	movw	r30, r16
    1d42:	80 83       	st	Z, r24
    1d44:	de 01       	movw	r26, r28
    1d46:	a9 5a       	subi	r26, 0xA9	; 169
    1d48:	bf 4f       	sbci	r27, 0xFF	; 255
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ea 59       	subi	r30, 0x9A	; 154
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d54:	fe 01       	movw	r30, r28
    1d56:	e9 5a       	subi	r30, 0xA9	; 169
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8a 95       	dec	r24
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_Write_Cmd+0x2f4>
    1d60:	fe 01       	movw	r30, r28
    1d62:	e9 5a       	subi	r30, 0xA9	; 169
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 83       	st	Z, r24
	_delay_us(1);
	SetPinValue(E,Control_Port,LOW);
    1d68:	82 e0       	ldi	r24, 0x02	; 2
    1d6a:	63 e0       	ldi	r22, 0x03	; 3
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
    1d72:	fe 01       	movw	r30, r28
    1d74:	ed 5a       	subi	r30, 0xAD	; 173
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 e8       	ldi	r26, 0x80	; 128
    1d7e:	bf e3       	ldi	r27, 0x3F	; 63
    1d80:	80 83       	st	Z, r24
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	a2 83       	std	Z+2, r26	; 0x02
    1d86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d88:	8e 01       	movw	r16, r28
    1d8a:	01 5b       	subi	r16, 0xB1	; 177
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ed 5a       	subi	r30, 0xAD	; 173
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	60 81       	ld	r22, Z
    1d96:	71 81       	ldd	r23, Z+1	; 0x01
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	93 81       	ldd	r25, Z+3	; 0x03
    1d9c:	2b ea       	ldi	r18, 0xAB	; 171
    1d9e:	3a ea       	ldi	r19, 0xAA	; 170
    1da0:	4a e2       	ldi	r20, 0x2A	; 42
    1da2:	50 e4       	ldi	r21, 0x40	; 64
    1da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	f8 01       	movw	r30, r16
    1dae:	80 83       	st	Z, r24
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	a2 83       	std	Z+2, r26	; 0x02
    1db4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db6:	fe 01       	movw	r30, r28
    1db8:	e1 5b       	subi	r30, 0xB1	; 177
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	34 f4       	brge	.+12     	; 0x1de0 <LCD_Write_Cmd+0x378>
		__ticks = 1;
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e2 5b       	subi	r30, 0xB2	; 178
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	80 83       	st	Z, r24
    1dde:	e0 c0       	rjmp	.+448    	; 0x1fa0 <LCD_Write_Cmd+0x538>
	else if (__tmp > 255)
    1de0:	fe 01       	movw	r30, r28
    1de2:	e1 5b       	subi	r30, 0xB1	; 177
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	53 e4       	ldi	r21, 0x43	; 67
    1df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <LCD_Write_Cmd+0x398>
    1dfe:	c0 c0       	rjmp	.+384    	; 0x1f80 <LCD_Write_Cmd+0x518>
	{
		_delay_ms(__us / 1000.0);
    1e00:	fe 01       	movw	r30, r28
    1e02:	ed 5a       	subi	r30, 0xAD	; 173
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	60 81       	ld	r22, Z
    1e08:	71 81       	ldd	r23, Z+1	; 0x01
    1e0a:	82 81       	ldd	r24, Z+2	; 0x02
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	4a e7       	ldi	r20, 0x7A	; 122
    1e14:	54 e4       	ldi	r21, 0x44	; 68
    1e16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e6 5b       	subi	r30, 0xB6	; 182
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 83       	st	Z, r24
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	a2 83       	std	Z+2, r26	; 0x02
    1e2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2c:	8e 01       	movw	r16, r28
    1e2e:	0a 5b       	subi	r16, 0xBA	; 186
    1e30:	1f 4f       	sbci	r17, 0xFF	; 255
    1e32:	fe 01       	movw	r30, r28
    1e34:	e6 5b       	subi	r30, 0xB6	; 182
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a ef       	ldi	r20, 0xFA	; 250
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	f8 01       	movw	r30, r16
    1e52:	80 83       	st	Z, r24
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	a2 83       	std	Z+2, r26	; 0x02
    1e58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ea 5b       	subi	r30, 0xBA	; 186
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	60 81       	ld	r22, Z
    1e62:	71 81       	ldd	r23, Z+1	; 0x01
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e8       	ldi	r20, 0x80	; 128
    1e6e:	5f e3       	ldi	r21, 0x3F	; 63
    1e70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e74:	88 23       	and	r24, r24
    1e76:	44 f4       	brge	.+16     	; 0x1e88 <LCD_Write_Cmd+0x420>
		__ticks = 1;
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ec 5b       	subi	r30, 0xBC	; 188
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	80 83       	st	Z, r24
    1e86:	64 c0       	rjmp	.+200    	; 0x1f50 <LCD_Write_Cmd+0x4e8>
	else if (__tmp > 65535)
    1e88:	fe 01       	movw	r30, r28
    1e8a:	ea 5b       	subi	r30, 0xBA	; 186
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	93 81       	ldd	r25, Z+3	; 0x03
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	0c f0       	brlt	.+2      	; 0x1ea8 <LCD_Write_Cmd+0x440>
    1ea6:	43 c0       	rjmp	.+134    	; 0x1f2e <LCD_Write_Cmd+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e6 5b       	subi	r30, 0xB6	; 182
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	60 81       	ld	r22, Z
    1eb0:	71 81       	ldd	r23, Z+1	; 0x01
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e2       	ldi	r20, 0x20	; 32
    1ebc:	51 e4       	ldi	r21, 0x41	; 65
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	8e 01       	movw	r16, r28
    1ec8:	0c 5b       	subi	r16, 0xBC	; 188
    1eca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ecc:	bc 01       	movw	r22, r24
    1ece:	cd 01       	movw	r24, r26
    1ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	f8 01       	movw	r30, r16
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	80 83       	st	Z, r24
    1ede:	1f c0       	rjmp	.+62     	; 0x1f1e <LCD_Write_Cmd+0x4b6>
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	ee 5b       	subi	r30, 0xBE	; 190
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	88 ec       	ldi	r24, 0xC8	; 200
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ee 5b       	subi	r30, 0xBE	; 190
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <LCD_Write_Cmd+0x490>
    1efc:	fe 01       	movw	r30, r28
    1efe:	ee 5b       	subi	r30, 0xBE	; 190
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	91 83       	std	Z+1, r25	; 0x01
    1f04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f06:	de 01       	movw	r26, r28
    1f08:	ac 5b       	subi	r26, 0xBC	; 188
    1f0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ec 5b       	subi	r30, 0xBC	; 188
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 81       	ld	r24, Z
    1f14:	91 81       	ldd	r25, Z+1	; 0x01
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	11 96       	adiw	r26, 0x01	; 1
    1f1a:	9c 93       	st	X, r25
    1f1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1e:	fe 01       	movw	r30, r28
    1f20:	ec 5b       	subi	r30, 0xBC	; 188
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 81       	ld	r24, Z
    1f26:	91 81       	ldd	r25, Z+1	; 0x01
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	d1 f6       	brne	.-76     	; 0x1ee0 <LCD_Write_Cmd+0x478>
    1f2c:	42 c0       	rjmp	.+132    	; 0x1fb2 <LCD_Write_Cmd+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2e:	8e 01       	movw	r16, r28
    1f30:	0c 5b       	subi	r16, 0xBC	; 188
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	fe 01       	movw	r30, r28
    1f36:	ea 5b       	subi	r30, 0xBA	; 186
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
    1f50:	de 01       	movw	r26, r28
    1f52:	a0 5c       	subi	r26, 0xC0	; 192
    1f54:	bf 4f       	sbci	r27, 0xFF	; 255
    1f56:	fe 01       	movw	r30, r28
    1f58:	ec 5b       	subi	r30, 0xBC	; 188
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	11 96       	adiw	r26, 0x01	; 1
    1f62:	9c 93       	st	X, r25
    1f64:	8e 93       	st	-X, r24
    1f66:	fe 01       	movw	r30, r28
    1f68:	e0 5c       	subi	r30, 0xC0	; 192
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	80 81       	ld	r24, Z
    1f6e:	91 81       	ldd	r25, Z+1	; 0x01
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <LCD_Write_Cmd+0x508>
    1f74:	fe 01       	movw	r30, r28
    1f76:	e0 5c       	subi	r30, 0xC0	; 192
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	19 c0       	rjmp	.+50     	; 0x1fb2 <LCD_Write_Cmd+0x54a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f80:	8e 01       	movw	r16, r28
    1f82:	02 5b       	subi	r16, 0xB2	; 178
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	fe 01       	movw	r30, r28
    1f88:	e1 5b       	subi	r30, 0xB1	; 177
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	60 81       	ld	r22, Z
    1f8e:	71 81       	ldd	r23, Z+1	; 0x01
    1f90:	82 81       	ldd	r24, Z+2	; 0x02
    1f92:	93 81       	ldd	r25, Z+3	; 0x03
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	80 83       	st	Z, r24
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e2 5b       	subi	r30, 0xB2	; 178
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1faa:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fac:	8a 95       	dec	r24
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <LCD_Write_Cmd+0x544>
    1fb0:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	if(x)
    1fb2:	80 91 be 00 	lds	r24, 0x00BE
    1fb6:	88 23       	and	r24, r24
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <LCD_Write_Cmd+0x554>
    1fba:	b8 c1       	rjmp	.+880    	; 0x232c <LCD_Write_Cmd+0x8c4>
	{
		/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
		SetPinValue(PIN4,Data_Port,GET_BIT(cmd,0));
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e1 59       	subi	r30, 0x91	; 145
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	80 81       	ld	r24, Z
    1fc4:	98 2f       	mov	r25, r24
    1fc6:	91 70       	andi	r25, 0x01	; 1
    1fc8:	84 e0       	ldi	r24, 0x04	; 4
    1fca:	62 e0       	ldi	r22, 0x02	; 2
    1fcc:	49 2f       	mov	r20, r25
    1fce:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
		SetPinValue(PIN5,Data_Port,GET_BIT(cmd,1));
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e1 59       	subi	r30, 0x91	; 145
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	86 95       	lsr	r24
    1fdc:	98 2f       	mov	r25, r24
    1fde:	91 70       	andi	r25, 0x01	; 1
    1fe0:	85 e0       	ldi	r24, 0x05	; 5
    1fe2:	62 e0       	ldi	r22, 0x02	; 2
    1fe4:	49 2f       	mov	r20, r25
    1fe6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
		SetPinValue(PIN6,Data_Port,GET_BIT(cmd,2));
    1fea:	fe 01       	movw	r30, r28
    1fec:	e1 59       	subi	r30, 0x91	; 145
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 81       	ld	r24, Z
    1ff2:	86 95       	lsr	r24
    1ff4:	86 95       	lsr	r24
    1ff6:	98 2f       	mov	r25, r24
    1ff8:	91 70       	andi	r25, 0x01	; 1
    1ffa:	86 e0       	ldi	r24, 0x06	; 6
    1ffc:	62 e0       	ldi	r22, 0x02	; 2
    1ffe:	49 2f       	mov	r20, r25
    2000:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
		SetPinValue(PIN7,Data_Port,GET_BIT(cmd,3));
    2004:	fe 01       	movw	r30, r28
    2006:	e1 59       	subi	r30, 0x91	; 145
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	80 81       	ld	r24, Z
    200c:	86 95       	lsr	r24
    200e:	86 95       	lsr	r24
    2010:	86 95       	lsr	r24
    2012:	98 2f       	mov	r25, r24
    2014:	91 70       	andi	r25, 0x01	; 1
    2016:	87 e0       	ldi	r24, 0x07	; 7
    2018:	62 e0       	ldi	r22, 0x02	; 2
    201a:	49 2f       	mov	r20, r25
    201c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>

		/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
		SetPinValue(E,Control_Port,HIGH);
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	63 e0       	ldi	r22, 0x03	; 3
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e8       	ldi	r26, 0x80	; 128
    2030:	bf e3       	ldi	r27, 0x3F	; 63
    2032:	8b af       	std	Y+59, r24	; 0x3b
    2034:	9c af       	std	Y+60, r25	; 0x3c
    2036:	ad af       	std	Y+61, r26	; 0x3d
    2038:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    203a:	6b ad       	ldd	r22, Y+59	; 0x3b
    203c:	7c ad       	ldd	r23, Y+60	; 0x3c
    203e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2040:	9e ad       	ldd	r25, Y+62	; 0x3e
    2042:	2b ea       	ldi	r18, 0xAB	; 171
    2044:	3a ea       	ldi	r19, 0xAA	; 170
    2046:	4a e2       	ldi	r20, 0x2A	; 42
    2048:	50 e4       	ldi	r21, 0x40	; 64
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8f ab       	std	Y+55, r24	; 0x37
    2054:	98 af       	std	Y+56, r25	; 0x38
    2056:	a9 af       	std	Y+57, r26	; 0x39
    2058:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    205a:	6f a9       	ldd	r22, Y+55	; 0x37
    205c:	78 ad       	ldd	r23, Y+56	; 0x38
    205e:	89 ad       	ldd	r24, Y+57	; 0x39
    2060:	9a ad       	ldd	r25, Y+58	; 0x3a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	1c f4       	brge	.+6      	; 0x2078 <LCD_Write_Cmd+0x610>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	8e ab       	std	Y+54, r24	; 0x36
    2076:	91 c0       	rjmp	.+290    	; 0x219a <LCD_Write_Cmd+0x732>
	else if (__tmp > 255)
    2078:	6f a9       	ldd	r22, Y+55	; 0x37
    207a:	78 ad       	ldd	r23, Y+56	; 0x38
    207c:	89 ad       	ldd	r24, Y+57	; 0x39
    207e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	53 e4       	ldi	r21, 0x43	; 67
    2088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	0c f0       	brlt	.+2      	; 0x2092 <LCD_Write_Cmd+0x62a>
    2090:	7b c0       	rjmp	.+246    	; 0x2188 <LCD_Write_Cmd+0x720>
	{
		_delay_ms(__us / 1000.0);
    2092:	6b ad       	ldd	r22, Y+59	; 0x3b
    2094:	7c ad       	ldd	r23, Y+60	; 0x3c
    2096:	8d ad       	ldd	r24, Y+61	; 0x3d
    2098:	9e ad       	ldd	r25, Y+62	; 0x3e
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a e7       	ldi	r20, 0x7A	; 122
    20a0:	54 e4       	ldi	r21, 0x44	; 68
    20a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8a ab       	std	Y+50, r24	; 0x32
    20ac:	9b ab       	std	Y+51, r25	; 0x33
    20ae:	ac ab       	std	Y+52, r26	; 0x34
    20b0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	6a a9       	ldd	r22, Y+50	; 0x32
    20b4:	7b a9       	ldd	r23, Y+51	; 0x33
    20b6:	8c a9       	ldd	r24, Y+52	; 0x34
    20b8:	9d a9       	ldd	r25, Y+53	; 0x35
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a ef       	ldi	r20, 0xFA	; 250
    20c0:	54 e4       	ldi	r21, 0x44	; 68
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8e a7       	std	Y+46, r24	; 0x2e
    20cc:	9f a7       	std	Y+47, r25	; 0x2f
    20ce:	a8 ab       	std	Y+48, r26	; 0x30
    20d0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    20d2:	6e a5       	ldd	r22, Y+46	; 0x2e
    20d4:	7f a5       	ldd	r23, Y+47	; 0x2f
    20d6:	88 a9       	ldd	r24, Y+48	; 0x30
    20d8:	99 a9       	ldd	r25, Y+49	; 0x31
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <LCD_Write_Cmd+0x68c>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9d a7       	std	Y+45, r25	; 0x2d
    20f0:	8c a7       	std	Y+44, r24	; 0x2c
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <LCD_Write_Cmd+0x70a>
	else if (__tmp > 65535)
    20f4:	6e a5       	ldd	r22, Y+46	; 0x2e
    20f6:	7f a5       	ldd	r23, Y+47	; 0x2f
    20f8:	88 a9       	ldd	r24, Y+48	; 0x30
    20fa:	99 a9       	ldd	r25, Y+49	; 0x31
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	4c f5       	brge	.+82     	; 0x215e <LCD_Write_Cmd+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	6a a9       	ldd	r22, Y+50	; 0x32
    210e:	7b a9       	ldd	r23, Y+51	; 0x33
    2110:	8c a9       	ldd	r24, Y+52	; 0x34
    2112:	9d a9       	ldd	r25, Y+53	; 0x35
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9d a7       	std	Y+45, r25	; 0x2d
    2132:	8c a7       	std	Y+44, r24	; 0x2c
    2134:	0f c0       	rjmp	.+30     	; 0x2154 <LCD_Write_Cmd+0x6ec>
    2136:	88 ec       	ldi	r24, 0xC8	; 200
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9b a7       	std	Y+43, r25	; 0x2b
    213c:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    213e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2140:	9b a5       	ldd	r25, Y+43	; 0x2b
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_Write_Cmd+0x6da>
    2146:	9b a7       	std	Y+43, r25	; 0x2b
    2148:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	8c a5       	ldd	r24, Y+44	; 0x2c
    214c:	9d a5       	ldd	r25, Y+45	; 0x2d
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	9d a7       	std	Y+45, r25	; 0x2d
    2152:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	8c a5       	ldd	r24, Y+44	; 0x2c
    2156:	9d a5       	ldd	r25, Y+45	; 0x2d
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f7       	brne	.-38     	; 0x2136 <LCD_Write_Cmd+0x6ce>
    215c:	24 c0       	rjmp	.+72     	; 0x21a6 <LCD_Write_Cmd+0x73e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2160:	7f a5       	ldd	r23, Y+47	; 0x2f
    2162:	88 a9       	ldd	r24, Y+48	; 0x30
    2164:	99 a9       	ldd	r25, Y+49	; 0x31
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9d a7       	std	Y+45, r25	; 0x2d
    2170:	8c a7       	std	Y+44, r24	; 0x2c
    2172:	8c a5       	ldd	r24, Y+44	; 0x2c
    2174:	9d a5       	ldd	r25, Y+45	; 0x2d
    2176:	99 a7       	std	Y+41, r25	; 0x29
    2178:	88 a7       	std	Y+40, r24	; 0x28
    217a:	88 a5       	ldd	r24, Y+40	; 0x28
    217c:	99 a5       	ldd	r25, Y+41	; 0x29
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <LCD_Write_Cmd+0x716>
    2182:	99 a7       	std	Y+41, r25	; 0x29
    2184:	88 a7       	std	Y+40, r24	; 0x28
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <LCD_Write_Cmd+0x73e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2188:	6f a9       	ldd	r22, Y+55	; 0x37
    218a:	78 ad       	ldd	r23, Y+56	; 0x38
    218c:	89 ad       	ldd	r24, Y+57	; 0x39
    218e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8e ab       	std	Y+54, r24	; 0x36
    219a:	8e a9       	ldd	r24, Y+54	; 0x36
    219c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    219e:	8f a1       	ldd	r24, Y+39	; 0x27
    21a0:	8a 95       	dec	r24
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <LCD_Write_Cmd+0x738>
    21a4:	8f a3       	std	Y+39, r24	; 0x27
		_delay_us(1);
		SetPinValue(E,Control_Port,LOW);
    21a6:	82 e0       	ldi	r24, 0x02	; 2
    21a8:	63 e0       	ldi	r22, 0x03	; 3
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a0 e8       	ldi	r26, 0x80	; 128
    21b6:	bf e3       	ldi	r27, 0x3F	; 63
    21b8:	8b a3       	std	Y+35, r24	; 0x23
    21ba:	9c a3       	std	Y+36, r25	; 0x24
    21bc:	ad a3       	std	Y+37, r26	; 0x25
    21be:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21c0:	6b a1       	ldd	r22, Y+35	; 0x23
    21c2:	7c a1       	ldd	r23, Y+36	; 0x24
    21c4:	8d a1       	ldd	r24, Y+37	; 0x25
    21c6:	9e a1       	ldd	r25, Y+38	; 0x26
    21c8:	2b ea       	ldi	r18, 0xAB	; 171
    21ca:	3a ea       	ldi	r19, 0xAA	; 170
    21cc:	4a e2       	ldi	r20, 0x2A	; 42
    21ce:	50 e4       	ldi	r21, 0x40	; 64
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	8f 8f       	std	Y+31, r24	; 0x1f
    21da:	98 a3       	std	Y+32, r25	; 0x20
    21dc:	a9 a3       	std	Y+33, r26	; 0x21
    21de:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    21e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21e2:	78 a1       	ldd	r23, Y+32	; 0x20
    21e4:	89 a1       	ldd	r24, Y+33	; 0x21
    21e6:	9a a1       	ldd	r25, Y+34	; 0x22
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f4:	88 23       	and	r24, r24
    21f6:	1c f4       	brge	.+6      	; 0x21fe <LCD_Write_Cmd+0x796>
		__ticks = 1;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	8e 8f       	std	Y+30, r24	; 0x1e
    21fc:	91 c0       	rjmp	.+290    	; 0x2320 <LCD_Write_Cmd+0x8b8>
	else if (__tmp > 255)
    21fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2200:	78 a1       	ldd	r23, Y+32	; 0x20
    2202:	89 a1       	ldd	r24, Y+33	; 0x21
    2204:	9a a1       	ldd	r25, Y+34	; 0x22
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	53 e4       	ldi	r21, 0x43	; 67
    220e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	0c f0       	brlt	.+2      	; 0x2218 <LCD_Write_Cmd+0x7b0>
    2216:	7b c0       	rjmp	.+246    	; 0x230e <LCD_Write_Cmd+0x8a6>
	{
		_delay_ms(__us / 1000.0);
    2218:	6b a1       	ldd	r22, Y+35	; 0x23
    221a:	7c a1       	ldd	r23, Y+36	; 0x24
    221c:	8d a1       	ldd	r24, Y+37	; 0x25
    221e:	9e a1       	ldd	r25, Y+38	; 0x26
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4a e7       	ldi	r20, 0x7A	; 122
    2226:	54 e4       	ldi	r21, 0x44	; 68
    2228:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8a 8f       	std	Y+26, r24	; 0x1a
    2232:	9b 8f       	std	Y+27, r25	; 0x1b
    2234:	ac 8f       	std	Y+28, r26	; 0x1c
    2236:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2238:	6a 8d       	ldd	r22, Y+26	; 0x1a
    223a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    223c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    223e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a ef       	ldi	r20, 0xFA	; 250
    2246:	54 e4       	ldi	r21, 0x44	; 68
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8e 8b       	std	Y+22, r24	; 0x16
    2252:	9f 8b       	std	Y+23, r25	; 0x17
    2254:	a8 8f       	std	Y+24, r26	; 0x18
    2256:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2258:	6e 89       	ldd	r22, Y+22	; 0x16
    225a:	7f 89       	ldd	r23, Y+23	; 0x17
    225c:	88 8d       	ldd	r24, Y+24	; 0x18
    225e:	99 8d       	ldd	r25, Y+25	; 0x19
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	2c f4       	brge	.+10     	; 0x227a <LCD_Write_Cmd+0x812>
		__ticks = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9d 8b       	std	Y+21, r25	; 0x15
    2276:	8c 8b       	std	Y+20, r24	; 0x14
    2278:	3f c0       	rjmp	.+126    	; 0x22f8 <LCD_Write_Cmd+0x890>
	else if (__tmp > 65535)
    227a:	6e 89       	ldd	r22, Y+22	; 0x16
    227c:	7f 89       	ldd	r23, Y+23	; 0x17
    227e:	88 8d       	ldd	r24, Y+24	; 0x18
    2280:	99 8d       	ldd	r25, Y+25	; 0x19
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	4c f5       	brge	.+82     	; 0x22e4 <LCD_Write_Cmd+0x87c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2294:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2296:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2298:	9d 8d       	ldd	r25, Y+29	; 0x1d
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	9d 8b       	std	Y+21, r25	; 0x15
    22b8:	8c 8b       	std	Y+20, r24	; 0x14
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <LCD_Write_Cmd+0x872>
    22bc:	88 ec       	ldi	r24, 0xC8	; 200
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9b 8b       	std	Y+19, r25	; 0x13
    22c2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22c4:	8a 89       	ldd	r24, Y+18	; 0x12
    22c6:	9b 89       	ldd	r25, Y+19	; 0x13
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_Write_Cmd+0x860>
    22cc:	9b 8b       	std	Y+19, r25	; 0x13
    22ce:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d0:	8c 89       	ldd	r24, Y+20	; 0x14
    22d2:	9d 89       	ldd	r25, Y+21	; 0x15
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	9d 8b       	std	Y+21, r25	; 0x15
    22d8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	8c 89       	ldd	r24, Y+20	; 0x14
    22dc:	9d 89       	ldd	r25, Y+21	; 0x15
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	69 f7       	brne	.-38     	; 0x22bc <LCD_Write_Cmd+0x854>
    22e2:	24 c0       	rjmp	.+72     	; 0x232c <LCD_Write_Cmd+0x8c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	6e 89       	ldd	r22, Y+22	; 0x16
    22e6:	7f 89       	ldd	r23, Y+23	; 0x17
    22e8:	88 8d       	ldd	r24, Y+24	; 0x18
    22ea:	99 8d       	ldd	r25, Y+25	; 0x19
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9d 8b       	std	Y+21, r25	; 0x15
    22f6:	8c 8b       	std	Y+20, r24	; 0x14
    22f8:	8c 89       	ldd	r24, Y+20	; 0x14
    22fa:	9d 89       	ldd	r25, Y+21	; 0x15
    22fc:	99 8b       	std	Y+17, r25	; 0x11
    22fe:	88 8b       	std	Y+16, r24	; 0x10
    2300:	88 89       	ldd	r24, Y+16	; 0x10
    2302:	99 89       	ldd	r25, Y+17	; 0x11
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_Write_Cmd+0x89c>
    2308:	99 8b       	std	Y+17, r25	; 0x11
    230a:	88 8b       	std	Y+16, r24	; 0x10
    230c:	0f c0       	rjmp	.+30     	; 0x232c <LCD_Write_Cmd+0x8c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    230e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2310:	78 a1       	ldd	r23, Y+32	; 0x20
    2312:	89 a1       	ldd	r24, Y+33	; 0x21
    2314:	9a a1       	ldd	r25, Y+34	; 0x22
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8e 8f       	std	Y+30, r24	; 0x1e
    2320:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2322:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2324:	8f 85       	ldd	r24, Y+15	; 0x0f
    2326:	8a 95       	dec	r24
    2328:	f1 f7       	brne	.-4      	; 0x2326 <LCD_Write_Cmd+0x8be>
    232a:	8f 87       	std	Y+15, r24	; 0x0f
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a0 e0       	ldi	r26, 0x00	; 0
    2332:	b0 e4       	ldi	r27, 0x40	; 64
    2334:	8b 87       	std	Y+11, r24	; 0x0b
    2336:	9c 87       	std	Y+12, r25	; 0x0c
    2338:	ad 87       	std	Y+13, r26	; 0x0d
    233a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233c:	6b 85       	ldd	r22, Y+11	; 0x0b
    233e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2340:	8d 85       	ldd	r24, Y+13	; 0x0d
    2342:	9e 85       	ldd	r25, Y+14	; 0x0e
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	4a ef       	ldi	r20, 0xFA	; 250
    234a:	54 e4       	ldi	r21, 0x44	; 68
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	8f 83       	std	Y+7, r24	; 0x07
    2356:	98 87       	std	Y+8, r25	; 0x08
    2358:	a9 87       	std	Y+9, r26	; 0x09
    235a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    235c:	6f 81       	ldd	r22, Y+7	; 0x07
    235e:	78 85       	ldd	r23, Y+8	; 0x08
    2360:	89 85       	ldd	r24, Y+9	; 0x09
    2362:	9a 85       	ldd	r25, Y+10	; 0x0a
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e8       	ldi	r20, 0x80	; 128
    236a:	5f e3       	ldi	r21, 0x3F	; 63
    236c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2370:	88 23       	and	r24, r24
    2372:	2c f4       	brge	.+10     	; 0x237e <LCD_Write_Cmd+0x916>
		__ticks = 1;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	3f c0       	rjmp	.+126    	; 0x23fc <LCD_Write_Cmd+0x994>
	else if (__tmp > 65535)
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	3f ef       	ldi	r19, 0xFF	; 255
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	57 e4       	ldi	r21, 0x47	; 71
    238e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2392:	18 16       	cp	r1, r24
    2394:	4c f5       	brge	.+82     	; 0x23e8 <LCD_Write_Cmd+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2396:	6b 85       	ldd	r22, Y+11	; 0x0b
    2398:	7c 85       	ldd	r23, Y+12	; 0x0c
    239a:	8d 85       	ldd	r24, Y+13	; 0x0d
    239c:	9e 85       	ldd	r25, Y+14	; 0x0e
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e2       	ldi	r20, 0x20	; 32
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	0f c0       	rjmp	.+30     	; 0x23de <LCD_Write_Cmd+0x976>
    23c0:	88 ec       	ldi	r24, 0xC8	; 200
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9c 83       	std	Y+4, r25	; 0x04
    23c6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <LCD_Write_Cmd+0x964>
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
    23d6:	9e 81       	ldd	r25, Y+6	; 0x06
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	9e 83       	std	Y+6, r25	; 0x06
    23dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <LCD_Write_Cmd+0x958>
    23e6:	14 c0       	rjmp	.+40     	; 0x2410 <LCD_Write_Cmd+0x9a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ea:	78 85       	ldd	r23, Y+8	; 0x08
    23ec:	89 85       	ldd	r24, Y+9	; 0x09
    23ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	8d 83       	std	Y+5, r24	; 0x05
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <LCD_Write_Cmd+0x9a0>
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
	}

	//wait 2 ms after every instruction
	_delay_ms(2);
}
    2410:	c1 59       	subi	r28, 0x91	; 145
    2412:	df 4f       	sbci	r29, 0xFF	; 255
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	08 95       	ret

00002428 <LCD_Write_Char>:


void LCD_Write_Char(u8 chr)
{
    2428:	0f 93       	push	r16
    242a:	1f 93       	push	r17
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	c9 57       	subi	r28, 0x79	; 121
    2436:	d0 40       	sbci	r29, 0x00	; 0
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	fe 01       	movw	r30, r28
    2444:	e7 58       	subi	r30, 0x87	; 135
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	80 83       	st	Z, r24
	/*Set RS Pin to HIGH*/
	SetPinValue(RS,Control_Port,HIGH);
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	63 e0       	ldi	r22, 0x03	; 3
    244e:	41 e0       	ldi	r20, 0x01	; 1
    2450:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	/*Set RW Pin to LOW*/
	SetPinValue(RW,Control_Port,LOW);
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	63 e0       	ldi	r22, 0x03	; 3
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>

	/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
	SetPinValue(PIN4,Data_Port,GET_BIT(chr,4));
    245e:	fe 01       	movw	r30, r28
    2460:	e7 58       	subi	r30, 0x87	; 135
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	82 95       	swap	r24
    2468:	8f 70       	andi	r24, 0x0F	; 15
    246a:	98 2f       	mov	r25, r24
    246c:	91 70       	andi	r25, 0x01	; 1
    246e:	84 e0       	ldi	r24, 0x04	; 4
    2470:	62 e0       	ldi	r22, 0x02	; 2
    2472:	49 2f       	mov	r20, r25
    2474:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	SetPinValue(PIN5,Data_Port,GET_BIT(chr,5));
    2478:	fe 01       	movw	r30, r28
    247a:	e7 58       	subi	r30, 0x87	; 135
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 81       	ld	r24, Z
    2480:	82 95       	swap	r24
    2482:	86 95       	lsr	r24
    2484:	87 70       	andi	r24, 0x07	; 7
    2486:	98 2f       	mov	r25, r24
    2488:	91 70       	andi	r25, 0x01	; 1
    248a:	85 e0       	ldi	r24, 0x05	; 5
    248c:	62 e0       	ldi	r22, 0x02	; 2
    248e:	49 2f       	mov	r20, r25
    2490:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	SetPinValue(PIN6,Data_Port,GET_BIT(chr,6));
    2494:	fe 01       	movw	r30, r28
    2496:	e7 58       	subi	r30, 0x87	; 135
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 81       	ld	r24, Z
    249c:	82 95       	swap	r24
    249e:	86 95       	lsr	r24
    24a0:	86 95       	lsr	r24
    24a2:	83 70       	andi	r24, 0x03	; 3
    24a4:	98 2f       	mov	r25, r24
    24a6:	91 70       	andi	r25, 0x01	; 1
    24a8:	86 e0       	ldi	r24, 0x06	; 6
    24aa:	62 e0       	ldi	r22, 0x02	; 2
    24ac:	49 2f       	mov	r20, r25
    24ae:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	SetPinValue(PIN7,Data_Port,GET_BIT(chr,7));
    24b2:	fe 01       	movw	r30, r28
    24b4:	e7 58       	subi	r30, 0x87	; 135
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	98 2f       	mov	r25, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	99 27       	eor	r25, r25
    24c0:	99 1f       	adc	r25, r25
    24c2:	87 e0       	ldi	r24, 0x07	; 7
    24c4:	62 e0       	ldi	r22, 0x02	; 2
    24c6:	49 2f       	mov	r20, r25
    24c8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>

	/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
	SetPinValue(E,Control_Port,HIGH);
    24cc:	82 e0       	ldi	r24, 0x02	; 2
    24ce:	63 e0       	ldi	r22, 0x03	; 3
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
    24d6:	fe 01       	movw	r30, r28
    24d8:	eb 58       	subi	r30, 0x8B	; 139
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	a0 e8       	ldi	r26, 0x80	; 128
    24e2:	bf e3       	ldi	r27, 0x3F	; 63
    24e4:	80 83       	st	Z, r24
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	a2 83       	std	Z+2, r26	; 0x02
    24ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24ec:	8e 01       	movw	r16, r28
    24ee:	0f 58       	subi	r16, 0x8F	; 143
    24f0:	1f 4f       	sbci	r17, 0xFF	; 255
    24f2:	fe 01       	movw	r30, r28
    24f4:	eb 58       	subi	r30, 0x8B	; 139
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	2b ea       	ldi	r18, 0xAB	; 171
    2502:	3a ea       	ldi	r19, 0xAA	; 170
    2504:	4a e2       	ldi	r20, 0x2A	; 42
    2506:	50 e4       	ldi	r21, 0x40	; 64
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	f8 01       	movw	r30, r16
    2512:	80 83       	st	Z, r24
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	a2 83       	std	Z+2, r26	; 0x02
    2518:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    251a:	fe 01       	movw	r30, r28
    251c:	ef 58       	subi	r30, 0x8F	; 143
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	60 81       	ld	r22, Z
    2522:	71 81       	ldd	r23, Z+1	; 0x01
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e8       	ldi	r20, 0x80	; 128
    252e:	5f e3       	ldi	r21, 0x3F	; 63
    2530:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2534:	88 23       	and	r24, r24
    2536:	34 f4       	brge	.+12     	; 0x2544 <LCD_Write_Char+0x11c>
		__ticks = 1;
    2538:	fe 01       	movw	r30, r28
    253a:	e0 59       	subi	r30, 0x90	; 144
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	80 83       	st	Z, r24
    2542:	e0 c0       	rjmp	.+448    	; 0x2704 <LCD_Write_Char+0x2dc>
	else if (__tmp > 255)
    2544:	fe 01       	movw	r30, r28
    2546:	ef 58       	subi	r30, 0x8F	; 143
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	60 81       	ld	r22, Z
    254c:	71 81       	ldd	r23, Z+1	; 0x01
    254e:	82 81       	ldd	r24, Z+2	; 0x02
    2550:	93 81       	ldd	r25, Z+3	; 0x03
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	53 e4       	ldi	r21, 0x43	; 67
    255a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    255e:	18 16       	cp	r1, r24
    2560:	0c f0       	brlt	.+2      	; 0x2564 <LCD_Write_Char+0x13c>
    2562:	c0 c0       	rjmp	.+384    	; 0x26e4 <LCD_Write_Char+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    2564:	fe 01       	movw	r30, r28
    2566:	eb 58       	subi	r30, 0x8B	; 139
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	60 81       	ld	r22, Z
    256c:	71 81       	ldd	r23, Z+1	; 0x01
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	4a e7       	ldi	r20, 0x7A	; 122
    2578:	54 e4       	ldi	r21, 0x44	; 68
    257a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	fe 01       	movw	r30, r28
    2584:	e4 59       	subi	r30, 0x94	; 148
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 83       	st	Z, r24
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	a2 83       	std	Z+2, r26	; 0x02
    258e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2590:	8e 01       	movw	r16, r28
    2592:	08 59       	subi	r16, 0x98	; 152
    2594:	1f 4f       	sbci	r17, 0xFF	; 255
    2596:	fe 01       	movw	r30, r28
    2598:	e4 59       	subi	r30, 0x94	; 148
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a ef       	ldi	r20, 0xFA	; 250
    25aa:	54 e4       	ldi	r21, 0x44	; 68
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	f8 01       	movw	r30, r16
    25b6:	80 83       	st	Z, r24
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	a2 83       	std	Z+2, r26	; 0x02
    25bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25be:	fe 01       	movw	r30, r28
    25c0:	e8 59       	subi	r30, 0x98	; 152
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e8       	ldi	r20, 0x80	; 128
    25d2:	5f e3       	ldi	r21, 0x3F	; 63
    25d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d8:	88 23       	and	r24, r24
    25da:	44 f4       	brge	.+16     	; 0x25ec <LCD_Write_Char+0x1c4>
		__ticks = 1;
    25dc:	fe 01       	movw	r30, r28
    25de:	ea 59       	subi	r30, 0x9A	; 154
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	80 83       	st	Z, r24
    25ea:	64 c0       	rjmp	.+200    	; 0x26b4 <LCD_Write_Char+0x28c>
	else if (__tmp > 65535)
    25ec:	fe 01       	movw	r30, r28
    25ee:	e8 59       	subi	r30, 0x98	; 152
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	60 81       	ld	r22, Z
    25f4:	71 81       	ldd	r23, Z+1	; 0x01
    25f6:	82 81       	ldd	r24, Z+2	; 0x02
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	57 e4       	ldi	r21, 0x47	; 71
    2602:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2606:	18 16       	cp	r1, r24
    2608:	0c f0       	brlt	.+2      	; 0x260c <LCD_Write_Char+0x1e4>
    260a:	43 c0       	rjmp	.+134    	; 0x2692 <LCD_Write_Char+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260c:	fe 01       	movw	r30, r28
    260e:	e4 59       	subi	r30, 0x94	; 148
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	60 81       	ld	r22, Z
    2614:	71 81       	ldd	r23, Z+1	; 0x01
    2616:	82 81       	ldd	r24, Z+2	; 0x02
    2618:	93 81       	ldd	r25, Z+3	; 0x03
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e2       	ldi	r20, 0x20	; 32
    2620:	51 e4       	ldi	r21, 0x41	; 65
    2622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	8e 01       	movw	r16, r28
    262c:	0a 59       	subi	r16, 0x9A	; 154
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	f8 01       	movw	r30, r16
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
    2642:	1f c0       	rjmp	.+62     	; 0x2682 <LCD_Write_Char+0x25a>
    2644:	fe 01       	movw	r30, r28
    2646:	ec 59       	subi	r30, 0x9C	; 156
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	88 ec       	ldi	r24, 0xC8	; 200
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
    2652:	fe 01       	movw	r30, r28
    2654:	ec 59       	subi	r30, 0x9C	; 156
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <LCD_Write_Char+0x234>
    2660:	fe 01       	movw	r30, r28
    2662:	ec 59       	subi	r30, 0x9C	; 156
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266a:	de 01       	movw	r26, r28
    266c:	aa 59       	subi	r26, 0x9A	; 154
    266e:	bf 4f       	sbci	r27, 0xFF	; 255
    2670:	fe 01       	movw	r30, r28
    2672:	ea 59       	subi	r30, 0x9A	; 154
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	11 96       	adiw	r26, 0x01	; 1
    267e:	9c 93       	st	X, r25
    2680:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	fe 01       	movw	r30, r28
    2684:	ea 59       	subi	r30, 0x9A	; 154
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	91 81       	ldd	r25, Z+1	; 0x01
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	d1 f6       	brne	.-76     	; 0x2644 <LCD_Write_Char+0x21c>
    2690:	4b c0       	rjmp	.+150    	; 0x2728 <LCD_Write_Char+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	8e 01       	movw	r16, r28
    2694:	0a 59       	subi	r16, 0x9A	; 154
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	fe 01       	movw	r30, r28
    269a:	e8 59       	subi	r30, 0x98	; 152
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	f8 01       	movw	r30, r16
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	80 83       	st	Z, r24
    26b4:	de 01       	movw	r26, r28
    26b6:	ae 59       	subi	r26, 0x9E	; 158
    26b8:	bf 4f       	sbci	r27, 0xFF	; 255
    26ba:	fe 01       	movw	r30, r28
    26bc:	ea 59       	subi	r30, 0x9A	; 154
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	80 81       	ld	r24, Z
    26c2:	91 81       	ldd	r25, Z+1	; 0x01
    26c4:	11 96       	adiw	r26, 0x01	; 1
    26c6:	9c 93       	st	X, r25
    26c8:	8e 93       	st	-X, r24
    26ca:	fe 01       	movw	r30, r28
    26cc:	ee 59       	subi	r30, 0x9E	; 158
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 81       	ld	r24, Z
    26d2:	91 81       	ldd	r25, Z+1	; 0x01
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_Write_Char+0x2ac>
    26d8:	fe 01       	movw	r30, r28
    26da:	ee 59       	subi	r30, 0x9E	; 158
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	80 83       	st	Z, r24
    26e2:	22 c0       	rjmp	.+68     	; 0x2728 <LCD_Write_Char+0x300>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26e4:	8e 01       	movw	r16, r28
    26e6:	00 59       	subi	r16, 0x90	; 144
    26e8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ea:	fe 01       	movw	r30, r28
    26ec:	ef 58       	subi	r30, 0x8F	; 143
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	60 81       	ld	r22, Z
    26f2:	71 81       	ldd	r23, Z+1	; 0x01
    26f4:	82 81       	ldd	r24, Z+2	; 0x02
    26f6:	93 81       	ldd	r25, Z+3	; 0x03
    26f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	f8 01       	movw	r30, r16
    2702:	80 83       	st	Z, r24
    2704:	de 01       	movw	r26, r28
    2706:	af 59       	subi	r26, 0x9F	; 159
    2708:	bf 4f       	sbci	r27, 0xFF	; 255
    270a:	fe 01       	movw	r30, r28
    270c:	e0 59       	subi	r30, 0x90	; 144
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2714:	fe 01       	movw	r30, r28
    2716:	ef 59       	subi	r30, 0x9F	; 159
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	80 81       	ld	r24, Z
    271c:	8a 95       	dec	r24
    271e:	f1 f7       	brne	.-4      	; 0x271c <LCD_Write_Char+0x2f4>
    2720:	fe 01       	movw	r30, r28
    2722:	ef 59       	subi	r30, 0x9F	; 159
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 83       	st	Z, r24
	_delay_us(1);
	SetPinValue(E,Control_Port,LOW);
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	63 e0       	ldi	r22, 0x03	; 3
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
    2732:	fe 01       	movw	r30, r28
    2734:	e3 5a       	subi	r30, 0xA3	; 163
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	a0 e8       	ldi	r26, 0x80	; 128
    273e:	bf e3       	ldi	r27, 0x3F	; 63
    2740:	80 83       	st	Z, r24
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	a2 83       	std	Z+2, r26	; 0x02
    2746:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2748:	8e 01       	movw	r16, r28
    274a:	07 5a       	subi	r16, 0xA7	; 167
    274c:	1f 4f       	sbci	r17, 0xFF	; 255
    274e:	fe 01       	movw	r30, r28
    2750:	e3 5a       	subi	r30, 0xA3	; 163
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	60 81       	ld	r22, Z
    2756:	71 81       	ldd	r23, Z+1	; 0x01
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	93 81       	ldd	r25, Z+3	; 0x03
    275c:	2b ea       	ldi	r18, 0xAB	; 171
    275e:	3a ea       	ldi	r19, 0xAA	; 170
    2760:	4a e2       	ldi	r20, 0x2A	; 42
    2762:	50 e4       	ldi	r21, 0x40	; 64
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	f8 01       	movw	r30, r16
    276e:	80 83       	st	Z, r24
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	a2 83       	std	Z+2, r26	; 0x02
    2774:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2776:	fe 01       	movw	r30, r28
    2778:	e7 5a       	subi	r30, 0xA7	; 167
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2790:	88 23       	and	r24, r24
    2792:	34 f4       	brge	.+12     	; 0x27a0 <LCD_Write_Char+0x378>
		__ticks = 1;
    2794:	fe 01       	movw	r30, r28
    2796:	e8 5a       	subi	r30, 0xA8	; 168
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	80 83       	st	Z, r24
    279e:	e0 c0       	rjmp	.+448    	; 0x2960 <LCD_Write_Char+0x538>
	else if (__tmp > 255)
    27a0:	fe 01       	movw	r30, r28
    27a2:	e7 5a       	subi	r30, 0xA7	; 167
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	60 81       	ld	r22, Z
    27a8:	71 81       	ldd	r23, Z+1	; 0x01
    27aa:	82 81       	ldd	r24, Z+2	; 0x02
    27ac:	93 81       	ldd	r25, Z+3	; 0x03
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	4f e7       	ldi	r20, 0x7F	; 127
    27b4:	53 e4       	ldi	r21, 0x43	; 67
    27b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ba:	18 16       	cp	r1, r24
    27bc:	0c f0       	brlt	.+2      	; 0x27c0 <LCD_Write_Char+0x398>
    27be:	c0 c0       	rjmp	.+384    	; 0x2940 <LCD_Write_Char+0x518>
	{
		_delay_ms(__us / 1000.0);
    27c0:	fe 01       	movw	r30, r28
    27c2:	e3 5a       	subi	r30, 0xA3	; 163
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a e7       	ldi	r20, 0x7A	; 122
    27d4:	54 e4       	ldi	r21, 0x44	; 68
    27d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	fe 01       	movw	r30, r28
    27e0:	ec 5a       	subi	r30, 0xAC	; 172
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 83       	st	Z, r24
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	a2 83       	std	Z+2, r26	; 0x02
    27ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ec:	8e 01       	movw	r16, r28
    27ee:	00 5b       	subi	r16, 0xB0	; 176
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	ec 5a       	subi	r30, 0xAC	; 172
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4a ef       	ldi	r20, 0xFA	; 250
    2806:	54 e4       	ldi	r21, 0x44	; 68
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	f8 01       	movw	r30, r16
    2812:	80 83       	st	Z, r24
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	a2 83       	std	Z+2, r26	; 0x02
    2818:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    281a:	fe 01       	movw	r30, r28
    281c:	e0 5b       	subi	r30, 0xB0	; 176
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e8       	ldi	r20, 0x80	; 128
    282e:	5f e3       	ldi	r21, 0x3F	; 63
    2830:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2834:	88 23       	and	r24, r24
    2836:	44 f4       	brge	.+16     	; 0x2848 <LCD_Write_Char+0x420>
		__ticks = 1;
    2838:	fe 01       	movw	r30, r28
    283a:	e2 5b       	subi	r30, 0xB2	; 178
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	80 83       	st	Z, r24
    2846:	64 c0       	rjmp	.+200    	; 0x2910 <LCD_Write_Char+0x4e8>
	else if (__tmp > 65535)
    2848:	fe 01       	movw	r30, r28
    284a:	e0 5b       	subi	r30, 0xB0	; 176
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	60 81       	ld	r22, Z
    2850:	71 81       	ldd	r23, Z+1	; 0x01
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	3f ef       	ldi	r19, 0xFF	; 255
    285a:	4f e7       	ldi	r20, 0x7F	; 127
    285c:	57 e4       	ldi	r21, 0x47	; 71
    285e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2862:	18 16       	cp	r1, r24
    2864:	0c f0       	brlt	.+2      	; 0x2868 <LCD_Write_Char+0x440>
    2866:	43 c0       	rjmp	.+134    	; 0x28ee <LCD_Write_Char+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2868:	fe 01       	movw	r30, r28
    286a:	ec 5a       	subi	r30, 0xAC	; 172
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e2       	ldi	r20, 0x20	; 32
    287c:	51 e4       	ldi	r21, 0x41	; 65
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	8e 01       	movw	r16, r28
    2888:	02 5b       	subi	r16, 0xB2	; 178
    288a:	1f 4f       	sbci	r17, 0xFF	; 255
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	f8 01       	movw	r30, r16
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	80 83       	st	Z, r24
    289e:	1f c0       	rjmp	.+62     	; 0x28de <LCD_Write_Char+0x4b6>
    28a0:	fe 01       	movw	r30, r28
    28a2:	e4 5b       	subi	r30, 0xB4	; 180
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	88 ec       	ldi	r24, 0xC8	; 200
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28ae:	fe 01       	movw	r30, r28
    28b0:	e4 5b       	subi	r30, 0xB4	; 180
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	91 81       	ldd	r25, Z+1	; 0x01
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <LCD_Write_Char+0x490>
    28bc:	fe 01       	movw	r30, r28
    28be:	e4 5b       	subi	r30, 0xB4	; 180
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	91 83       	std	Z+1, r25	; 0x01
    28c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c6:	de 01       	movw	r26, r28
    28c8:	a2 5b       	subi	r26, 0xB2	; 178
    28ca:	bf 4f       	sbci	r27, 0xFF	; 255
    28cc:	fe 01       	movw	r30, r28
    28ce:	e2 5b       	subi	r30, 0xB2	; 178
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	91 81       	ldd	r25, Z+1	; 0x01
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	11 96       	adiw	r26, 0x01	; 1
    28da:	9c 93       	st	X, r25
    28dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28de:	fe 01       	movw	r30, r28
    28e0:	e2 5b       	subi	r30, 0xB2	; 178
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	d1 f6       	brne	.-76     	; 0x28a0 <LCD_Write_Char+0x478>
    28ec:	4b c0       	rjmp	.+150    	; 0x2984 <LCD_Write_Char+0x55c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ee:	8e 01       	movw	r16, r28
    28f0:	02 5b       	subi	r16, 0xB2	; 178
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	fe 01       	movw	r30, r28
    28f6:	e0 5b       	subi	r30, 0xB0	; 176
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	f8 01       	movw	r30, r16
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
    2910:	de 01       	movw	r26, r28
    2912:	a6 5b       	subi	r26, 0xB6	; 182
    2914:	bf 4f       	sbci	r27, 0xFF	; 255
    2916:	fe 01       	movw	r30, r28
    2918:	e2 5b       	subi	r30, 0xB2	; 178
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	11 96       	adiw	r26, 0x01	; 1
    2922:	9c 93       	st	X, r25
    2924:	8e 93       	st	-X, r24
    2926:	fe 01       	movw	r30, r28
    2928:	e6 5b       	subi	r30, 0xB6	; 182
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <LCD_Write_Char+0x508>
    2934:	fe 01       	movw	r30, r28
    2936:	e6 5b       	subi	r30, 0xB6	; 182
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
    293e:	22 c0       	rjmp	.+68     	; 0x2984 <LCD_Write_Char+0x55c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2940:	8e 01       	movw	r16, r28
    2942:	08 5a       	subi	r16, 0xA8	; 168
    2944:	1f 4f       	sbci	r17, 0xFF	; 255
    2946:	fe 01       	movw	r30, r28
    2948:	e7 5a       	subi	r30, 0xA7	; 167
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	f8 01       	movw	r30, r16
    295e:	80 83       	st	Z, r24
    2960:	de 01       	movw	r26, r28
    2962:	a7 5b       	subi	r26, 0xB7	; 183
    2964:	bf 4f       	sbci	r27, 0xFF	; 255
    2966:	fe 01       	movw	r30, r28
    2968:	e8 5a       	subi	r30, 0xA8	; 168
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2970:	fe 01       	movw	r30, r28
    2972:	e7 5b       	subi	r30, 0xB7	; 183
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	80 81       	ld	r24, Z
    2978:	8a 95       	dec	r24
    297a:	f1 f7       	brne	.-4      	; 0x2978 <LCD_Write_Char+0x550>
    297c:	fe 01       	movw	r30, r28
    297e:	e7 5b       	subi	r30, 0xB7	; 183
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 83       	st	Z, r24
	_delay_us(1);

	/* Load Command to Data Pins(D4....D7) using 4-bit Mode*/
	SetPinValue(PIN4,Data_Port,GET_BIT(chr,0));
    2984:	fe 01       	movw	r30, r28
    2986:	e7 58       	subi	r30, 0x87	; 135
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	80 81       	ld	r24, Z
    298c:	98 2f       	mov	r25, r24
    298e:	91 70       	andi	r25, 0x01	; 1
    2990:	84 e0       	ldi	r24, 0x04	; 4
    2992:	62 e0       	ldi	r22, 0x02	; 2
    2994:	49 2f       	mov	r20, r25
    2996:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	SetPinValue(PIN5,Data_Port,GET_BIT(chr,1));
    299a:	fe 01       	movw	r30, r28
    299c:	e7 58       	subi	r30, 0x87	; 135
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	86 95       	lsr	r24
    29a4:	98 2f       	mov	r25, r24
    29a6:	91 70       	andi	r25, 0x01	; 1
    29a8:	85 e0       	ldi	r24, 0x05	; 5
    29aa:	62 e0       	ldi	r22, 0x02	; 2
    29ac:	49 2f       	mov	r20, r25
    29ae:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	SetPinValue(PIN6,Data_Port,GET_BIT(chr,2));
    29b2:	fe 01       	movw	r30, r28
    29b4:	e7 58       	subi	r30, 0x87	; 135
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	86 95       	lsr	r24
    29bc:	86 95       	lsr	r24
    29be:	98 2f       	mov	r25, r24
    29c0:	91 70       	andi	r25, 0x01	; 1
    29c2:	86 e0       	ldi	r24, 0x06	; 6
    29c4:	62 e0       	ldi	r22, 0x02	; 2
    29c6:	49 2f       	mov	r20, r25
    29c8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	SetPinValue(PIN7,Data_Port,GET_BIT(chr,3));
    29cc:	fe 01       	movw	r30, r28
    29ce:	e7 58       	subi	r30, 0x87	; 135
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	80 81       	ld	r24, Z
    29d4:	86 95       	lsr	r24
    29d6:	86 95       	lsr	r24
    29d8:	86 95       	lsr	r24
    29da:	98 2f       	mov	r25, r24
    29dc:	91 70       	andi	r25, 0x01	; 1
    29de:	87 e0       	ldi	r24, 0x07	; 7
    29e0:	62 e0       	ldi	r22, 0x02	; 2
    29e2:	49 2f       	mov	r20, r25
    29e4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>

	/*Set E Pin to HIGH for 1 us and then turn it to low to make a falling edge(latching)*/
	SetPinValue(E,Control_Port,HIGH);
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	63 e0       	ldi	r22, 0x03	; 3
    29ec:	41 e0       	ldi	r20, 0x01	; 1
    29ee:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
    29f2:	fe 01       	movw	r30, r28
    29f4:	eb 5b       	subi	r30, 0xBB	; 187
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	a0 e8       	ldi	r26, 0x80	; 128
    29fe:	bf e3       	ldi	r27, 0x3F	; 63
    2a00:	80 83       	st	Z, r24
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	a2 83       	std	Z+2, r26	; 0x02
    2a06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a08:	8e 01       	movw	r16, r28
    2a0a:	0f 5b       	subi	r16, 0xBF	; 191
    2a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0e:	fe 01       	movw	r30, r28
    2a10:	eb 5b       	subi	r30, 0xBB	; 187
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	2b ea       	ldi	r18, 0xAB	; 171
    2a1e:	3a ea       	ldi	r19, 0xAA	; 170
    2a20:	4a e2       	ldi	r20, 0x2A	; 42
    2a22:	50 e4       	ldi	r21, 0x40	; 64
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	80 83       	st	Z, r24
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	a2 83       	std	Z+2, r26	; 0x02
    2a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a36:	fe 01       	movw	r30, r28
    2a38:	ef 5b       	subi	r30, 0xBF	; 191
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	34 f4       	brge	.+12     	; 0x2a60 <LCD_Write_Char+0x638>
		__ticks = 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	fe 01       	movw	r30, r28
    2a58:	e0 5c       	subi	r30, 0xC0	; 192
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 83       	st	Z, r24
    2a5e:	9d c0       	rjmp	.+314    	; 0x2b9a <LCD_Write_Char+0x772>
	else if (__tmp > 255)
    2a60:	fe 01       	movw	r30, r28
    2a62:	ef 5b       	subi	r30, 0xBF	; 191
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	60 81       	ld	r22, Z
    2a68:	71 81       	ldd	r23, Z+1	; 0x01
    2a6a:	82 81       	ldd	r24, Z+2	; 0x02
    2a6c:	93 81       	ldd	r25, Z+3	; 0x03
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	4f e7       	ldi	r20, 0x7F	; 127
    2a74:	53 e4       	ldi	r21, 0x43	; 67
    2a76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a7a:	18 16       	cp	r1, r24
    2a7c:	0c f0       	brlt	.+2      	; 0x2a80 <LCD_Write_Char+0x658>
    2a7e:	7e c0       	rjmp	.+252    	; 0x2b7c <LCD_Write_Char+0x754>
	{
		_delay_ms(__us / 1000.0);
    2a80:	fe 01       	movw	r30, r28
    2a82:	eb 5b       	subi	r30, 0xBB	; 187
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	4a e7       	ldi	r20, 0x7A	; 122
    2a94:	54 e4       	ldi	r21, 0x44	; 68
    2a96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	8c af       	std	Y+60, r24	; 0x3c
    2aa0:	9d af       	std	Y+61, r25	; 0x3d
    2aa2:	ae af       	std	Y+62, r26	; 0x3e
    2aa4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa6:	6c ad       	ldd	r22, Y+60	; 0x3c
    2aa8:	7d ad       	ldd	r23, Y+61	; 0x3d
    2aaa:	8e ad       	ldd	r24, Y+62	; 0x3e
    2aac:	9f ad       	ldd	r25, Y+63	; 0x3f
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a ef       	ldi	r20, 0xFA	; 250
    2ab4:	54 e4       	ldi	r21, 0x44	; 68
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	88 af       	std	Y+56, r24	; 0x38
    2ac0:	99 af       	std	Y+57, r25	; 0x39
    2ac2:	aa af       	std	Y+58, r26	; 0x3a
    2ac4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2ac6:	68 ad       	ldd	r22, Y+56	; 0x38
    2ac8:	79 ad       	ldd	r23, Y+57	; 0x39
    2aca:	8a ad       	ldd	r24, Y+58	; 0x3a
    2acc:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e8       	ldi	r20, 0x80	; 128
    2ad4:	5f e3       	ldi	r21, 0x3F	; 63
    2ad6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ada:	88 23       	and	r24, r24
    2adc:	2c f4       	brge	.+10     	; 0x2ae8 <LCD_Write_Char+0x6c0>
		__ticks = 1;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9f ab       	std	Y+55, r25	; 0x37
    2ae4:	8e ab       	std	Y+54, r24	; 0x36
    2ae6:	3f c0       	rjmp	.+126    	; 0x2b66 <LCD_Write_Char+0x73e>
	else if (__tmp > 65535)
    2ae8:	68 ad       	ldd	r22, Y+56	; 0x38
    2aea:	79 ad       	ldd	r23, Y+57	; 0x39
    2aec:	8a ad       	ldd	r24, Y+58	; 0x3a
    2aee:	9b ad       	ldd	r25, Y+59	; 0x3b
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	3f ef       	ldi	r19, 0xFF	; 255
    2af4:	4f e7       	ldi	r20, 0x7F	; 127
    2af6:	57 e4       	ldi	r21, 0x47	; 71
    2af8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2afc:	18 16       	cp	r1, r24
    2afe:	4c f5       	brge	.+82     	; 0x2b52 <LCD_Write_Char+0x72a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b00:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b02:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b04:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b06:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e2       	ldi	r20, 0x20	; 32
    2b0e:	51 e4       	ldi	r21, 0x41	; 65
    2b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9f ab       	std	Y+55, r25	; 0x37
    2b26:	8e ab       	std	Y+54, r24	; 0x36
    2b28:	0f c0       	rjmp	.+30     	; 0x2b48 <LCD_Write_Char+0x720>
    2b2a:	88 ec       	ldi	r24, 0xC8	; 200
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	9d ab       	std	Y+53, r25	; 0x35
    2b30:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b32:	8c a9       	ldd	r24, Y+52	; 0x34
    2b34:	9d a9       	ldd	r25, Y+53	; 0x35
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <LCD_Write_Char+0x70e>
    2b3a:	9d ab       	std	Y+53, r25	; 0x35
    2b3c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3e:	8e a9       	ldd	r24, Y+54	; 0x36
    2b40:	9f a9       	ldd	r25, Y+55	; 0x37
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	9f ab       	std	Y+55, r25	; 0x37
    2b46:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b48:	8e a9       	ldd	r24, Y+54	; 0x36
    2b4a:	9f a9       	ldd	r25, Y+55	; 0x37
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	69 f7       	brne	.-38     	; 0x2b2a <LCD_Write_Char+0x702>
    2b50:	2d c0       	rjmp	.+90     	; 0x2bac <LCD_Write_Char+0x784>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b52:	68 ad       	ldd	r22, Y+56	; 0x38
    2b54:	79 ad       	ldd	r23, Y+57	; 0x39
    2b56:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b58:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9f ab       	std	Y+55, r25	; 0x37
    2b64:	8e ab       	std	Y+54, r24	; 0x36
    2b66:	8e a9       	ldd	r24, Y+54	; 0x36
    2b68:	9f a9       	ldd	r25, Y+55	; 0x37
    2b6a:	9b ab       	std	Y+51, r25	; 0x33
    2b6c:	8a ab       	std	Y+50, r24	; 0x32
    2b6e:	8a a9       	ldd	r24, Y+50	; 0x32
    2b70:	9b a9       	ldd	r25, Y+51	; 0x33
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_Write_Char+0x74a>
    2b76:	9b ab       	std	Y+51, r25	; 0x33
    2b78:	8a ab       	std	Y+50, r24	; 0x32
    2b7a:	18 c0       	rjmp	.+48     	; 0x2bac <LCD_Write_Char+0x784>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ef 5b       	subi	r30, 0xBF	; 191
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	60 81       	ld	r22, Z
    2b84:	71 81       	ldd	r23, Z+1	; 0x01
    2b86:	82 81       	ldd	r24, Z+2	; 0x02
    2b88:	93 81       	ldd	r25, Z+3	; 0x03
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	fe 01       	movw	r30, r28
    2b94:	e0 5c       	subi	r30, 0xC0	; 192
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	80 83       	st	Z, r24
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	e0 5c       	subi	r30, 0xC0	; 192
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	80 81       	ld	r24, Z
    2ba2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ba4:	89 a9       	ldd	r24, Y+49	; 0x31
    2ba6:	8a 95       	dec	r24
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <LCD_Write_Char+0x77e>
    2baa:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	SetPinValue(E,Control_Port,LOW);
    2bac:	82 e0       	ldi	r24, 0x02	; 2
    2bae:	63 e0       	ldi	r22, 0x03	; 3
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	a0 e8       	ldi	r26, 0x80	; 128
    2bbc:	bf e3       	ldi	r27, 0x3F	; 63
    2bbe:	8d a7       	std	Y+45, r24	; 0x2d
    2bc0:	9e a7       	std	Y+46, r25	; 0x2e
    2bc2:	af a7       	std	Y+47, r26	; 0x2f
    2bc4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bc6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2bc8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2bca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bcc:	98 a9       	ldd	r25, Y+48	; 0x30
    2bce:	2b ea       	ldi	r18, 0xAB	; 171
    2bd0:	3a ea       	ldi	r19, 0xAA	; 170
    2bd2:	4a e2       	ldi	r20, 0x2A	; 42
    2bd4:	50 e4       	ldi	r21, 0x40	; 64
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	89 a7       	std	Y+41, r24	; 0x29
    2be0:	9a a7       	std	Y+42, r25	; 0x2a
    2be2:	ab a7       	std	Y+43, r26	; 0x2b
    2be4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2be6:	69 a5       	ldd	r22, Y+41	; 0x29
    2be8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2bea:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bec:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e8       	ldi	r20, 0x80	; 128
    2bf4:	5f e3       	ldi	r21, 0x3F	; 63
    2bf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bfa:	88 23       	and	r24, r24
    2bfc:	1c f4       	brge	.+6      	; 0x2c04 <LCD_Write_Char+0x7dc>
		__ticks = 1;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	88 a7       	std	Y+40, r24	; 0x28
    2c02:	91 c0       	rjmp	.+290    	; 0x2d26 <LCD_Write_Char+0x8fe>
	else if (__tmp > 255)
    2c04:	69 a5       	ldd	r22, Y+41	; 0x29
    2c06:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c08:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	53 e4       	ldi	r21, 0x43	; 67
    2c14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	0c f0       	brlt	.+2      	; 0x2c1e <LCD_Write_Char+0x7f6>
    2c1c:	7b c0       	rjmp	.+246    	; 0x2d14 <LCD_Write_Char+0x8ec>
	{
		_delay_ms(__us / 1000.0);
    2c1e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c20:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c24:	98 a9       	ldd	r25, Y+48	; 0x30
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	4a e7       	ldi	r20, 0x7A	; 122
    2c2c:	54 e4       	ldi	r21, 0x44	; 68
    2c2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	8c a3       	std	Y+36, r24	; 0x24
    2c38:	9d a3       	std	Y+37, r25	; 0x25
    2c3a:	ae a3       	std	Y+38, r26	; 0x26
    2c3c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3e:	6c a1       	ldd	r22, Y+36	; 0x24
    2c40:	7d a1       	ldd	r23, Y+37	; 0x25
    2c42:	8e a1       	ldd	r24, Y+38	; 0x26
    2c44:	9f a1       	ldd	r25, Y+39	; 0x27
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	4a ef       	ldi	r20, 0xFA	; 250
    2c4c:	54 e4       	ldi	r21, 0x44	; 68
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	88 a3       	std	Y+32, r24	; 0x20
    2c58:	99 a3       	std	Y+33, r25	; 0x21
    2c5a:	aa a3       	std	Y+34, r26	; 0x22
    2c5c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2c5e:	68 a1       	ldd	r22, Y+32	; 0x20
    2c60:	79 a1       	ldd	r23, Y+33	; 0x21
    2c62:	8a a1       	ldd	r24, Y+34	; 0x22
    2c64:	9b a1       	ldd	r25, Y+35	; 0x23
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e8       	ldi	r20, 0x80	; 128
    2c6c:	5f e3       	ldi	r21, 0x3F	; 63
    2c6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	2c f4       	brge	.+10     	; 0x2c80 <LCD_Write_Char+0x858>
		__ticks = 1;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	9f 8f       	std	Y+31, r25	; 0x1f
    2c7c:	8e 8f       	std	Y+30, r24	; 0x1e
    2c7e:	3f c0       	rjmp	.+126    	; 0x2cfe <LCD_Write_Char+0x8d6>
	else if (__tmp > 65535)
    2c80:	68 a1       	ldd	r22, Y+32	; 0x20
    2c82:	79 a1       	ldd	r23, Y+33	; 0x21
    2c84:	8a a1       	ldd	r24, Y+34	; 0x22
    2c86:	9b a1       	ldd	r25, Y+35	; 0x23
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	3f ef       	ldi	r19, 0xFF	; 255
    2c8c:	4f e7       	ldi	r20, 0x7F	; 127
    2c8e:	57 e4       	ldi	r21, 0x47	; 71
    2c90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c94:	18 16       	cp	r1, r24
    2c96:	4c f5       	brge	.+82     	; 0x2cea <LCD_Write_Char+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c98:	6c a1       	ldd	r22, Y+36	; 0x24
    2c9a:	7d a1       	ldd	r23, Y+37	; 0x25
    2c9c:	8e a1       	ldd	r24, Y+38	; 0x26
    2c9e:	9f a1       	ldd	r25, Y+39	; 0x27
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e2       	ldi	r20, 0x20	; 32
    2ca6:	51 e4       	ldi	r21, 0x41	; 65
    2ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9f 8f       	std	Y+31, r25	; 0x1f
    2cbe:	8e 8f       	std	Y+30, r24	; 0x1e
    2cc0:	0f c0       	rjmp	.+30     	; 0x2ce0 <LCD_Write_Char+0x8b8>
    2cc2:	88 ec       	ldi	r24, 0xC8	; 200
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	9d 8f       	std	Y+29, r25	; 0x1d
    2cc8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ccc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <LCD_Write_Char+0x8a6>
    2cd2:	9d 8f       	std	Y+29, r25	; 0x1d
    2cd4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cd8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	9f 8f       	std	Y+31, r25	; 0x1f
    2cde:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ce2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	69 f7       	brne	.-38     	; 0x2cc2 <LCD_Write_Char+0x89a>
    2ce8:	24 c0       	rjmp	.+72     	; 0x2d32 <LCD_Write_Char+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cea:	68 a1       	ldd	r22, Y+32	; 0x20
    2cec:	79 a1       	ldd	r23, Y+33	; 0x21
    2cee:	8a a1       	ldd	r24, Y+34	; 0x22
    2cf0:	9b a1       	ldd	r25, Y+35	; 0x23
    2cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	9f 8f       	std	Y+31, r25	; 0x1f
    2cfc:	8e 8f       	std	Y+30, r24	; 0x1e
    2cfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d00:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d02:	9b 8f       	std	Y+27, r25	; 0x1b
    2d04:	8a 8f       	std	Y+26, r24	; 0x1a
    2d06:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d08:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <LCD_Write_Char+0x8e2>
    2d0e:	9b 8f       	std	Y+27, r25	; 0x1b
    2d10:	8a 8f       	std	Y+26, r24	; 0x1a
    2d12:	0f c0       	rjmp	.+30     	; 0x2d32 <LCD_Write_Char+0x90a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d14:	69 a5       	ldd	r22, Y+41	; 0x29
    2d16:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	88 a7       	std	Y+40, r24	; 0x28
    2d26:	88 a5       	ldd	r24, Y+40	; 0x28
    2d28:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d2a:	89 8d       	ldd	r24, Y+25	; 0x19
    2d2c:	8a 95       	dec	r24
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <LCD_Write_Char+0x904>
    2d30:	89 8f       	std	Y+25, r24	; 0x19
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	a8 ec       	ldi	r26, 0xC8	; 200
    2d38:	b2 e4       	ldi	r27, 0x42	; 66
    2d3a:	8d 8b       	std	Y+21, r24	; 0x15
    2d3c:	9e 8b       	std	Y+22, r25	; 0x16
    2d3e:	af 8b       	std	Y+23, r26	; 0x17
    2d40:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d42:	6d 89       	ldd	r22, Y+21	; 0x15
    2d44:	7e 89       	ldd	r23, Y+22	; 0x16
    2d46:	8f 89       	ldd	r24, Y+23	; 0x17
    2d48:	98 8d       	ldd	r25, Y+24	; 0x18
    2d4a:	2b ea       	ldi	r18, 0xAB	; 171
    2d4c:	3a ea       	ldi	r19, 0xAA	; 170
    2d4e:	4a e2       	ldi	r20, 0x2A	; 42
    2d50:	50 e4       	ldi	r21, 0x40	; 64
    2d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	89 8b       	std	Y+17, r24	; 0x11
    2d5c:	9a 8b       	std	Y+18, r25	; 0x12
    2d5e:	ab 8b       	std	Y+19, r26	; 0x13
    2d60:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d62:	69 89       	ldd	r22, Y+17	; 0x11
    2d64:	7a 89       	ldd	r23, Y+18	; 0x12
    2d66:	8b 89       	ldd	r24, Y+19	; 0x13
    2d68:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e8       	ldi	r20, 0x80	; 128
    2d70:	5f e3       	ldi	r21, 0x3F	; 63
    2d72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d76:	88 23       	and	r24, r24
    2d78:	1c f4       	brge	.+6      	; 0x2d80 <LCD_Write_Char+0x958>
		__ticks = 1;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	88 8b       	std	Y+16, r24	; 0x10
    2d7e:	91 c0       	rjmp	.+290    	; 0x2ea2 <LCD_Write_Char+0xa7a>
	else if (__tmp > 255)
    2d80:	69 89       	ldd	r22, Y+17	; 0x11
    2d82:	7a 89       	ldd	r23, Y+18	; 0x12
    2d84:	8b 89       	ldd	r24, Y+19	; 0x13
    2d86:	9c 89       	ldd	r25, Y+20	; 0x14
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	4f e7       	ldi	r20, 0x7F	; 127
    2d8e:	53 e4       	ldi	r21, 0x43	; 67
    2d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d94:	18 16       	cp	r1, r24
    2d96:	0c f0       	brlt	.+2      	; 0x2d9a <LCD_Write_Char+0x972>
    2d98:	7b c0       	rjmp	.+246    	; 0x2e90 <LCD_Write_Char+0xa68>
	{
		_delay_ms(__us / 1000.0);
    2d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2da0:	98 8d       	ldd	r25, Y+24	; 0x18
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	4a e7       	ldi	r20, 0x7A	; 122
    2da8:	54 e4       	ldi	r21, 0x44	; 68
    2daa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	8c 87       	std	Y+12, r24	; 0x0c
    2db4:	9d 87       	std	Y+13, r25	; 0x0d
    2db6:	ae 87       	std	Y+14, r26	; 0x0e
    2db8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dba:	6c 85       	ldd	r22, Y+12	; 0x0c
    2dbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    2dbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4a ef       	ldi	r20, 0xFA	; 250
    2dc8:	54 e4       	ldi	r21, 0x44	; 68
    2dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	88 87       	std	Y+8, r24	; 0x08
    2dd4:	99 87       	std	Y+9, r25	; 0x09
    2dd6:	aa 87       	std	Y+10, r26	; 0x0a
    2dd8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2dda:	68 85       	ldd	r22, Y+8	; 0x08
    2ddc:	79 85       	ldd	r23, Y+9	; 0x09
    2dde:	8a 85       	ldd	r24, Y+10	; 0x0a
    2de0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	40 e8       	ldi	r20, 0x80	; 128
    2de8:	5f e3       	ldi	r21, 0x3F	; 63
    2dea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dee:	88 23       	and	r24, r24
    2df0:	2c f4       	brge	.+10     	; 0x2dfc <LCD_Write_Char+0x9d4>
		__ticks = 1;
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	9f 83       	std	Y+7, r25	; 0x07
    2df8:	8e 83       	std	Y+6, r24	; 0x06
    2dfa:	3f c0       	rjmp	.+126    	; 0x2e7a <LCD_Write_Char+0xa52>
	else if (__tmp > 65535)
    2dfc:	68 85       	ldd	r22, Y+8	; 0x08
    2dfe:	79 85       	ldd	r23, Y+9	; 0x09
    2e00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	3f ef       	ldi	r19, 0xFF	; 255
    2e08:	4f e7       	ldi	r20, 0x7F	; 127
    2e0a:	57 e4       	ldi	r21, 0x47	; 71
    2e0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e10:	18 16       	cp	r1, r24
    2e12:	4c f5       	brge	.+82     	; 0x2e66 <LCD_Write_Char+0xa3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e14:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e16:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e18:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e2       	ldi	r20, 0x20	; 32
    2e22:	51 e4       	ldi	r21, 0x41	; 65
    2e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	bc 01       	movw	r22, r24
    2e2e:	cd 01       	movw	r24, r26
    2e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9f 83       	std	Y+7, r25	; 0x07
    2e3a:	8e 83       	std	Y+6, r24	; 0x06
    2e3c:	0f c0       	rjmp	.+30     	; 0x2e5c <LCD_Write_Char+0xa34>
    2e3e:	88 ec       	ldi	r24, 0xC8	; 200
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	9d 83       	std	Y+5, r25	; 0x05
    2e44:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e46:	8c 81       	ldd	r24, Y+4	; 0x04
    2e48:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	f1 f7       	brne	.-4      	; 0x2e4a <LCD_Write_Char+0xa22>
    2e4e:	9d 83       	std	Y+5, r25	; 0x05
    2e50:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e52:	8e 81       	ldd	r24, Y+6	; 0x06
    2e54:	9f 81       	ldd	r25, Y+7	; 0x07
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	9f 83       	std	Y+7, r25	; 0x07
    2e5a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	69 f7       	brne	.-38     	; 0x2e3e <LCD_Write_Char+0xa16>
    2e64:	24 c0       	rjmp	.+72     	; 0x2eae <LCD_Write_Char+0xa86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e66:	68 85       	ldd	r22, Y+8	; 0x08
    2e68:	79 85       	ldd	r23, Y+9	; 0x09
    2e6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	9f 83       	std	Y+7, r25	; 0x07
    2e78:	8e 83       	std	Y+6, r24	; 0x06
    2e7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e7c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e7e:	9b 83       	std	Y+3, r25	; 0x03
    2e80:	8a 83       	std	Y+2, r24	; 0x02
    2e82:	8a 81       	ldd	r24, Y+2	; 0x02
    2e84:	9b 81       	ldd	r25, Y+3	; 0x03
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <LCD_Write_Char+0xa5e>
    2e8a:	9b 83       	std	Y+3, r25	; 0x03
    2e8c:	8a 83       	std	Y+2, r24	; 0x02
    2e8e:	0f c0       	rjmp	.+30     	; 0x2eae <LCD_Write_Char+0xa86>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e90:	69 89       	ldd	r22, Y+17	; 0x11
    2e92:	7a 89       	ldd	r23, Y+18	; 0x12
    2e94:	8b 89       	ldd	r24, Y+19	; 0x13
    2e96:	9c 89       	ldd	r25, Y+20	; 0x14
    2e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	88 8b       	std	Y+16, r24	; 0x10
    2ea2:	88 89       	ldd	r24, Y+16	; 0x10
    2ea4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	8a 95       	dec	r24
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <LCD_Write_Char+0xa80>
    2eac:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

	//wait 2 ms after every instruction
	_delay_us(100);
}
    2eae:	c7 58       	subi	r28, 0x87	; 135
    2eb0:	df 4f       	sbci	r29, 0xFF	; 255
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	1f 91       	pop	r17
    2ec2:	0f 91       	pop	r16
    2ec4:	08 95       	ret

00002ec6 <LCD_Write_String>:

void LCD_Write_String(u8* str)
{
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <LCD_Write_String+0x6>
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	0a c0       	rjmp	.+20     	; 0x2eea <LCD_Write_String+0x24>
	while(*str)
	{
		LCD_Write_Char(*str);
    2ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eda:	80 81       	ld	r24, Z
    2edc:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
		str++;
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	01 96       	adiw	r24, 0x01	; 1
    2ee6:	9a 83       	std	Y+2, r25	; 0x02
    2ee8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}

void LCD_Write_String(u8* str)
{
	while(*str)
    2eea:	e9 81       	ldd	r30, Y+1	; 0x01
    2eec:	fa 81       	ldd	r31, Y+2	; 0x02
    2eee:	80 81       	ld	r24, Z
    2ef0:	88 23       	and	r24, r24
    2ef2:	89 f7       	brne	.-30     	; 0x2ed6 <LCD_Write_String+0x10>
	{
		LCD_Write_Char(*str);
		str++;
	}
}
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <LCD_Function_Set>:


void LCD_Function_Set()
{
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
	LCD_Write_Cmd(0x20);
    2f06:	80 e2       	ldi	r24, 0x20	; 32
    2f08:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x20);
    2f0c:	80 e2       	ldi	r24, 0x20	; 32
    2f0e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x80);
    2f12:	80 e8       	ldi	r24, 0x80	; 128
    2f14:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
}
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	08 95       	ret

00002f1e <LCD_Display_Control>:

void LCD_Display_Control(u8 display,u8 cursor,u8 blinking)
{
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <LCD_Display_Control+0x6>
    2f24:	0f 92       	push	r0
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
    2f2a:	89 83       	std	Y+1, r24	; 0x01
    2f2c:	6a 83       	std	Y+2, r22	; 0x02
    2f2e:	4b 83       	std	Y+3, r20	; 0x03
	if(display == ON && cursor == ON && blinking == ON)
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	81 30       	cpi	r24, 0x01	; 1
    2f34:	69 f4       	brne	.+26     	; 0x2f50 <LCD_Display_Control+0x32>
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	81 30       	cpi	r24, 0x01	; 1
    2f3a:	51 f4       	brne	.+20     	; 0x2f50 <LCD_Display_Control+0x32>
    2f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3e:	81 30       	cpi	r24, 0x01	; 1
    2f40:	39 f4       	brne	.+14     	; 0x2f50 <LCD_Display_Control+0x32>
	{
		LCD_Write_Cmd(0x00);
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
		LCD_Write_Cmd(0xF0);
    2f48:	80 ef       	ldi	r24, 0xF0	; 240
    2f4a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
    2f4e:	3f c0       	rjmp	.+126    	; 0x2fce <LCD_Display_Control+0xb0>
	}

	else if(display == ON && cursor == OFF && blinking == OFF)
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	81 30       	cpi	r24, 0x01	; 1
    2f54:	69 f4       	brne	.+26     	; 0x2f70 <LCD_Display_Control+0x52>
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	88 23       	and	r24, r24
    2f5a:	51 f4       	brne	.+20     	; 0x2f70 <LCD_Display_Control+0x52>
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	88 23       	and	r24, r24
    2f60:	39 f4       	brne	.+14     	; 0x2f70 <LCD_Display_Control+0x52>
	{
		LCD_Write_Cmd(0x00);
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
		LCD_Write_Cmd(0xC0);
    2f68:	80 ec       	ldi	r24, 0xC0	; 192
    2f6a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
    2f6e:	2f c0       	rjmp	.+94     	; 0x2fce <LCD_Display_Control+0xb0>
	}
	else if(display == ON && cursor == ON && blinking == OFF)
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	81 30       	cpi	r24, 0x01	; 1
    2f74:	69 f4       	brne	.+26     	; 0x2f90 <LCD_Display_Control+0x72>
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	81 30       	cpi	r24, 0x01	; 1
    2f7a:	51 f4       	brne	.+20     	; 0x2f90 <LCD_Display_Control+0x72>
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	88 23       	and	r24, r24
    2f80:	39 f4       	brne	.+14     	; 0x2f90 <LCD_Display_Control+0x72>
	{
		LCD_Write_Cmd(0x00);
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
		LCD_Write_Cmd(0xE0);
    2f88:	80 ee       	ldi	r24, 0xE0	; 224
    2f8a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
    2f8e:	1f c0       	rjmp	.+62     	; 0x2fce <LCD_Display_Control+0xb0>
	}
	else if(display == ON && cursor == OFF && blinking == ON)
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	81 30       	cpi	r24, 0x01	; 1
    2f94:	69 f4       	brne	.+26     	; 0x2fb0 <LCD_Display_Control+0x92>
    2f96:	8a 81       	ldd	r24, Y+2	; 0x02
    2f98:	88 23       	and	r24, r24
    2f9a:	51 f4       	brne	.+20     	; 0x2fb0 <LCD_Display_Control+0x92>
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	81 30       	cpi	r24, 0x01	; 1
    2fa0:	39 f4       	brne	.+14     	; 0x2fb0 <LCD_Display_Control+0x92>
	{
		LCD_Write_Cmd(0x00);
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
		LCD_Write_Cmd(0xD0);
    2fa8:	80 ed       	ldi	r24, 0xD0	; 208
    2faa:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
    2fae:	0f c0       	rjmp	.+30     	; 0x2fce <LCD_Display_Control+0xb0>
	}
	else if(display == OFF && cursor == OFF && blinking == OFF)
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	88 23       	and	r24, r24
    2fb4:	61 f4       	brne	.+24     	; 0x2fce <LCD_Display_Control+0xb0>
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	88 23       	and	r24, r24
    2fba:	49 f4       	brne	.+18     	; 0x2fce <LCD_Display_Control+0xb0>
    2fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbe:	88 23       	and	r24, r24
    2fc0:	31 f4       	brne	.+12     	; 0x2fce <LCD_Display_Control+0xb0>
	{
		LCD_Write_Cmd(0x00);
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
		LCD_Write_Cmd(0x80);
    2fc8:	80 e8       	ldi	r24, 0x80	; 128
    2fca:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
	}

}
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <LCD_Clear_Screen>:

void LCD_Clear_Screen()
{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
	LCD_Write_Cmd(0x00);
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x01);
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
}
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <LCD_EntryMode>:

void LCD_EntryMode()
{
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
	LCD_Write_Cmd(0x00);
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
	LCD_Write_Cmd(0x60);
    3002:	80 e6       	ldi	r24, 0x60	; 96
    3004:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
}
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <LCD_GoTo_XY>:

void LCD_GoTo_XY(u8 x,u8 y)
{
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	00 d0       	rcall	.+0      	; 0x3014 <LCD_GoTo_XY+0x6>
    3014:	00 d0       	rcall	.+0      	; 0x3016 <LCD_GoTo_XY+0x8>
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	89 83       	std	Y+1, r24	; 0x01
    301c:	6a 83       	std	Y+2, r22	; 0x02
	switch(x)
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	28 2f       	mov	r18, r24
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	3c 83       	std	Y+4, r19	; 0x04
    3026:	2b 83       	std	Y+3, r18	; 0x03
    3028:	8b 81       	ldd	r24, Y+3	; 0x03
    302a:	9c 81       	ldd	r25, Y+4	; 0x04
    302c:	81 30       	cpi	r24, 0x01	; 1
    302e:	91 05       	cpc	r25, r1
    3030:	31 f0       	breq	.+12     	; 0x303e <LCD_GoTo_XY+0x30>
    3032:	2b 81       	ldd	r18, Y+3	; 0x03
    3034:	3c 81       	ldd	r19, Y+4	; 0x04
    3036:	22 30       	cpi	r18, 0x02	; 2
    3038:	31 05       	cpc	r19, r1
    303a:	31 f0       	breq	.+12     	; 0x3048 <LCD_GoTo_XY+0x3a>
    303c:	09 c0       	rjmp	.+18     	; 0x3050 <LCD_GoTo_XY+0x42>
	{
	case 1:
		LCD_Write_Cmd(y+127);
    303e:	8a 81       	ldd	r24, Y+2	; 0x02
    3040:	81 58       	subi	r24, 0x81	; 129
    3042:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
    3046:	04 c0       	rjmp	.+8      	; 0x3050 <LCD_GoTo_XY+0x42>
		break;
	case 2:
		LCD_Write_Cmd(y+191);
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	81 54       	subi	r24, 0x41	; 65
    304c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
		break;
	}
}
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <LCD_ClearLine>:

void LCD_ClearLine(u8 line)
{
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	0f 92       	push	r0
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	89 83       	std	Y+1, r24	; 0x01
	LCD_GoTo_XY(line,1);
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	61 e0       	ldi	r22, 0x01	; 1
    306e:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_GoTo_XY>
	LCD_Write_String("                ");
    3072:	80 e6       	ldi	r24, 0x60	; 96
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
}
    307a:	0f 90       	pop	r0
    307c:	cf 91       	pop	r28
    307e:	df 91       	pop	r29
    3080:	08 95       	ret

00003082 <LCD_Cursor_Shift>:


void LCD_Cursor_Shift(unsigned char direction)
{
    3082:	df 93       	push	r29
    3084:	cf 93       	push	r28
    3086:	0f 92       	push	r0
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	89 83       	std	Y+1, r24	; 0x01
	if (direction == RIGHT)
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	81 30       	cpi	r24, 0x01	; 1
    3092:	21 f4       	brne	.+8      	; 0x309c <LCD_Cursor_Shift+0x1a>
	{
		LCD_Write_Cmd(0x14);				// shift cursor 1 step to right
    3094:	84 e1       	ldi	r24, 0x14	; 20
    3096:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
    309a:	06 c0       	rjmp	.+12     	; 0x30a8 <LCD_Cursor_Shift+0x26>
	}
	else if (direction == LEFT)
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	88 23       	and	r24, r24
    30a0:	19 f4       	brne	.+6      	; 0x30a8 <LCD_Cursor_Shift+0x26>
	{
		LCD_Write_Cmd(0x10);				// shift cursor 1 step to left
    30a2:	80 e1       	ldi	r24, 0x10	; 16
    30a4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
	}
}
    30a8:	0f 90       	pop	r0
    30aa:	cf 91       	pop	r28
    30ac:	df 91       	pop	r29
    30ae:	08 95       	ret

000030b0 <LCD_Display_Shift>:


void LCD_Display_Shift(unsigned char direction)
{
    30b0:	df 93       	push	r29
    30b2:	cf 93       	push	r28
    30b4:	0f 92       	push	r0
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	89 83       	std	Y+1, r24	; 0x01
	if (direction == RIGHT)
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	81 30       	cpi	r24, 0x01	; 1
    30c0:	21 f4       	brne	.+8      	; 0x30ca <LCD_Display_Shift+0x1a>
	{
		LCD_Write_Cmd(0x1c);				// shift data on LCD 1 step to right
    30c2:	8c e1       	ldi	r24, 0x1C	; 28
    30c4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
    30c8:	06 c0       	rjmp	.+12     	; 0x30d6 <LCD_Display_Shift+0x26>
	}
	else if (direction == LEFT)
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	88 23       	and	r24, r24
    30ce:	19 f4       	brne	.+6      	; 0x30d6 <LCD_Display_Shift+0x26>
	{
		LCD_Write_Cmd(0x18);				// shift data on LCD 1 step to left
    30d0:	88 e1       	ldi	r24, 0x18	; 24
    30d2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
	}
}
    30d6:	0f 90       	pop	r0
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <LCD_WriteExtraChar>:

void LCD_WriteExtraChar (u8* ExtraChar,u8 Y,u8 X)
{
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	64 97       	sbiw	r28, 0x14	; 20
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	9a 8b       	std	Y+18, r25	; 0x12
    30f4:	89 8b       	std	Y+17, r24	; 0x11
    30f6:	6b 8b       	std	Y+19, r22	; 0x13
    30f8:	4c 8b       	std	Y+20, r20	; 0x14
    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_Write_Cmd(64);
    30fa:	80 e4       	ldi	r24, 0x40	; 64
    30fc:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    3100:	18 8a       	std	Y+16, r1	; 0x10
    3102:	0e c0       	rjmp	.+28     	; 0x3120 <LCD_WriteExtraChar+0x42>
	{
		LCD_Write_Char(ExtraChar[iteration1]);
    3104:	88 89       	ldd	r24, Y+16	; 0x10
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	89 89       	ldd	r24, Y+17	; 0x11
    310c:	9a 89       	ldd	r25, Y+18	; 0x12
    310e:	fc 01       	movw	r30, r24
    3110:	e2 0f       	add	r30, r18
    3112:	f3 1f       	adc	r31, r19
    3114:	80 81       	ld	r24, Z
    3116:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
{
    u8 iteration1,iteration2;

    /*DDRAM-->CGRAM*/
    LCD_Write_Cmd(64);
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    311a:	88 89       	ldd	r24, Y+16	; 0x10
    311c:	8f 5f       	subi	r24, 0xFF	; 255
    311e:	88 8b       	std	Y+16, r24	; 0x10
    3120:	88 89       	ldd	r24, Y+16	; 0x10
    3122:	80 34       	cpi	r24, 0x40	; 64
    3124:	78 f3       	brcs	.-34     	; 0x3104 <LCD_WriteExtraChar+0x26>
	{
		LCD_Write_Char(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_Write_Cmd(128);
    3126:	80 e8       	ldi	r24, 0x80	; 128
    3128:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_Write_Cmd>
	LCD_GoTo_XY(Y,X);
    312c:	8b 89       	ldd	r24, Y+19	; 0x13
    312e:	6c 89       	ldd	r22, Y+20	; 0x14
    3130:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_GoTo_XY>
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    3134:	1f 86       	std	Y+15, r1	; 0x0f
    3136:	78 c0       	rjmp	.+240    	; 0x3228 <LCD_WriteExtraChar+0x14a>
	{
		/* Write bytes of DDRAM */
		LCD_Write_Char(iteration2);
    3138:	8f 85       	ldd	r24, Y+15	; 0x0f
    313a:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	a0 ea       	ldi	r26, 0xA0	; 160
    3144:	b0 e4       	ldi	r27, 0x40	; 64
    3146:	8b 87       	std	Y+11, r24	; 0x0b
    3148:	9c 87       	std	Y+12, r25	; 0x0c
    314a:	ad 87       	std	Y+13, r26	; 0x0d
    314c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3150:	7c 85       	ldd	r23, Y+12	; 0x0c
    3152:	8d 85       	ldd	r24, Y+13	; 0x0d
    3154:	9e 85       	ldd	r25, Y+14	; 0x0e
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	4a ef       	ldi	r20, 0xFA	; 250
    315c:	54 e4       	ldi	r21, 0x44	; 68
    315e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	8f 83       	std	Y+7, r24	; 0x07
    3168:	98 87       	std	Y+8, r25	; 0x08
    316a:	a9 87       	std	Y+9, r26	; 0x09
    316c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    316e:	6f 81       	ldd	r22, Y+7	; 0x07
    3170:	78 85       	ldd	r23, Y+8	; 0x08
    3172:	89 85       	ldd	r24, Y+9	; 0x09
    3174:	9a 85       	ldd	r25, Y+10	; 0x0a
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e8       	ldi	r20, 0x80	; 128
    317c:	5f e3       	ldi	r21, 0x3F	; 63
    317e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3182:	88 23       	and	r24, r24
    3184:	2c f4       	brge	.+10     	; 0x3190 <LCD_WriteExtraChar+0xb2>
		__ticks = 1;
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	9e 83       	std	Y+6, r25	; 0x06
    318c:	8d 83       	std	Y+5, r24	; 0x05
    318e:	3f c0       	rjmp	.+126    	; 0x320e <LCD_WriteExtraChar+0x130>
	else if (__tmp > 65535)
    3190:	6f 81       	ldd	r22, Y+7	; 0x07
    3192:	78 85       	ldd	r23, Y+8	; 0x08
    3194:	89 85       	ldd	r24, Y+9	; 0x09
    3196:	9a 85       	ldd	r25, Y+10	; 0x0a
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	3f ef       	ldi	r19, 0xFF	; 255
    319c:	4f e7       	ldi	r20, 0x7F	; 127
    319e:	57 e4       	ldi	r21, 0x47	; 71
    31a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a4:	18 16       	cp	r1, r24
    31a6:	4c f5       	brge	.+82     	; 0x31fa <LCD_WriteExtraChar+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	40 e2       	ldi	r20, 0x20	; 32
    31b6:	51 e4       	ldi	r21, 0x41	; 65
    31b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	9e 83       	std	Y+6, r25	; 0x06
    31ce:	8d 83       	std	Y+5, r24	; 0x05
    31d0:	0f c0       	rjmp	.+30     	; 0x31f0 <LCD_WriteExtraChar+0x112>
    31d2:	88 ec       	ldi	r24, 0xC8	; 200
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	9c 83       	std	Y+4, r25	; 0x04
    31d8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31da:	8b 81       	ldd	r24, Y+3	; 0x03
    31dc:	9c 81       	ldd	r25, Y+4	; 0x04
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	f1 f7       	brne	.-4      	; 0x31de <LCD_WriteExtraChar+0x100>
    31e2:	9c 83       	std	Y+4, r25	; 0x04
    31e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e6:	8d 81       	ldd	r24, Y+5	; 0x05
    31e8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	9e 83       	std	Y+6, r25	; 0x06
    31ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f0:	8d 81       	ldd	r24, Y+5	; 0x05
    31f2:	9e 81       	ldd	r25, Y+6	; 0x06
    31f4:	00 97       	sbiw	r24, 0x00	; 0
    31f6:	69 f7       	brne	.-38     	; 0x31d2 <LCD_WriteExtraChar+0xf4>
    31f8:	14 c0       	rjmp	.+40     	; 0x3222 <LCD_WriteExtraChar+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fa:	6f 81       	ldd	r22, Y+7	; 0x07
    31fc:	78 85       	ldd	r23, Y+8	; 0x08
    31fe:	89 85       	ldd	r24, Y+9	; 0x09
    3200:	9a 85       	ldd	r25, Y+10	; 0x0a
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	9e 83       	std	Y+6, r25	; 0x06
    320c:	8d 83       	std	Y+5, r24	; 0x05
    320e:	8d 81       	ldd	r24, Y+5	; 0x05
    3210:	9e 81       	ldd	r25, Y+6	; 0x06
    3212:	9a 83       	std	Y+2, r25	; 0x02
    3214:	89 83       	std	Y+1, r24	; 0x01
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	9a 81       	ldd	r25, Y+2	; 0x02
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	f1 f7       	brne	.-4      	; 0x321a <LCD_WriteExtraChar+0x13c>
    321e:	9a 83       	std	Y+2, r25	; 0x02
    3220:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_Write_Cmd(128);
	LCD_GoTo_XY(Y,X);
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    3222:	8f 85       	ldd	r24, Y+15	; 0x0f
    3224:	8f 5f       	subi	r24, 0xFF	; 255
    3226:	8f 87       	std	Y+15, r24	; 0x0f
    3228:	8f 85       	ldd	r24, Y+15	; 0x0f
    322a:	88 30       	cpi	r24, 0x08	; 8
    322c:	08 f4       	brcc	.+2      	; 0x3230 <LCD_WriteExtraChar+0x152>
    322e:	84 cf       	rjmp	.-248    	; 0x3138 <LCD_WriteExtraChar+0x5a>
		/* Write bytes of DDRAM */
		LCD_Write_Char(iteration2);

		_delay_ms(5);
	}
}
    3230:	64 96       	adiw	r28, 0x14	; 20
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <LCD_Print_Int>:

void LCD_Print_Int(f32 integer)
{
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	e6 97       	sbiw	r28, 0x36	; 54
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	69 8b       	std	Y+17, r22	; 0x11
    3260:	7a 8b       	std	Y+18, r23	; 0x12
    3262:	8b 8b       	std	Y+19, r24	; 0x13
    3264:	9c 8b       	std	Y+20, r25	; 0x14
	s32 fraction = 0;
    3266:	1d 86       	std	Y+13, r1	; 0x0d
    3268:	1e 86       	std	Y+14, r1	; 0x0e
    326a:	1f 86       	std	Y+15, r1	; 0x0f
    326c:	18 8a       	std	Y+16, r1	; 0x10
	s32 thousands = 0;
    326e:	19 86       	std	Y+9, r1	; 0x09
    3270:	1a 86       	std	Y+10, r1	; 0x0a
    3272:	1b 86       	std	Y+11, r1	; 0x0b
    3274:	1c 86       	std	Y+12, r1	; 0x0c
	s32 dozens = 0;
    3276:	1d 82       	std	Y+5, r1	; 0x05
    3278:	1e 82       	std	Y+6, r1	; 0x06
    327a:	1f 82       	std	Y+7, r1	; 0x07
    327c:	18 86       	std	Y+8, r1	; 0x08
	s32 ones = 0;
    327e:	19 82       	std	Y+1, r1	; 0x01
    3280:	1a 82       	std	Y+2, r1	; 0x02
    3282:	1b 82       	std	Y+3, r1	; 0x03
    3284:	1c 82       	std	Y+4, r1	; 0x04
	if(integer<=1000 && integer>=0)
    3286:	1e 8a       	std	Y+22, r1	; 0x16
    3288:	69 89       	ldd	r22, Y+17	; 0x11
    328a:	7a 89       	ldd	r23, Y+18	; 0x12
    328c:	8b 89       	ldd	r24, Y+19	; 0x13
    328e:	9c 89       	ldd	r25, Y+20	; 0x14
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	4a e7       	ldi	r20, 0x7A	; 122
    3296:	54 e4       	ldi	r21, 0x44	; 68
    3298:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    329c:	18 16       	cp	r1, r24
    329e:	14 f0       	brlt	.+4      	; 0x32a4 <LCD_Print_Int+0x62>
    32a0:	01 e0       	ldi	r16, 0x01	; 1
    32a2:	0e 8b       	std	Y+22, r16	; 0x16
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	1e 89       	ldd	r17, Y+22	; 0x16
    32a8:	81 27       	eor	r24, r17
    32aa:	88 23       	and	r24, r24
    32ac:	09 f0       	breq	.+2      	; 0x32b0 <LCD_Print_Int+0x6e>
    32ae:	5b c3       	rjmp	.+1718   	; 0x3966 <LCD_Print_Int+0x724>
    32b0:	1d 8a       	std	Y+21, r1	; 0x15
    32b2:	69 89       	ldd	r22, Y+17	; 0x11
    32b4:	7a 89       	ldd	r23, Y+18	; 0x12
    32b6:	8b 89       	ldd	r24, Y+19	; 0x13
    32b8:	9c 89       	ldd	r25, Y+20	; 0x14
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	50 e0       	ldi	r21, 0x00	; 0
    32c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    32c6:	88 23       	and	r24, r24
    32c8:	14 f0       	brlt	.+4      	; 0x32ce <LCD_Print_Int+0x8c>
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	8d 8b       	std	Y+21, r24	; 0x15
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	9d 89       	ldd	r25, Y+21	; 0x15
    32d2:	89 27       	eor	r24, r25
    32d4:	88 23       	and	r24, r24
    32d6:	09 f0       	breq	.+2      	; 0x32da <LCD_Print_Int+0x98>
    32d8:	46 c3       	rjmp	.+1676   	; 0x3966 <LCD_Print_Int+0x724>
	{
		fraction = integer*10;
    32da:	69 89       	ldd	r22, Y+17	; 0x11
    32dc:	7a 89       	ldd	r23, Y+18	; 0x12
    32de:	8b 89       	ldd	r24, Y+19	; 0x13
    32e0:	9c 89       	ldd	r25, Y+20	; 0x14
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	40 e2       	ldi	r20, 0x20	; 32
    32e8:	51 e4       	ldi	r21, 0x41	; 65
    32ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	bc 01       	movw	r22, r24
    32f4:	cd 01       	movw	r24, r26
    32f6:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	8d 87       	std	Y+13, r24	; 0x0d
    3300:	9e 87       	std	Y+14, r25	; 0x0e
    3302:	af 87       	std	Y+15, r26	; 0x0f
    3304:	b8 8b       	std	Y+16, r27	; 0x10
		fraction = fraction%10;
    3306:	8d 85       	ldd	r24, Y+13	; 0x0d
    3308:	9e 85       	ldd	r25, Y+14	; 0x0e
    330a:	af 85       	ldd	r26, Y+15	; 0x0f
    330c:	b8 89       	ldd	r27, Y+16	; 0x10
    330e:	2a e0       	ldi	r18, 0x0A	; 10
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	40 e0       	ldi	r20, 0x00	; 0
    3314:	50 e0       	ldi	r21, 0x00	; 0
    3316:	bc 01       	movw	r22, r24
    3318:	cd 01       	movw	r24, r26
    331a:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	8d 87       	std	Y+13, r24	; 0x0d
    3324:	9e 87       	std	Y+14, r25	; 0x0e
    3326:	af 87       	std	Y+15, r26	; 0x0f
    3328:	b8 8b       	std	Y+16, r27	; 0x10
		thousands = (s32)integer%10;
    332a:	69 89       	ldd	r22, Y+17	; 0x11
    332c:	7a 89       	ldd	r23, Y+18	; 0x12
    332e:	8b 89       	ldd	r24, Y+19	; 0x13
    3330:	9c 89       	ldd	r25, Y+20	; 0x14
    3332:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	2a e0       	ldi	r18, 0x0A	; 10
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	40 e0       	ldi	r20, 0x00	; 0
    3340:	50 e0       	ldi	r21, 0x00	; 0
    3342:	bc 01       	movw	r22, r24
    3344:	cd 01       	movw	r24, r26
    3346:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	89 87       	std	Y+9, r24	; 0x09
    3350:	9a 87       	std	Y+10, r25	; 0x0a
    3352:	ab 87       	std	Y+11, r26	; 0x0b
    3354:	bc 87       	std	Y+12, r27	; 0x0c
		dozens = (((s32)integer-thousands)/10)%10;
    3356:	69 89       	ldd	r22, Y+17	; 0x11
    3358:	7a 89       	ldd	r23, Y+18	; 0x12
    335a:	8b 89       	ldd	r24, Y+19	; 0x13
    335c:	9c 89       	ldd	r25, Y+20	; 0x14
    335e:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3362:	9b 01       	movw	r18, r22
    3364:	ac 01       	movw	r20, r24
    3366:	89 85       	ldd	r24, Y+9	; 0x09
    3368:	9a 85       	ldd	r25, Y+10	; 0x0a
    336a:	ab 85       	ldd	r26, Y+11	; 0x0b
    336c:	bc 85       	ldd	r27, Y+12	; 0x0c
    336e:	79 01       	movw	r14, r18
    3370:	8a 01       	movw	r16, r20
    3372:	e8 1a       	sub	r14, r24
    3374:	f9 0a       	sbc	r15, r25
    3376:	0a 0b       	sbc	r16, r26
    3378:	1b 0b       	sbc	r17, r27
    337a:	d8 01       	movw	r26, r16
    337c:	c7 01       	movw	r24, r14
    337e:	2a e0       	ldi	r18, 0x0A	; 10
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	40 e0       	ldi	r20, 0x00	; 0
    3384:	50 e0       	ldi	r21, 0x00	; 0
    3386:	bc 01       	movw	r22, r24
    3388:	cd 01       	movw	r24, r26
    338a:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    338e:	da 01       	movw	r26, r20
    3390:	c9 01       	movw	r24, r18
    3392:	2a e0       	ldi	r18, 0x0A	; 10
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	40 e0       	ldi	r20, 0x00	; 0
    3398:	50 e0       	ldi	r21, 0x00	; 0
    339a:	bc 01       	movw	r22, r24
    339c:	cd 01       	movw	r24, r26
    339e:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	8d 83       	std	Y+5, r24	; 0x05
    33a8:	9e 83       	std	Y+6, r25	; 0x06
    33aa:	af 83       	std	Y+7, r26	; 0x07
    33ac:	b8 87       	std	Y+8, r27	; 0x08
		ones = (((s32)integer-dozens)/100)%10;
    33ae:	69 89       	ldd	r22, Y+17	; 0x11
    33b0:	7a 89       	ldd	r23, Y+18	; 0x12
    33b2:	8b 89       	ldd	r24, Y+19	; 0x13
    33b4:	9c 89       	ldd	r25, Y+20	; 0x14
    33b6:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    33ba:	9b 01       	movw	r18, r22
    33bc:	ac 01       	movw	r20, r24
    33be:	8d 81       	ldd	r24, Y+5	; 0x05
    33c0:	9e 81       	ldd	r25, Y+6	; 0x06
    33c2:	af 81       	ldd	r26, Y+7	; 0x07
    33c4:	b8 85       	ldd	r27, Y+8	; 0x08
    33c6:	79 01       	movw	r14, r18
    33c8:	8a 01       	movw	r16, r20
    33ca:	e8 1a       	sub	r14, r24
    33cc:	f9 0a       	sbc	r15, r25
    33ce:	0a 0b       	sbc	r16, r26
    33d0:	1b 0b       	sbc	r17, r27
    33d2:	d8 01       	movw	r26, r16
    33d4:	c7 01       	movw	r24, r14
    33d6:	24 e6       	ldi	r18, 0x64	; 100
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	40 e0       	ldi	r20, 0x00	; 0
    33dc:	50 e0       	ldi	r21, 0x00	; 0
    33de:	bc 01       	movw	r22, r24
    33e0:	cd 01       	movw	r24, r26
    33e2:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    33e6:	da 01       	movw	r26, r20
    33e8:	c9 01       	movw	r24, r18
    33ea:	2a e0       	ldi	r18, 0x0A	; 10
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	40 e0       	ldi	r20, 0x00	; 0
    33f0:	50 e0       	ldi	r21, 0x00	; 0
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	89 83       	std	Y+1, r24	; 0x01
    3400:	9a 83       	std	Y+2, r25	; 0x02
    3402:	ab 83       	std	Y+3, r26	; 0x03
    3404:	bc 83       	std	Y+4, r27	; 0x04

		switch(ones)
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	9a 81       	ldd	r25, Y+2	; 0x02
    340a:	ab 81       	ldd	r26, Y+3	; 0x03
    340c:	bc 81       	ldd	r27, Y+4	; 0x04
    340e:	8f 8b       	std	Y+23, r24	; 0x17
    3410:	98 8f       	std	Y+24, r25	; 0x18
    3412:	a9 8f       	std	Y+25, r26	; 0x19
    3414:	ba 8f       	std	Y+26, r27	; 0x1a
    3416:	8f 89       	ldd	r24, Y+23	; 0x17
    3418:	98 8d       	ldd	r25, Y+24	; 0x18
    341a:	a9 8d       	ldd	r26, Y+25	; 0x19
    341c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    341e:	85 30       	cpi	r24, 0x05	; 5
    3420:	91 05       	cpc	r25, r1
    3422:	a1 05       	cpc	r26, r1
    3424:	b1 05       	cpc	r27, r1
    3426:	09 f4       	brne	.+2      	; 0x342a <LCD_Print_Int+0x1e8>
    3428:	6e c0       	rjmp	.+220    	; 0x3506 <LCD_Print_Int+0x2c4>
    342a:	8f 89       	ldd	r24, Y+23	; 0x17
    342c:	98 8d       	ldd	r25, Y+24	; 0x18
    342e:	a9 8d       	ldd	r26, Y+25	; 0x19
    3430:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3432:	86 30       	cpi	r24, 0x06	; 6
    3434:	91 05       	cpc	r25, r1
    3436:	a1 05       	cpc	r26, r1
    3438:	b1 05       	cpc	r27, r1
    343a:	84 f5       	brge	.+96     	; 0x349c <LCD_Print_Int+0x25a>
    343c:	8f 89       	ldd	r24, Y+23	; 0x17
    343e:	98 8d       	ldd	r25, Y+24	; 0x18
    3440:	a9 8d       	ldd	r26, Y+25	; 0x19
    3442:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3444:	82 30       	cpi	r24, 0x02	; 2
    3446:	91 05       	cpc	r25, r1
    3448:	a1 05       	cpc	r26, r1
    344a:	b1 05       	cpc	r27, r1
    344c:	09 f4       	brne	.+2      	; 0x3450 <LCD_Print_Int+0x20e>
    344e:	4f c0       	rjmp	.+158    	; 0x34ee <LCD_Print_Int+0x2ac>
    3450:	8f 89       	ldd	r24, Y+23	; 0x17
    3452:	98 8d       	ldd	r25, Y+24	; 0x18
    3454:	a9 8d       	ldd	r26, Y+25	; 0x19
    3456:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3458:	83 30       	cpi	r24, 0x03	; 3
    345a:	91 05       	cpc	r25, r1
    345c:	a1 05       	cpc	r26, r1
    345e:	b1 05       	cpc	r27, r1
    3460:	54 f4       	brge	.+20     	; 0x3476 <LCD_Print_Int+0x234>
    3462:	8f 89       	ldd	r24, Y+23	; 0x17
    3464:	98 8d       	ldd	r25, Y+24	; 0x18
    3466:	a9 8d       	ldd	r26, Y+25	; 0x19
    3468:	ba 8d       	ldd	r27, Y+26	; 0x1a
    346a:	81 30       	cpi	r24, 0x01	; 1
    346c:	91 05       	cpc	r25, r1
    346e:	a1 05       	cpc	r26, r1
    3470:	b1 05       	cpc	r27, r1
    3472:	c9 f1       	breq	.+114    	; 0x34e6 <LCD_Print_Int+0x2a4>
    3474:	5b c0       	rjmp	.+182    	; 0x352c <LCD_Print_Int+0x2ea>
    3476:	8f 89       	ldd	r24, Y+23	; 0x17
    3478:	98 8d       	ldd	r25, Y+24	; 0x18
    347a:	a9 8d       	ldd	r26, Y+25	; 0x19
    347c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    347e:	83 30       	cpi	r24, 0x03	; 3
    3480:	91 05       	cpc	r25, r1
    3482:	a1 05       	cpc	r26, r1
    3484:	b1 05       	cpc	r27, r1
    3486:	b9 f1       	breq	.+110    	; 0x34f6 <LCD_Print_Int+0x2b4>
    3488:	8f 89       	ldd	r24, Y+23	; 0x17
    348a:	98 8d       	ldd	r25, Y+24	; 0x18
    348c:	a9 8d       	ldd	r26, Y+25	; 0x19
    348e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3490:	84 30       	cpi	r24, 0x04	; 4
    3492:	91 05       	cpc	r25, r1
    3494:	a1 05       	cpc	r26, r1
    3496:	b1 05       	cpc	r27, r1
    3498:	91 f1       	breq	.+100    	; 0x34fe <LCD_Print_Int+0x2bc>
    349a:	48 c0       	rjmp	.+144    	; 0x352c <LCD_Print_Int+0x2ea>
    349c:	8f 89       	ldd	r24, Y+23	; 0x17
    349e:	98 8d       	ldd	r25, Y+24	; 0x18
    34a0:	a9 8d       	ldd	r26, Y+25	; 0x19
    34a2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    34a4:	87 30       	cpi	r24, 0x07	; 7
    34a6:	91 05       	cpc	r25, r1
    34a8:	a1 05       	cpc	r26, r1
    34aa:	b1 05       	cpc	r27, r1
    34ac:	a1 f1       	breq	.+104    	; 0x3516 <LCD_Print_Int+0x2d4>
    34ae:	8f 89       	ldd	r24, Y+23	; 0x17
    34b0:	98 8d       	ldd	r25, Y+24	; 0x18
    34b2:	a9 8d       	ldd	r26, Y+25	; 0x19
    34b4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    34b6:	87 30       	cpi	r24, 0x07	; 7
    34b8:	91 05       	cpc	r25, r1
    34ba:	a1 05       	cpc	r26, r1
    34bc:	b1 05       	cpc	r27, r1
    34be:	3c f1       	brlt	.+78     	; 0x350e <LCD_Print_Int+0x2cc>
    34c0:	8f 89       	ldd	r24, Y+23	; 0x17
    34c2:	98 8d       	ldd	r25, Y+24	; 0x18
    34c4:	a9 8d       	ldd	r26, Y+25	; 0x19
    34c6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    34c8:	88 30       	cpi	r24, 0x08	; 8
    34ca:	91 05       	cpc	r25, r1
    34cc:	a1 05       	cpc	r26, r1
    34ce:	b1 05       	cpc	r27, r1
    34d0:	31 f1       	breq	.+76     	; 0x351e <LCD_Print_Int+0x2dc>
    34d2:	8f 89       	ldd	r24, Y+23	; 0x17
    34d4:	98 8d       	ldd	r25, Y+24	; 0x18
    34d6:	a9 8d       	ldd	r26, Y+25	; 0x19
    34d8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    34da:	89 30       	cpi	r24, 0x09	; 9
    34dc:	91 05       	cpc	r25, r1
    34de:	a1 05       	cpc	r26, r1
    34e0:	b1 05       	cpc	r27, r1
    34e2:	09 f1       	breq	.+66     	; 0x3526 <LCD_Print_Int+0x2e4>
    34e4:	23 c0       	rjmp	.+70     	; 0x352c <LCD_Print_Int+0x2ea>
		{
		//case 0:LCD_Write_Char('0');break;
		case 1:LCD_Write_Char('1');break;
    34e6:	81 e3       	ldi	r24, 0x31	; 49
    34e8:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    34ec:	1f c0       	rjmp	.+62     	; 0x352c <LCD_Print_Int+0x2ea>
		case 2:LCD_Write_Char('2');break;
    34ee:	82 e3       	ldi	r24, 0x32	; 50
    34f0:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    34f4:	1b c0       	rjmp	.+54     	; 0x352c <LCD_Print_Int+0x2ea>
		case 3:LCD_Write_Char('3');break;
    34f6:	83 e3       	ldi	r24, 0x33	; 51
    34f8:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    34fc:	17 c0       	rjmp	.+46     	; 0x352c <LCD_Print_Int+0x2ea>
		case 4:LCD_Write_Char('4');break;
    34fe:	84 e3       	ldi	r24, 0x34	; 52
    3500:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3504:	13 c0       	rjmp	.+38     	; 0x352c <LCD_Print_Int+0x2ea>
		case 5:LCD_Write_Char('5');break;
    3506:	85 e3       	ldi	r24, 0x35	; 53
    3508:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    350c:	0f c0       	rjmp	.+30     	; 0x352c <LCD_Print_Int+0x2ea>
		case 6:LCD_Write_Char('6');break;
    350e:	86 e3       	ldi	r24, 0x36	; 54
    3510:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3514:	0b c0       	rjmp	.+22     	; 0x352c <LCD_Print_Int+0x2ea>
		case 7:LCD_Write_Char('7');break;
    3516:	87 e3       	ldi	r24, 0x37	; 55
    3518:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    351c:	07 c0       	rjmp	.+14     	; 0x352c <LCD_Print_Int+0x2ea>
		case 8:LCD_Write_Char('8');break;
    351e:	88 e3       	ldi	r24, 0x38	; 56
    3520:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3524:	03 c0       	rjmp	.+6      	; 0x352c <LCD_Print_Int+0x2ea>
		case 9:LCD_Write_Char('9');break;
    3526:	89 e3       	ldi	r24, 0x39	; 57
    3528:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
		}

		switch(dozens)
    352c:	ed 80       	ldd	r14, Y+5	; 0x05
    352e:	fe 80       	ldd	r15, Y+6	; 0x06
    3530:	0f 81       	ldd	r16, Y+7	; 0x07
    3532:	18 85       	ldd	r17, Y+8	; 0x08
    3534:	eb 8e       	std	Y+27, r14	; 0x1b
    3536:	fc 8e       	std	Y+28, r15	; 0x1c
    3538:	0d 8f       	std	Y+29, r16	; 0x1d
    353a:	1e 8f       	std	Y+30, r17	; 0x1e
    353c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    353e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3540:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3542:	be 8d       	ldd	r27, Y+30	; 0x1e
    3544:	84 30       	cpi	r24, 0x04	; 4
    3546:	91 05       	cpc	r25, r1
    3548:	a1 05       	cpc	r26, r1
    354a:	b1 05       	cpc	r27, r1
    354c:	09 f4       	brne	.+2      	; 0x3550 <LCD_Print_Int+0x30e>
    354e:	8d c0       	rjmp	.+282    	; 0x366a <LCD_Print_Int+0x428>
    3550:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3552:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3554:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3556:	be 8d       	ldd	r27, Y+30	; 0x1e
    3558:	85 30       	cpi	r24, 0x05	; 5
    355a:	91 05       	cpc	r25, r1
    355c:	a1 05       	cpc	r26, r1
    355e:	b1 05       	cpc	r27, r1
    3560:	9c f5       	brge	.+102    	; 0x35c8 <LCD_Print_Int+0x386>
    3562:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3564:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3566:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3568:	be 8d       	ldd	r27, Y+30	; 0x1e
    356a:	81 30       	cpi	r24, 0x01	; 1
    356c:	91 05       	cpc	r25, r1
    356e:	a1 05       	cpc	r26, r1
    3570:	b1 05       	cpc	r27, r1
    3572:	09 f4       	brne	.+2      	; 0x3576 <LCD_Print_Int+0x334>
    3574:	6e c0       	rjmp	.+220    	; 0x3652 <LCD_Print_Int+0x410>
    3576:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3578:	9c 8d       	ldd	r25, Y+28	; 0x1c
    357a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    357c:	be 8d       	ldd	r27, Y+30	; 0x1e
    357e:	82 30       	cpi	r24, 0x02	; 2
    3580:	91 05       	cpc	r25, r1
    3582:	a1 05       	cpc	r26, r1
    3584:	b1 05       	cpc	r27, r1
    3586:	5c f4       	brge	.+22     	; 0x359e <LCD_Print_Int+0x35c>
    3588:	eb 8c       	ldd	r14, Y+27	; 0x1b
    358a:	fc 8c       	ldd	r15, Y+28	; 0x1c
    358c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    358e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    3590:	e1 14       	cp	r14, r1
    3592:	f1 04       	cpc	r15, r1
    3594:	01 05       	cpc	r16, r1
    3596:	11 05       	cpc	r17, r1
    3598:	09 f4       	brne	.+2      	; 0x359c <LCD_Print_Int+0x35a>
    359a:	4f c0       	rjmp	.+158    	; 0x363a <LCD_Print_Int+0x3f8>
    359c:	7d c0       	rjmp	.+250    	; 0x3698 <LCD_Print_Int+0x456>
    359e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35a2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    35a4:	be 8d       	ldd	r27, Y+30	; 0x1e
    35a6:	82 30       	cpi	r24, 0x02	; 2
    35a8:	91 05       	cpc	r25, r1
    35aa:	a1 05       	cpc	r26, r1
    35ac:	b1 05       	cpc	r27, r1
    35ae:	09 f4       	brne	.+2      	; 0x35b2 <LCD_Print_Int+0x370>
    35b0:	54 c0       	rjmp	.+168    	; 0x365a <LCD_Print_Int+0x418>
    35b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35b6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    35b8:	be 8d       	ldd	r27, Y+30	; 0x1e
    35ba:	83 30       	cpi	r24, 0x03	; 3
    35bc:	91 05       	cpc	r25, r1
    35be:	a1 05       	cpc	r26, r1
    35c0:	b1 05       	cpc	r27, r1
    35c2:	09 f4       	brne	.+2      	; 0x35c6 <LCD_Print_Int+0x384>
    35c4:	4e c0       	rjmp	.+156    	; 0x3662 <LCD_Print_Int+0x420>
    35c6:	68 c0       	rjmp	.+208    	; 0x3698 <LCD_Print_Int+0x456>
    35c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35cc:	ad 8d       	ldd	r26, Y+29	; 0x1d
    35ce:	be 8d       	ldd	r27, Y+30	; 0x1e
    35d0:	87 30       	cpi	r24, 0x07	; 7
    35d2:	91 05       	cpc	r25, r1
    35d4:	a1 05       	cpc	r26, r1
    35d6:	b1 05       	cpc	r27, r1
    35d8:	09 f4       	brne	.+2      	; 0x35dc <LCD_Print_Int+0x39a>
    35da:	53 c0       	rjmp	.+166    	; 0x3682 <LCD_Print_Int+0x440>
    35dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35e0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    35e2:	be 8d       	ldd	r27, Y+30	; 0x1e
    35e4:	88 30       	cpi	r24, 0x08	; 8
    35e6:	91 05       	cpc	r25, r1
    35e8:	a1 05       	cpc	r26, r1
    35ea:	b1 05       	cpc	r27, r1
    35ec:	9c f4       	brge	.+38     	; 0x3614 <LCD_Print_Int+0x3d2>
    35ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35f2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    35f4:	be 8d       	ldd	r27, Y+30	; 0x1e
    35f6:	85 30       	cpi	r24, 0x05	; 5
    35f8:	91 05       	cpc	r25, r1
    35fa:	a1 05       	cpc	r26, r1
    35fc:	b1 05       	cpc	r27, r1
    35fe:	c9 f1       	breq	.+114    	; 0x3672 <LCD_Print_Int+0x430>
    3600:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3602:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3604:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3606:	be 8d       	ldd	r27, Y+30	; 0x1e
    3608:	86 30       	cpi	r24, 0x06	; 6
    360a:	91 05       	cpc	r25, r1
    360c:	a1 05       	cpc	r26, r1
    360e:	b1 05       	cpc	r27, r1
    3610:	a1 f1       	breq	.+104    	; 0x367a <LCD_Print_Int+0x438>
    3612:	42 c0       	rjmp	.+132    	; 0x3698 <LCD_Print_Int+0x456>
    3614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3618:	ad 8d       	ldd	r26, Y+29	; 0x1d
    361a:	be 8d       	ldd	r27, Y+30	; 0x1e
    361c:	88 30       	cpi	r24, 0x08	; 8
    361e:	91 05       	cpc	r25, r1
    3620:	a1 05       	cpc	r26, r1
    3622:	b1 05       	cpc	r27, r1
    3624:	91 f1       	breq	.+100    	; 0x368a <LCD_Print_Int+0x448>
    3626:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3628:	9c 8d       	ldd	r25, Y+28	; 0x1c
    362a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    362c:	be 8d       	ldd	r27, Y+30	; 0x1e
    362e:	89 30       	cpi	r24, 0x09	; 9
    3630:	91 05       	cpc	r25, r1
    3632:	a1 05       	cpc	r26, r1
    3634:	b1 05       	cpc	r27, r1
    3636:	69 f1       	breq	.+90     	; 0x3692 <LCD_Print_Int+0x450>
    3638:	2f c0       	rjmp	.+94     	; 0x3698 <LCD_Print_Int+0x456>
		{

		case 0:
			if(ones == 0)
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	9a 81       	ldd	r25, Y+2	; 0x02
    363e:	ab 81       	ldd	r26, Y+3	; 0x03
    3640:	bc 81       	ldd	r27, Y+4	; 0x04
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	a1 05       	cpc	r26, r1
    3646:	b1 05       	cpc	r27, r1
    3648:	39 f1       	breq	.+78     	; 0x3698 <LCD_Print_Int+0x456>
			{
				break;
			}
			else
			{
				LCD_Write_Char('0');break;
    364a:	80 e3       	ldi	r24, 0x30	; 48
    364c:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3650:	23 c0       	rjmp	.+70     	; 0x3698 <LCD_Print_Int+0x456>
			}
		case 1:LCD_Write_Char('1');break;
    3652:	81 e3       	ldi	r24, 0x31	; 49
    3654:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3658:	1f c0       	rjmp	.+62     	; 0x3698 <LCD_Print_Int+0x456>
		case 2:LCD_Write_Char('2');break;
    365a:	82 e3       	ldi	r24, 0x32	; 50
    365c:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3660:	1b c0       	rjmp	.+54     	; 0x3698 <LCD_Print_Int+0x456>
		case 3:LCD_Write_Char('3');break;
    3662:	83 e3       	ldi	r24, 0x33	; 51
    3664:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3668:	17 c0       	rjmp	.+46     	; 0x3698 <LCD_Print_Int+0x456>
		case 4:LCD_Write_Char('4');break;
    366a:	84 e3       	ldi	r24, 0x34	; 52
    366c:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3670:	13 c0       	rjmp	.+38     	; 0x3698 <LCD_Print_Int+0x456>
		case 5:LCD_Write_Char('5');break;
    3672:	85 e3       	ldi	r24, 0x35	; 53
    3674:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3678:	0f c0       	rjmp	.+30     	; 0x3698 <LCD_Print_Int+0x456>
		case 6:LCD_Write_Char('6');break;
    367a:	86 e3       	ldi	r24, 0x36	; 54
    367c:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3680:	0b c0       	rjmp	.+22     	; 0x3698 <LCD_Print_Int+0x456>
		case 7:LCD_Write_Char('7');break;
    3682:	87 e3       	ldi	r24, 0x37	; 55
    3684:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3688:	07 c0       	rjmp	.+14     	; 0x3698 <LCD_Print_Int+0x456>
		case 8:LCD_Write_Char('8');break;
    368a:	88 e3       	ldi	r24, 0x38	; 56
    368c:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3690:	03 c0       	rjmp	.+6      	; 0x3698 <LCD_Print_Int+0x456>
		case 9:LCD_Write_Char('9');break;
    3692:	89 e3       	ldi	r24, 0x39	; 57
    3694:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
		}
		switch(thousands)
    3698:	e9 84       	ldd	r14, Y+9	; 0x09
    369a:	fa 84       	ldd	r15, Y+10	; 0x0a
    369c:	0b 85       	ldd	r16, Y+11	; 0x0b
    369e:	1c 85       	ldd	r17, Y+12	; 0x0c
    36a0:	ef 8e       	std	Y+31, r14	; 0x1f
    36a2:	f8 a2       	std	Y+32, r15	; 0x20
    36a4:	09 a3       	std	Y+33, r16	; 0x21
    36a6:	1a a3       	std	Y+34, r17	; 0x22
    36a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36aa:	98 a1       	ldd	r25, Y+32	; 0x20
    36ac:	a9 a1       	ldd	r26, Y+33	; 0x21
    36ae:	ba a1       	ldd	r27, Y+34	; 0x22
    36b0:	84 30       	cpi	r24, 0x04	; 4
    36b2:	91 05       	cpc	r25, r1
    36b4:	a1 05       	cpc	r26, r1
    36b6:	b1 05       	cpc	r27, r1
    36b8:	09 f4       	brne	.+2      	; 0x36bc <LCD_Print_Int+0x47a>
    36ba:	85 c0       	rjmp	.+266    	; 0x37c6 <LCD_Print_Int+0x584>
    36bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36be:	98 a1       	ldd	r25, Y+32	; 0x20
    36c0:	a9 a1       	ldd	r26, Y+33	; 0x21
    36c2:	ba a1       	ldd	r27, Y+34	; 0x22
    36c4:	85 30       	cpi	r24, 0x05	; 5
    36c6:	91 05       	cpc	r25, r1
    36c8:	a1 05       	cpc	r26, r1
    36ca:	b1 05       	cpc	r27, r1
    36cc:	9c f5       	brge	.+102    	; 0x3734 <LCD_Print_Int+0x4f2>
    36ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36d0:	98 a1       	ldd	r25, Y+32	; 0x20
    36d2:	a9 a1       	ldd	r26, Y+33	; 0x21
    36d4:	ba a1       	ldd	r27, Y+34	; 0x22
    36d6:	81 30       	cpi	r24, 0x01	; 1
    36d8:	91 05       	cpc	r25, r1
    36da:	a1 05       	cpc	r26, r1
    36dc:	b1 05       	cpc	r27, r1
    36de:	09 f4       	brne	.+2      	; 0x36e2 <LCD_Print_Int+0x4a0>
    36e0:	66 c0       	rjmp	.+204    	; 0x37ae <LCD_Print_Int+0x56c>
    36e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36e4:	98 a1       	ldd	r25, Y+32	; 0x20
    36e6:	a9 a1       	ldd	r26, Y+33	; 0x21
    36e8:	ba a1       	ldd	r27, Y+34	; 0x22
    36ea:	82 30       	cpi	r24, 0x02	; 2
    36ec:	91 05       	cpc	r25, r1
    36ee:	a1 05       	cpc	r26, r1
    36f0:	b1 05       	cpc	r27, r1
    36f2:	5c f4       	brge	.+22     	; 0x370a <LCD_Print_Int+0x4c8>
    36f4:	ef 8c       	ldd	r14, Y+31	; 0x1f
    36f6:	f8 a0       	ldd	r15, Y+32	; 0x20
    36f8:	09 a1       	ldd	r16, Y+33	; 0x21
    36fa:	1a a1       	ldd	r17, Y+34	; 0x22
    36fc:	e1 14       	cp	r14, r1
    36fe:	f1 04       	cpc	r15, r1
    3700:	01 05       	cpc	r16, r1
    3702:	11 05       	cpc	r17, r1
    3704:	09 f4       	brne	.+2      	; 0x3708 <LCD_Print_Int+0x4c6>
    3706:	4f c0       	rjmp	.+158    	; 0x37a6 <LCD_Print_Int+0x564>
    3708:	75 c0       	rjmp	.+234    	; 0x37f4 <LCD_Print_Int+0x5b2>
    370a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    370c:	98 a1       	ldd	r25, Y+32	; 0x20
    370e:	a9 a1       	ldd	r26, Y+33	; 0x21
    3710:	ba a1       	ldd	r27, Y+34	; 0x22
    3712:	82 30       	cpi	r24, 0x02	; 2
    3714:	91 05       	cpc	r25, r1
    3716:	a1 05       	cpc	r26, r1
    3718:	b1 05       	cpc	r27, r1
    371a:	09 f4       	brne	.+2      	; 0x371e <LCD_Print_Int+0x4dc>
    371c:	4c c0       	rjmp	.+152    	; 0x37b6 <LCD_Print_Int+0x574>
    371e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3720:	98 a1       	ldd	r25, Y+32	; 0x20
    3722:	a9 a1       	ldd	r26, Y+33	; 0x21
    3724:	ba a1       	ldd	r27, Y+34	; 0x22
    3726:	83 30       	cpi	r24, 0x03	; 3
    3728:	91 05       	cpc	r25, r1
    372a:	a1 05       	cpc	r26, r1
    372c:	b1 05       	cpc	r27, r1
    372e:	09 f4       	brne	.+2      	; 0x3732 <LCD_Print_Int+0x4f0>
    3730:	46 c0       	rjmp	.+140    	; 0x37be <LCD_Print_Int+0x57c>
    3732:	60 c0       	rjmp	.+192    	; 0x37f4 <LCD_Print_Int+0x5b2>
    3734:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3736:	98 a1       	ldd	r25, Y+32	; 0x20
    3738:	a9 a1       	ldd	r26, Y+33	; 0x21
    373a:	ba a1       	ldd	r27, Y+34	; 0x22
    373c:	87 30       	cpi	r24, 0x07	; 7
    373e:	91 05       	cpc	r25, r1
    3740:	a1 05       	cpc	r26, r1
    3742:	b1 05       	cpc	r27, r1
    3744:	09 f4       	brne	.+2      	; 0x3748 <LCD_Print_Int+0x506>
    3746:	4b c0       	rjmp	.+150    	; 0x37de <LCD_Print_Int+0x59c>
    3748:	8f 8d       	ldd	r24, Y+31	; 0x1f
    374a:	98 a1       	ldd	r25, Y+32	; 0x20
    374c:	a9 a1       	ldd	r26, Y+33	; 0x21
    374e:	ba a1       	ldd	r27, Y+34	; 0x22
    3750:	88 30       	cpi	r24, 0x08	; 8
    3752:	91 05       	cpc	r25, r1
    3754:	a1 05       	cpc	r26, r1
    3756:	b1 05       	cpc	r27, r1
    3758:	9c f4       	brge	.+38     	; 0x3780 <LCD_Print_Int+0x53e>
    375a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    375c:	98 a1       	ldd	r25, Y+32	; 0x20
    375e:	a9 a1       	ldd	r26, Y+33	; 0x21
    3760:	ba a1       	ldd	r27, Y+34	; 0x22
    3762:	85 30       	cpi	r24, 0x05	; 5
    3764:	91 05       	cpc	r25, r1
    3766:	a1 05       	cpc	r26, r1
    3768:	b1 05       	cpc	r27, r1
    376a:	89 f1       	breq	.+98     	; 0x37ce <LCD_Print_Int+0x58c>
    376c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    376e:	98 a1       	ldd	r25, Y+32	; 0x20
    3770:	a9 a1       	ldd	r26, Y+33	; 0x21
    3772:	ba a1       	ldd	r27, Y+34	; 0x22
    3774:	86 30       	cpi	r24, 0x06	; 6
    3776:	91 05       	cpc	r25, r1
    3778:	a1 05       	cpc	r26, r1
    377a:	b1 05       	cpc	r27, r1
    377c:	61 f1       	breq	.+88     	; 0x37d6 <LCD_Print_Int+0x594>
    377e:	3a c0       	rjmp	.+116    	; 0x37f4 <LCD_Print_Int+0x5b2>
    3780:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3782:	98 a1       	ldd	r25, Y+32	; 0x20
    3784:	a9 a1       	ldd	r26, Y+33	; 0x21
    3786:	ba a1       	ldd	r27, Y+34	; 0x22
    3788:	88 30       	cpi	r24, 0x08	; 8
    378a:	91 05       	cpc	r25, r1
    378c:	a1 05       	cpc	r26, r1
    378e:	b1 05       	cpc	r27, r1
    3790:	51 f1       	breq	.+84     	; 0x37e6 <LCD_Print_Int+0x5a4>
    3792:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3794:	98 a1       	ldd	r25, Y+32	; 0x20
    3796:	a9 a1       	ldd	r26, Y+33	; 0x21
    3798:	ba a1       	ldd	r27, Y+34	; 0x22
    379a:	89 30       	cpi	r24, 0x09	; 9
    379c:	91 05       	cpc	r25, r1
    379e:	a1 05       	cpc	r26, r1
    37a0:	b1 05       	cpc	r27, r1
    37a2:	29 f1       	breq	.+74     	; 0x37ee <LCD_Print_Int+0x5ac>
    37a4:	27 c0       	rjmp	.+78     	; 0x37f4 <LCD_Print_Int+0x5b2>
		{
		case 0:LCD_Write_Char('0');break;
    37a6:	80 e3       	ldi	r24, 0x30	; 48
    37a8:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    37ac:	23 c0       	rjmp	.+70     	; 0x37f4 <LCD_Print_Int+0x5b2>
		case 1:LCD_Write_Char('1');break;
    37ae:	81 e3       	ldi	r24, 0x31	; 49
    37b0:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    37b4:	1f c0       	rjmp	.+62     	; 0x37f4 <LCD_Print_Int+0x5b2>
		case 2:LCD_Write_Char('2');break;
    37b6:	82 e3       	ldi	r24, 0x32	; 50
    37b8:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    37bc:	1b c0       	rjmp	.+54     	; 0x37f4 <LCD_Print_Int+0x5b2>
		case 3:LCD_Write_Char('3');break;
    37be:	83 e3       	ldi	r24, 0x33	; 51
    37c0:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    37c4:	17 c0       	rjmp	.+46     	; 0x37f4 <LCD_Print_Int+0x5b2>
		case 4:LCD_Write_Char('4');break;
    37c6:	84 e3       	ldi	r24, 0x34	; 52
    37c8:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    37cc:	13 c0       	rjmp	.+38     	; 0x37f4 <LCD_Print_Int+0x5b2>
		case 5:LCD_Write_Char('5');break;
    37ce:	85 e3       	ldi	r24, 0x35	; 53
    37d0:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    37d4:	0f c0       	rjmp	.+30     	; 0x37f4 <LCD_Print_Int+0x5b2>
		case 6:LCD_Write_Char('6');break;
    37d6:	86 e3       	ldi	r24, 0x36	; 54
    37d8:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    37dc:	0b c0       	rjmp	.+22     	; 0x37f4 <LCD_Print_Int+0x5b2>
		case 7:LCD_Write_Char('7');break;
    37de:	87 e3       	ldi	r24, 0x37	; 55
    37e0:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    37e4:	07 c0       	rjmp	.+14     	; 0x37f4 <LCD_Print_Int+0x5b2>
		case 8:LCD_Write_Char('8');break;
    37e6:	88 e3       	ldi	r24, 0x38	; 56
    37e8:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    37ec:	03 c0       	rjmp	.+6      	; 0x37f4 <LCD_Print_Int+0x5b2>
		case 9:LCD_Write_Char('9');break;
    37ee:	89 e3       	ldi	r24, 0x39	; 57
    37f0:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
		}
		switch(fraction)
    37f4:	ed 84       	ldd	r14, Y+13	; 0x0d
    37f6:	fe 84       	ldd	r15, Y+14	; 0x0e
    37f8:	0f 85       	ldd	r16, Y+15	; 0x0f
    37fa:	18 89       	ldd	r17, Y+16	; 0x10
    37fc:	eb a2       	std	Y+35, r14	; 0x23
    37fe:	fc a2       	std	Y+36, r15	; 0x24
    3800:	0d a3       	std	Y+37, r16	; 0x25
    3802:	1e a3       	std	Y+38, r17	; 0x26
    3804:	8b a1       	ldd	r24, Y+35	; 0x23
    3806:	9c a1       	ldd	r25, Y+36	; 0x24
    3808:	ad a1       	ldd	r26, Y+37	; 0x25
    380a:	be a1       	ldd	r27, Y+38	; 0x26
    380c:	84 30       	cpi	r24, 0x04	; 4
    380e:	91 05       	cpc	r25, r1
    3810:	a1 05       	cpc	r26, r1
    3812:	b1 05       	cpc	r27, r1
    3814:	09 f4       	brne	.+2      	; 0x3818 <LCD_Print_Int+0x5d6>
    3816:	89 c0       	rjmp	.+274    	; 0x392a <LCD_Print_Int+0x6e8>
    3818:	8b a1       	ldd	r24, Y+35	; 0x23
    381a:	9c a1       	ldd	r25, Y+36	; 0x24
    381c:	ad a1       	ldd	r26, Y+37	; 0x25
    381e:	be a1       	ldd	r27, Y+38	; 0x26
    3820:	85 30       	cpi	r24, 0x05	; 5
    3822:	91 05       	cpc	r25, r1
    3824:	a1 05       	cpc	r26, r1
    3826:	b1 05       	cpc	r27, r1
    3828:	9c f5       	brge	.+102    	; 0x3890 <LCD_Print_Int+0x64e>
    382a:	8b a1       	ldd	r24, Y+35	; 0x23
    382c:	9c a1       	ldd	r25, Y+36	; 0x24
    382e:	ad a1       	ldd	r26, Y+37	; 0x25
    3830:	be a1       	ldd	r27, Y+38	; 0x26
    3832:	81 30       	cpi	r24, 0x01	; 1
    3834:	91 05       	cpc	r25, r1
    3836:	a1 05       	cpc	r26, r1
    3838:	b1 05       	cpc	r27, r1
    383a:	09 f4       	brne	.+2      	; 0x383e <LCD_Print_Int+0x5fc>
    383c:	67 c0       	rjmp	.+206    	; 0x390c <LCD_Print_Int+0x6ca>
    383e:	8b a1       	ldd	r24, Y+35	; 0x23
    3840:	9c a1       	ldd	r25, Y+36	; 0x24
    3842:	ad a1       	ldd	r26, Y+37	; 0x25
    3844:	be a1       	ldd	r27, Y+38	; 0x26
    3846:	82 30       	cpi	r24, 0x02	; 2
    3848:	91 05       	cpc	r25, r1
    384a:	a1 05       	cpc	r26, r1
    384c:	b1 05       	cpc	r27, r1
    384e:	5c f4       	brge	.+22     	; 0x3866 <LCD_Print_Int+0x624>
    3850:	eb a0       	ldd	r14, Y+35	; 0x23
    3852:	fc a0       	ldd	r15, Y+36	; 0x24
    3854:	0d a1       	ldd	r16, Y+37	; 0x25
    3856:	1e a1       	ldd	r17, Y+38	; 0x26
    3858:	e1 14       	cp	r14, r1
    385a:	f1 04       	cpc	r15, r1
    385c:	01 05       	cpc	r16, r1
    385e:	11 05       	cpc	r17, r1
    3860:	09 f4       	brne	.+2      	; 0x3864 <LCD_Print_Int+0x622>
    3862:	4f c0       	rjmp	.+158    	; 0x3902 <LCD_Print_Int+0x6c0>
    3864:	de c3       	rjmp	.+1980   	; 0x4022 <LCD_Print_Int+0xde0>
    3866:	8b a1       	ldd	r24, Y+35	; 0x23
    3868:	9c a1       	ldd	r25, Y+36	; 0x24
    386a:	ad a1       	ldd	r26, Y+37	; 0x25
    386c:	be a1       	ldd	r27, Y+38	; 0x26
    386e:	82 30       	cpi	r24, 0x02	; 2
    3870:	91 05       	cpc	r25, r1
    3872:	a1 05       	cpc	r26, r1
    3874:	b1 05       	cpc	r27, r1
    3876:	09 f4       	brne	.+2      	; 0x387a <LCD_Print_Int+0x638>
    3878:	4e c0       	rjmp	.+156    	; 0x3916 <LCD_Print_Int+0x6d4>
    387a:	8b a1       	ldd	r24, Y+35	; 0x23
    387c:	9c a1       	ldd	r25, Y+36	; 0x24
    387e:	ad a1       	ldd	r26, Y+37	; 0x25
    3880:	be a1       	ldd	r27, Y+38	; 0x26
    3882:	83 30       	cpi	r24, 0x03	; 3
    3884:	91 05       	cpc	r25, r1
    3886:	a1 05       	cpc	r26, r1
    3888:	b1 05       	cpc	r27, r1
    388a:	09 f4       	brne	.+2      	; 0x388e <LCD_Print_Int+0x64c>
    388c:	49 c0       	rjmp	.+146    	; 0x3920 <LCD_Print_Int+0x6de>
    388e:	c9 c3       	rjmp	.+1938   	; 0x4022 <LCD_Print_Int+0xde0>
    3890:	8b a1       	ldd	r24, Y+35	; 0x23
    3892:	9c a1       	ldd	r25, Y+36	; 0x24
    3894:	ad a1       	ldd	r26, Y+37	; 0x25
    3896:	be a1       	ldd	r27, Y+38	; 0x26
    3898:	87 30       	cpi	r24, 0x07	; 7
    389a:	91 05       	cpc	r25, r1
    389c:	a1 05       	cpc	r26, r1
    389e:	b1 05       	cpc	r27, r1
    38a0:	09 f4       	brne	.+2      	; 0x38a4 <LCD_Print_Int+0x662>
    38a2:	52 c0       	rjmp	.+164    	; 0x3948 <LCD_Print_Int+0x706>
    38a4:	8b a1       	ldd	r24, Y+35	; 0x23
    38a6:	9c a1       	ldd	r25, Y+36	; 0x24
    38a8:	ad a1       	ldd	r26, Y+37	; 0x25
    38aa:	be a1       	ldd	r27, Y+38	; 0x26
    38ac:	88 30       	cpi	r24, 0x08	; 8
    38ae:	91 05       	cpc	r25, r1
    38b0:	a1 05       	cpc	r26, r1
    38b2:	b1 05       	cpc	r27, r1
    38b4:	9c f4       	brge	.+38     	; 0x38dc <LCD_Print_Int+0x69a>
    38b6:	8b a1       	ldd	r24, Y+35	; 0x23
    38b8:	9c a1       	ldd	r25, Y+36	; 0x24
    38ba:	ad a1       	ldd	r26, Y+37	; 0x25
    38bc:	be a1       	ldd	r27, Y+38	; 0x26
    38be:	85 30       	cpi	r24, 0x05	; 5
    38c0:	91 05       	cpc	r25, r1
    38c2:	a1 05       	cpc	r26, r1
    38c4:	b1 05       	cpc	r27, r1
    38c6:	b1 f1       	breq	.+108    	; 0x3934 <LCD_Print_Int+0x6f2>
    38c8:	8b a1       	ldd	r24, Y+35	; 0x23
    38ca:	9c a1       	ldd	r25, Y+36	; 0x24
    38cc:	ad a1       	ldd	r26, Y+37	; 0x25
    38ce:	be a1       	ldd	r27, Y+38	; 0x26
    38d0:	86 30       	cpi	r24, 0x06	; 6
    38d2:	91 05       	cpc	r25, r1
    38d4:	a1 05       	cpc	r26, r1
    38d6:	b1 05       	cpc	r27, r1
    38d8:	91 f1       	breq	.+100    	; 0x393e <LCD_Print_Int+0x6fc>
    38da:	a3 c3       	rjmp	.+1862   	; 0x4022 <LCD_Print_Int+0xde0>
    38dc:	8b a1       	ldd	r24, Y+35	; 0x23
    38de:	9c a1       	ldd	r25, Y+36	; 0x24
    38e0:	ad a1       	ldd	r26, Y+37	; 0x25
    38e2:	be a1       	ldd	r27, Y+38	; 0x26
    38e4:	88 30       	cpi	r24, 0x08	; 8
    38e6:	91 05       	cpc	r25, r1
    38e8:	a1 05       	cpc	r26, r1
    38ea:	b1 05       	cpc	r27, r1
    38ec:	91 f1       	breq	.+100    	; 0x3952 <LCD_Print_Int+0x710>
    38ee:	8b a1       	ldd	r24, Y+35	; 0x23
    38f0:	9c a1       	ldd	r25, Y+36	; 0x24
    38f2:	ad a1       	ldd	r26, Y+37	; 0x25
    38f4:	be a1       	ldd	r27, Y+38	; 0x26
    38f6:	89 30       	cpi	r24, 0x09	; 9
    38f8:	91 05       	cpc	r25, r1
    38fa:	a1 05       	cpc	r26, r1
    38fc:	b1 05       	cpc	r27, r1
    38fe:	71 f1       	breq	.+92     	; 0x395c <LCD_Print_Int+0x71a>
    3900:	90 c3       	rjmp	.+1824   	; 0x4022 <LCD_Print_Int+0xde0>
		{
		case 0:LCD_Write_String(".0");break;
    3902:	81 e7       	ldi	r24, 0x71	; 113
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    390a:	8b c3       	rjmp	.+1814   	; 0x4022 <LCD_Print_Int+0xde0>
		case 1:LCD_Write_String(".1");break;
    390c:	84 e7       	ldi	r24, 0x74	; 116
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3914:	86 c3       	rjmp	.+1804   	; 0x4022 <LCD_Print_Int+0xde0>
		case 2:LCD_Write_String(".2");break;
    3916:	87 e7       	ldi	r24, 0x77	; 119
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    391e:	81 c3       	rjmp	.+1794   	; 0x4022 <LCD_Print_Int+0xde0>
		case 3:LCD_Write_String(".3");break;
    3920:	8a e7       	ldi	r24, 0x7A	; 122
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3928:	7c c3       	rjmp	.+1784   	; 0x4022 <LCD_Print_Int+0xde0>
		case 4:LCD_Write_String(".4");break;
    392a:	8d e7       	ldi	r24, 0x7D	; 125
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3932:	77 c3       	rjmp	.+1774   	; 0x4022 <LCD_Print_Int+0xde0>
		case 5:LCD_Write_String(".5");break;
    3934:	80 e8       	ldi	r24, 0x80	; 128
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    393c:	72 c3       	rjmp	.+1764   	; 0x4022 <LCD_Print_Int+0xde0>
		case 6:LCD_Write_String(".6");break;
    393e:	83 e8       	ldi	r24, 0x83	; 131
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3946:	6d c3       	rjmp	.+1754   	; 0x4022 <LCD_Print_Int+0xde0>
		case 7:LCD_Write_String(".7");break;
    3948:	86 e8       	ldi	r24, 0x86	; 134
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3950:	68 c3       	rjmp	.+1744   	; 0x4022 <LCD_Print_Int+0xde0>
		case 8:LCD_Write_String(".8");break;
    3952:	89 e8       	ldi	r24, 0x89	; 137
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    395a:	63 c3       	rjmp	.+1734   	; 0x4022 <LCD_Print_Int+0xde0>
		case 9:LCD_Write_String(".9");break;
    395c:	8c e8       	ldi	r24, 0x8C	; 140
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3964:	5e c3       	rjmp	.+1724   	; 0x4022 <LCD_Print_Int+0xde0>
		}

	}
	else if(integer<0)
    3966:	69 89       	ldd	r22, Y+17	; 0x11
    3968:	7a 89       	ldd	r23, Y+18	; 0x12
    396a:	8b 89       	ldd	r24, Y+19	; 0x13
    396c:	9c 89       	ldd	r25, Y+20	; 0x14
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	40 e0       	ldi	r20, 0x00	; 0
    3974:	50 e0       	ldi	r21, 0x00	; 0
    3976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    397a:	88 23       	and	r24, r24
    397c:	0c f0       	brlt	.+2      	; 0x3980 <LCD_Print_Int+0x73e>
    397e:	51 c3       	rjmp	.+1698   	; 0x4022 <LCD_Print_Int+0xde0>
	{
		integer = (integer)*(-1);
    3980:	89 89       	ldd	r24, Y+17	; 0x11
    3982:	9a 89       	ldd	r25, Y+18	; 0x12
    3984:	ab 89       	ldd	r26, Y+19	; 0x13
    3986:	bc 89       	ldd	r27, Y+20	; 0x14
    3988:	b0 58       	subi	r27, 0x80	; 128
    398a:	89 8b       	std	Y+17, r24	; 0x11
    398c:	9a 8b       	std	Y+18, r25	; 0x12
    398e:	ab 8b       	std	Y+19, r26	; 0x13
    3990:	bc 8b       	std	Y+20, r27	; 0x14
		fraction = integer*10;
    3992:	69 89       	ldd	r22, Y+17	; 0x11
    3994:	7a 89       	ldd	r23, Y+18	; 0x12
    3996:	8b 89       	ldd	r24, Y+19	; 0x13
    3998:	9c 89       	ldd	r25, Y+20	; 0x14
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	40 e2       	ldi	r20, 0x20	; 32
    39a0:	51 e4       	ldi	r21, 0x41	; 65
    39a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	bc 01       	movw	r22, r24
    39ac:	cd 01       	movw	r24, r26
    39ae:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	8d 87       	std	Y+13, r24	; 0x0d
    39b8:	9e 87       	std	Y+14, r25	; 0x0e
    39ba:	af 87       	std	Y+15, r26	; 0x0f
    39bc:	b8 8b       	std	Y+16, r27	; 0x10
		fraction = fraction%10;
    39be:	8d 85       	ldd	r24, Y+13	; 0x0d
    39c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39c2:	af 85       	ldd	r26, Y+15	; 0x0f
    39c4:	b8 89       	ldd	r27, Y+16	; 0x10
    39c6:	2a e0       	ldi	r18, 0x0A	; 10
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	40 e0       	ldi	r20, 0x00	; 0
    39cc:	50 e0       	ldi	r21, 0x00	; 0
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	8d 87       	std	Y+13, r24	; 0x0d
    39dc:	9e 87       	std	Y+14, r25	; 0x0e
    39de:	af 87       	std	Y+15, r26	; 0x0f
    39e0:	b8 8b       	std	Y+16, r27	; 0x10
		thousands = (s32)integer%10;
    39e2:	69 89       	ldd	r22, Y+17	; 0x11
    39e4:	7a 89       	ldd	r23, Y+18	; 0x12
    39e6:	8b 89       	ldd	r24, Y+19	; 0x13
    39e8:	9c 89       	ldd	r25, Y+20	; 0x14
    39ea:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	2a e0       	ldi	r18, 0x0A	; 10
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	bc 01       	movw	r22, r24
    39fc:	cd 01       	movw	r24, r26
    39fe:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	89 87       	std	Y+9, r24	; 0x09
    3a08:	9a 87       	std	Y+10, r25	; 0x0a
    3a0a:	ab 87       	std	Y+11, r26	; 0x0b
    3a0c:	bc 87       	std	Y+12, r27	; 0x0c
		dozens = (((s32)integer-thousands)/10)%10;
    3a0e:	69 89       	ldd	r22, Y+17	; 0x11
    3a10:	7a 89       	ldd	r23, Y+18	; 0x12
    3a12:	8b 89       	ldd	r24, Y+19	; 0x13
    3a14:	9c 89       	ldd	r25, Y+20	; 0x14
    3a16:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3a1a:	9b 01       	movw	r18, r22
    3a1c:	ac 01       	movw	r20, r24
    3a1e:	89 85       	ldd	r24, Y+9	; 0x09
    3a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a22:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a24:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a26:	79 01       	movw	r14, r18
    3a28:	8a 01       	movw	r16, r20
    3a2a:	e8 1a       	sub	r14, r24
    3a2c:	f9 0a       	sbc	r15, r25
    3a2e:	0a 0b       	sbc	r16, r26
    3a30:	1b 0b       	sbc	r17, r27
    3a32:	d8 01       	movw	r26, r16
    3a34:	c7 01       	movw	r24, r14
    3a36:	2a e0       	ldi	r18, 0x0A	; 10
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e0       	ldi	r20, 0x00	; 0
    3a3c:	50 e0       	ldi	r21, 0x00	; 0
    3a3e:	bc 01       	movw	r22, r24
    3a40:	cd 01       	movw	r24, r26
    3a42:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    3a46:	da 01       	movw	r26, r20
    3a48:	c9 01       	movw	r24, r18
    3a4a:	2a e0       	ldi	r18, 0x0A	; 10
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	50 e0       	ldi	r21, 0x00	; 0
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	8d 83       	std	Y+5, r24	; 0x05
    3a60:	9e 83       	std	Y+6, r25	; 0x06
    3a62:	af 83       	std	Y+7, r26	; 0x07
    3a64:	b8 87       	std	Y+8, r27	; 0x08
		ones = (((s32)integer-dozens)/100)%10;
    3a66:	69 89       	ldd	r22, Y+17	; 0x11
    3a68:	7a 89       	ldd	r23, Y+18	; 0x12
    3a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6e:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3a72:	9b 01       	movw	r18, r22
    3a74:	ac 01       	movw	r20, r24
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	af 81       	ldd	r26, Y+7	; 0x07
    3a7c:	b8 85       	ldd	r27, Y+8	; 0x08
    3a7e:	79 01       	movw	r14, r18
    3a80:	8a 01       	movw	r16, r20
    3a82:	e8 1a       	sub	r14, r24
    3a84:	f9 0a       	sbc	r15, r25
    3a86:	0a 0b       	sbc	r16, r26
    3a88:	1b 0b       	sbc	r17, r27
    3a8a:	d8 01       	movw	r26, r16
    3a8c:	c7 01       	movw	r24, r14
    3a8e:	24 e6       	ldi	r18, 0x64	; 100
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	40 e0       	ldi	r20, 0x00	; 0
    3a94:	50 e0       	ldi	r21, 0x00	; 0
    3a96:	bc 01       	movw	r22, r24
    3a98:	cd 01       	movw	r24, r26
    3a9a:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    3a9e:	da 01       	movw	r26, r20
    3aa0:	c9 01       	movw	r24, r18
    3aa2:	2a e0       	ldi	r18, 0x0A	; 10
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	50 e0       	ldi	r21, 0x00	; 0
    3aaa:	bc 01       	movw	r22, r24
    3aac:	cd 01       	movw	r24, r26
    3aae:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodsi4>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	89 83       	std	Y+1, r24	; 0x01
    3ab8:	9a 83       	std	Y+2, r25	; 0x02
    3aba:	ab 83       	std	Y+3, r26	; 0x03
    3abc:	bc 83       	std	Y+4, r27	; 0x04
		LCD_Write_Char('-');
    3abe:	8d e2       	ldi	r24, 0x2D	; 45
    3ac0:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
		switch(ones)
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
    3ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac8:	ab 81       	ldd	r26, Y+3	; 0x03
    3aca:	bc 81       	ldd	r27, Y+4	; 0x04
    3acc:	8f a3       	std	Y+39, r24	; 0x27
    3ace:	98 a7       	std	Y+40, r25	; 0x28
    3ad0:	a9 a7       	std	Y+41, r26	; 0x29
    3ad2:	ba a7       	std	Y+42, r27	; 0x2a
    3ad4:	8f a1       	ldd	r24, Y+39	; 0x27
    3ad6:	98 a5       	ldd	r25, Y+40	; 0x28
    3ad8:	a9 a5       	ldd	r26, Y+41	; 0x29
    3ada:	ba a5       	ldd	r27, Y+42	; 0x2a
    3adc:	85 30       	cpi	r24, 0x05	; 5
    3ade:	91 05       	cpc	r25, r1
    3ae0:	a1 05       	cpc	r26, r1
    3ae2:	b1 05       	cpc	r27, r1
    3ae4:	09 f4       	brne	.+2      	; 0x3ae8 <LCD_Print_Int+0x8a6>
    3ae6:	6e c0       	rjmp	.+220    	; 0x3bc4 <LCD_Print_Int+0x982>
    3ae8:	8f a1       	ldd	r24, Y+39	; 0x27
    3aea:	98 a5       	ldd	r25, Y+40	; 0x28
    3aec:	a9 a5       	ldd	r26, Y+41	; 0x29
    3aee:	ba a5       	ldd	r27, Y+42	; 0x2a
    3af0:	86 30       	cpi	r24, 0x06	; 6
    3af2:	91 05       	cpc	r25, r1
    3af4:	a1 05       	cpc	r26, r1
    3af6:	b1 05       	cpc	r27, r1
    3af8:	84 f5       	brge	.+96     	; 0x3b5a <LCD_Print_Int+0x918>
    3afa:	8f a1       	ldd	r24, Y+39	; 0x27
    3afc:	98 a5       	ldd	r25, Y+40	; 0x28
    3afe:	a9 a5       	ldd	r26, Y+41	; 0x29
    3b00:	ba a5       	ldd	r27, Y+42	; 0x2a
    3b02:	82 30       	cpi	r24, 0x02	; 2
    3b04:	91 05       	cpc	r25, r1
    3b06:	a1 05       	cpc	r26, r1
    3b08:	b1 05       	cpc	r27, r1
    3b0a:	09 f4       	brne	.+2      	; 0x3b0e <LCD_Print_Int+0x8cc>
    3b0c:	4f c0       	rjmp	.+158    	; 0x3bac <LCD_Print_Int+0x96a>
    3b0e:	8f a1       	ldd	r24, Y+39	; 0x27
    3b10:	98 a5       	ldd	r25, Y+40	; 0x28
    3b12:	a9 a5       	ldd	r26, Y+41	; 0x29
    3b14:	ba a5       	ldd	r27, Y+42	; 0x2a
    3b16:	83 30       	cpi	r24, 0x03	; 3
    3b18:	91 05       	cpc	r25, r1
    3b1a:	a1 05       	cpc	r26, r1
    3b1c:	b1 05       	cpc	r27, r1
    3b1e:	54 f4       	brge	.+20     	; 0x3b34 <LCD_Print_Int+0x8f2>
    3b20:	8f a1       	ldd	r24, Y+39	; 0x27
    3b22:	98 a5       	ldd	r25, Y+40	; 0x28
    3b24:	a9 a5       	ldd	r26, Y+41	; 0x29
    3b26:	ba a5       	ldd	r27, Y+42	; 0x2a
    3b28:	81 30       	cpi	r24, 0x01	; 1
    3b2a:	91 05       	cpc	r25, r1
    3b2c:	a1 05       	cpc	r26, r1
    3b2e:	b1 05       	cpc	r27, r1
    3b30:	c9 f1       	breq	.+114    	; 0x3ba4 <LCD_Print_Int+0x962>
    3b32:	5b c0       	rjmp	.+182    	; 0x3bea <LCD_Print_Int+0x9a8>
    3b34:	8f a1       	ldd	r24, Y+39	; 0x27
    3b36:	98 a5       	ldd	r25, Y+40	; 0x28
    3b38:	a9 a5       	ldd	r26, Y+41	; 0x29
    3b3a:	ba a5       	ldd	r27, Y+42	; 0x2a
    3b3c:	83 30       	cpi	r24, 0x03	; 3
    3b3e:	91 05       	cpc	r25, r1
    3b40:	a1 05       	cpc	r26, r1
    3b42:	b1 05       	cpc	r27, r1
    3b44:	b9 f1       	breq	.+110    	; 0x3bb4 <LCD_Print_Int+0x972>
    3b46:	8f a1       	ldd	r24, Y+39	; 0x27
    3b48:	98 a5       	ldd	r25, Y+40	; 0x28
    3b4a:	a9 a5       	ldd	r26, Y+41	; 0x29
    3b4c:	ba a5       	ldd	r27, Y+42	; 0x2a
    3b4e:	84 30       	cpi	r24, 0x04	; 4
    3b50:	91 05       	cpc	r25, r1
    3b52:	a1 05       	cpc	r26, r1
    3b54:	b1 05       	cpc	r27, r1
    3b56:	91 f1       	breq	.+100    	; 0x3bbc <LCD_Print_Int+0x97a>
    3b58:	48 c0       	rjmp	.+144    	; 0x3bea <LCD_Print_Int+0x9a8>
    3b5a:	8f a1       	ldd	r24, Y+39	; 0x27
    3b5c:	98 a5       	ldd	r25, Y+40	; 0x28
    3b5e:	a9 a5       	ldd	r26, Y+41	; 0x29
    3b60:	ba a5       	ldd	r27, Y+42	; 0x2a
    3b62:	87 30       	cpi	r24, 0x07	; 7
    3b64:	91 05       	cpc	r25, r1
    3b66:	a1 05       	cpc	r26, r1
    3b68:	b1 05       	cpc	r27, r1
    3b6a:	a1 f1       	breq	.+104    	; 0x3bd4 <LCD_Print_Int+0x992>
    3b6c:	8f a1       	ldd	r24, Y+39	; 0x27
    3b6e:	98 a5       	ldd	r25, Y+40	; 0x28
    3b70:	a9 a5       	ldd	r26, Y+41	; 0x29
    3b72:	ba a5       	ldd	r27, Y+42	; 0x2a
    3b74:	87 30       	cpi	r24, 0x07	; 7
    3b76:	91 05       	cpc	r25, r1
    3b78:	a1 05       	cpc	r26, r1
    3b7a:	b1 05       	cpc	r27, r1
    3b7c:	3c f1       	brlt	.+78     	; 0x3bcc <LCD_Print_Int+0x98a>
    3b7e:	8f a1       	ldd	r24, Y+39	; 0x27
    3b80:	98 a5       	ldd	r25, Y+40	; 0x28
    3b82:	a9 a5       	ldd	r26, Y+41	; 0x29
    3b84:	ba a5       	ldd	r27, Y+42	; 0x2a
    3b86:	88 30       	cpi	r24, 0x08	; 8
    3b88:	91 05       	cpc	r25, r1
    3b8a:	a1 05       	cpc	r26, r1
    3b8c:	b1 05       	cpc	r27, r1
    3b8e:	31 f1       	breq	.+76     	; 0x3bdc <LCD_Print_Int+0x99a>
    3b90:	8f a1       	ldd	r24, Y+39	; 0x27
    3b92:	98 a5       	ldd	r25, Y+40	; 0x28
    3b94:	a9 a5       	ldd	r26, Y+41	; 0x29
    3b96:	ba a5       	ldd	r27, Y+42	; 0x2a
    3b98:	89 30       	cpi	r24, 0x09	; 9
    3b9a:	91 05       	cpc	r25, r1
    3b9c:	a1 05       	cpc	r26, r1
    3b9e:	b1 05       	cpc	r27, r1
    3ba0:	09 f1       	breq	.+66     	; 0x3be4 <LCD_Print_Int+0x9a2>
    3ba2:	23 c0       	rjmp	.+70     	; 0x3bea <LCD_Print_Int+0x9a8>
		{
		//case 0:LCD_Write_Char('0');break;
		case 1:LCD_Write_Char('1');break;
    3ba4:	81 e3       	ldi	r24, 0x31	; 49
    3ba6:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3baa:	1f c0       	rjmp	.+62     	; 0x3bea <LCD_Print_Int+0x9a8>
		case 2:LCD_Write_Char('2');break;
    3bac:	82 e3       	ldi	r24, 0x32	; 50
    3bae:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3bb2:	1b c0       	rjmp	.+54     	; 0x3bea <LCD_Print_Int+0x9a8>
		case 3:LCD_Write_Char('3');break;
    3bb4:	83 e3       	ldi	r24, 0x33	; 51
    3bb6:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3bba:	17 c0       	rjmp	.+46     	; 0x3bea <LCD_Print_Int+0x9a8>
		case 4:LCD_Write_Char('4');break;
    3bbc:	84 e3       	ldi	r24, 0x34	; 52
    3bbe:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3bc2:	13 c0       	rjmp	.+38     	; 0x3bea <LCD_Print_Int+0x9a8>
		case 5:LCD_Write_Char('5');break;
    3bc4:	85 e3       	ldi	r24, 0x35	; 53
    3bc6:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3bca:	0f c0       	rjmp	.+30     	; 0x3bea <LCD_Print_Int+0x9a8>
		case 6:LCD_Write_Char('6');break;
    3bcc:	86 e3       	ldi	r24, 0x36	; 54
    3bce:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3bd2:	0b c0       	rjmp	.+22     	; 0x3bea <LCD_Print_Int+0x9a8>
		case 7:LCD_Write_Char('7');break;
    3bd4:	87 e3       	ldi	r24, 0x37	; 55
    3bd6:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3bda:	07 c0       	rjmp	.+14     	; 0x3bea <LCD_Print_Int+0x9a8>
		case 8:LCD_Write_Char('8');break;
    3bdc:	88 e3       	ldi	r24, 0x38	; 56
    3bde:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3be2:	03 c0       	rjmp	.+6      	; 0x3bea <LCD_Print_Int+0x9a8>
		case 9:LCD_Write_Char('9');break;
    3be4:	89 e3       	ldi	r24, 0x39	; 57
    3be6:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
		}

		switch(dozens)
    3bea:	ed 80       	ldd	r14, Y+5	; 0x05
    3bec:	fe 80       	ldd	r15, Y+6	; 0x06
    3bee:	0f 81       	ldd	r16, Y+7	; 0x07
    3bf0:	18 85       	ldd	r17, Y+8	; 0x08
    3bf2:	eb a6       	std	Y+43, r14	; 0x2b
    3bf4:	fc a6       	std	Y+44, r15	; 0x2c
    3bf6:	0d a7       	std	Y+45, r16	; 0x2d
    3bf8:	1e a7       	std	Y+46, r17	; 0x2e
    3bfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bfc:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bfe:	ad a5       	ldd	r26, Y+45	; 0x2d
    3c00:	be a5       	ldd	r27, Y+46	; 0x2e
    3c02:	84 30       	cpi	r24, 0x04	; 4
    3c04:	91 05       	cpc	r25, r1
    3c06:	a1 05       	cpc	r26, r1
    3c08:	b1 05       	cpc	r27, r1
    3c0a:	09 f4       	brne	.+2      	; 0x3c0e <LCD_Print_Int+0x9cc>
    3c0c:	8d c0       	rjmp	.+282    	; 0x3d28 <LCD_Print_Int+0xae6>
    3c0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c10:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c12:	ad a5       	ldd	r26, Y+45	; 0x2d
    3c14:	be a5       	ldd	r27, Y+46	; 0x2e
    3c16:	85 30       	cpi	r24, 0x05	; 5
    3c18:	91 05       	cpc	r25, r1
    3c1a:	a1 05       	cpc	r26, r1
    3c1c:	b1 05       	cpc	r27, r1
    3c1e:	9c f5       	brge	.+102    	; 0x3c86 <LCD_Print_Int+0xa44>
    3c20:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c22:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c24:	ad a5       	ldd	r26, Y+45	; 0x2d
    3c26:	be a5       	ldd	r27, Y+46	; 0x2e
    3c28:	81 30       	cpi	r24, 0x01	; 1
    3c2a:	91 05       	cpc	r25, r1
    3c2c:	a1 05       	cpc	r26, r1
    3c2e:	b1 05       	cpc	r27, r1
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <LCD_Print_Int+0x9f2>
    3c32:	6e c0       	rjmp	.+220    	; 0x3d10 <LCD_Print_Int+0xace>
    3c34:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c36:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c38:	ad a5       	ldd	r26, Y+45	; 0x2d
    3c3a:	be a5       	ldd	r27, Y+46	; 0x2e
    3c3c:	82 30       	cpi	r24, 0x02	; 2
    3c3e:	91 05       	cpc	r25, r1
    3c40:	a1 05       	cpc	r26, r1
    3c42:	b1 05       	cpc	r27, r1
    3c44:	5c f4       	brge	.+22     	; 0x3c5c <LCD_Print_Int+0xa1a>
    3c46:	eb a4       	ldd	r14, Y+43	; 0x2b
    3c48:	fc a4       	ldd	r15, Y+44	; 0x2c
    3c4a:	0d a5       	ldd	r16, Y+45	; 0x2d
    3c4c:	1e a5       	ldd	r17, Y+46	; 0x2e
    3c4e:	e1 14       	cp	r14, r1
    3c50:	f1 04       	cpc	r15, r1
    3c52:	01 05       	cpc	r16, r1
    3c54:	11 05       	cpc	r17, r1
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <LCD_Print_Int+0xa18>
    3c58:	4f c0       	rjmp	.+158    	; 0x3cf8 <LCD_Print_Int+0xab6>
    3c5a:	7d c0       	rjmp	.+250    	; 0x3d56 <LCD_Print_Int+0xb14>
    3c5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c60:	ad a5       	ldd	r26, Y+45	; 0x2d
    3c62:	be a5       	ldd	r27, Y+46	; 0x2e
    3c64:	82 30       	cpi	r24, 0x02	; 2
    3c66:	91 05       	cpc	r25, r1
    3c68:	a1 05       	cpc	r26, r1
    3c6a:	b1 05       	cpc	r27, r1
    3c6c:	09 f4       	brne	.+2      	; 0x3c70 <LCD_Print_Int+0xa2e>
    3c6e:	54 c0       	rjmp	.+168    	; 0x3d18 <LCD_Print_Int+0xad6>
    3c70:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c72:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c74:	ad a5       	ldd	r26, Y+45	; 0x2d
    3c76:	be a5       	ldd	r27, Y+46	; 0x2e
    3c78:	83 30       	cpi	r24, 0x03	; 3
    3c7a:	91 05       	cpc	r25, r1
    3c7c:	a1 05       	cpc	r26, r1
    3c7e:	b1 05       	cpc	r27, r1
    3c80:	09 f4       	brne	.+2      	; 0x3c84 <LCD_Print_Int+0xa42>
    3c82:	4e c0       	rjmp	.+156    	; 0x3d20 <LCD_Print_Int+0xade>
    3c84:	68 c0       	rjmp	.+208    	; 0x3d56 <LCD_Print_Int+0xb14>
    3c86:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c88:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c8a:	ad a5       	ldd	r26, Y+45	; 0x2d
    3c8c:	be a5       	ldd	r27, Y+46	; 0x2e
    3c8e:	87 30       	cpi	r24, 0x07	; 7
    3c90:	91 05       	cpc	r25, r1
    3c92:	a1 05       	cpc	r26, r1
    3c94:	b1 05       	cpc	r27, r1
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <LCD_Print_Int+0xa58>
    3c98:	53 c0       	rjmp	.+166    	; 0x3d40 <LCD_Print_Int+0xafe>
    3c9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c9e:	ad a5       	ldd	r26, Y+45	; 0x2d
    3ca0:	be a5       	ldd	r27, Y+46	; 0x2e
    3ca2:	88 30       	cpi	r24, 0x08	; 8
    3ca4:	91 05       	cpc	r25, r1
    3ca6:	a1 05       	cpc	r26, r1
    3ca8:	b1 05       	cpc	r27, r1
    3caa:	9c f4       	brge	.+38     	; 0x3cd2 <LCD_Print_Int+0xa90>
    3cac:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cae:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cb0:	ad a5       	ldd	r26, Y+45	; 0x2d
    3cb2:	be a5       	ldd	r27, Y+46	; 0x2e
    3cb4:	85 30       	cpi	r24, 0x05	; 5
    3cb6:	91 05       	cpc	r25, r1
    3cb8:	a1 05       	cpc	r26, r1
    3cba:	b1 05       	cpc	r27, r1
    3cbc:	c9 f1       	breq	.+114    	; 0x3d30 <LCD_Print_Int+0xaee>
    3cbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cc0:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cc2:	ad a5       	ldd	r26, Y+45	; 0x2d
    3cc4:	be a5       	ldd	r27, Y+46	; 0x2e
    3cc6:	86 30       	cpi	r24, 0x06	; 6
    3cc8:	91 05       	cpc	r25, r1
    3cca:	a1 05       	cpc	r26, r1
    3ccc:	b1 05       	cpc	r27, r1
    3cce:	a1 f1       	breq	.+104    	; 0x3d38 <LCD_Print_Int+0xaf6>
    3cd0:	42 c0       	rjmp	.+132    	; 0x3d56 <LCD_Print_Int+0xb14>
    3cd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cd6:	ad a5       	ldd	r26, Y+45	; 0x2d
    3cd8:	be a5       	ldd	r27, Y+46	; 0x2e
    3cda:	88 30       	cpi	r24, 0x08	; 8
    3cdc:	91 05       	cpc	r25, r1
    3cde:	a1 05       	cpc	r26, r1
    3ce0:	b1 05       	cpc	r27, r1
    3ce2:	91 f1       	breq	.+100    	; 0x3d48 <LCD_Print_Int+0xb06>
    3ce4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ce6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ce8:	ad a5       	ldd	r26, Y+45	; 0x2d
    3cea:	be a5       	ldd	r27, Y+46	; 0x2e
    3cec:	89 30       	cpi	r24, 0x09	; 9
    3cee:	91 05       	cpc	r25, r1
    3cf0:	a1 05       	cpc	r26, r1
    3cf2:	b1 05       	cpc	r27, r1
    3cf4:	69 f1       	breq	.+90     	; 0x3d50 <LCD_Print_Int+0xb0e>
    3cf6:	2f c0       	rjmp	.+94     	; 0x3d56 <LCD_Print_Int+0xb14>
		{

		case 0:
			if(ones == 0)
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfc:	ab 81       	ldd	r26, Y+3	; 0x03
    3cfe:	bc 81       	ldd	r27, Y+4	; 0x04
    3d00:	00 97       	sbiw	r24, 0x00	; 0
    3d02:	a1 05       	cpc	r26, r1
    3d04:	b1 05       	cpc	r27, r1
    3d06:	39 f1       	breq	.+78     	; 0x3d56 <LCD_Print_Int+0xb14>
			{
				break;
			}
			else
			{
				LCD_Write_Char('0');break;
    3d08:	80 e3       	ldi	r24, 0x30	; 48
    3d0a:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3d0e:	23 c0       	rjmp	.+70     	; 0x3d56 <LCD_Print_Int+0xb14>
			}
		case 1:LCD_Write_Char('1');break;
    3d10:	81 e3       	ldi	r24, 0x31	; 49
    3d12:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3d16:	1f c0       	rjmp	.+62     	; 0x3d56 <LCD_Print_Int+0xb14>
		case 2:LCD_Write_Char('2');break;
    3d18:	82 e3       	ldi	r24, 0x32	; 50
    3d1a:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3d1e:	1b c0       	rjmp	.+54     	; 0x3d56 <LCD_Print_Int+0xb14>
		case 3:LCD_Write_Char('3');break;
    3d20:	83 e3       	ldi	r24, 0x33	; 51
    3d22:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3d26:	17 c0       	rjmp	.+46     	; 0x3d56 <LCD_Print_Int+0xb14>
		case 4:LCD_Write_Char('4');break;
    3d28:	84 e3       	ldi	r24, 0x34	; 52
    3d2a:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3d2e:	13 c0       	rjmp	.+38     	; 0x3d56 <LCD_Print_Int+0xb14>
		case 5:LCD_Write_Char('5');break;
    3d30:	85 e3       	ldi	r24, 0x35	; 53
    3d32:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3d36:	0f c0       	rjmp	.+30     	; 0x3d56 <LCD_Print_Int+0xb14>
		case 6:LCD_Write_Char('6');break;
    3d38:	86 e3       	ldi	r24, 0x36	; 54
    3d3a:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3d3e:	0b c0       	rjmp	.+22     	; 0x3d56 <LCD_Print_Int+0xb14>
		case 7:LCD_Write_Char('7');break;
    3d40:	87 e3       	ldi	r24, 0x37	; 55
    3d42:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3d46:	07 c0       	rjmp	.+14     	; 0x3d56 <LCD_Print_Int+0xb14>
		case 8:LCD_Write_Char('8');break;
    3d48:	88 e3       	ldi	r24, 0x38	; 56
    3d4a:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3d4e:	03 c0       	rjmp	.+6      	; 0x3d56 <LCD_Print_Int+0xb14>
		case 9:LCD_Write_Char('9');break;
    3d50:	89 e3       	ldi	r24, 0x39	; 57
    3d52:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
		}
		switch(thousands)
    3d56:	e9 84       	ldd	r14, Y+9	; 0x09
    3d58:	fa 84       	ldd	r15, Y+10	; 0x0a
    3d5a:	0b 85       	ldd	r16, Y+11	; 0x0b
    3d5c:	1c 85       	ldd	r17, Y+12	; 0x0c
    3d5e:	ef a6       	std	Y+47, r14	; 0x2f
    3d60:	f8 aa       	std	Y+48, r15	; 0x30
    3d62:	09 ab       	std	Y+49, r16	; 0x31
    3d64:	1a ab       	std	Y+50, r17	; 0x32
    3d66:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d68:	98 a9       	ldd	r25, Y+48	; 0x30
    3d6a:	a9 a9       	ldd	r26, Y+49	; 0x31
    3d6c:	ba a9       	ldd	r27, Y+50	; 0x32
    3d6e:	84 30       	cpi	r24, 0x04	; 4
    3d70:	91 05       	cpc	r25, r1
    3d72:	a1 05       	cpc	r26, r1
    3d74:	b1 05       	cpc	r27, r1
    3d76:	09 f4       	brne	.+2      	; 0x3d7a <LCD_Print_Int+0xb38>
    3d78:	85 c0       	rjmp	.+266    	; 0x3e84 <LCD_Print_Int+0xc42>
    3d7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d7c:	98 a9       	ldd	r25, Y+48	; 0x30
    3d7e:	a9 a9       	ldd	r26, Y+49	; 0x31
    3d80:	ba a9       	ldd	r27, Y+50	; 0x32
    3d82:	85 30       	cpi	r24, 0x05	; 5
    3d84:	91 05       	cpc	r25, r1
    3d86:	a1 05       	cpc	r26, r1
    3d88:	b1 05       	cpc	r27, r1
    3d8a:	9c f5       	brge	.+102    	; 0x3df2 <LCD_Print_Int+0xbb0>
    3d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d8e:	98 a9       	ldd	r25, Y+48	; 0x30
    3d90:	a9 a9       	ldd	r26, Y+49	; 0x31
    3d92:	ba a9       	ldd	r27, Y+50	; 0x32
    3d94:	81 30       	cpi	r24, 0x01	; 1
    3d96:	91 05       	cpc	r25, r1
    3d98:	a1 05       	cpc	r26, r1
    3d9a:	b1 05       	cpc	r27, r1
    3d9c:	09 f4       	brne	.+2      	; 0x3da0 <LCD_Print_Int+0xb5e>
    3d9e:	66 c0       	rjmp	.+204    	; 0x3e6c <LCD_Print_Int+0xc2a>
    3da0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3da2:	98 a9       	ldd	r25, Y+48	; 0x30
    3da4:	a9 a9       	ldd	r26, Y+49	; 0x31
    3da6:	ba a9       	ldd	r27, Y+50	; 0x32
    3da8:	82 30       	cpi	r24, 0x02	; 2
    3daa:	91 05       	cpc	r25, r1
    3dac:	a1 05       	cpc	r26, r1
    3dae:	b1 05       	cpc	r27, r1
    3db0:	5c f4       	brge	.+22     	; 0x3dc8 <LCD_Print_Int+0xb86>
    3db2:	ef a4       	ldd	r14, Y+47	; 0x2f
    3db4:	f8 a8       	ldd	r15, Y+48	; 0x30
    3db6:	09 a9       	ldd	r16, Y+49	; 0x31
    3db8:	1a a9       	ldd	r17, Y+50	; 0x32
    3dba:	e1 14       	cp	r14, r1
    3dbc:	f1 04       	cpc	r15, r1
    3dbe:	01 05       	cpc	r16, r1
    3dc0:	11 05       	cpc	r17, r1
    3dc2:	09 f4       	brne	.+2      	; 0x3dc6 <LCD_Print_Int+0xb84>
    3dc4:	4f c0       	rjmp	.+158    	; 0x3e64 <LCD_Print_Int+0xc22>
    3dc6:	75 c0       	rjmp	.+234    	; 0x3eb2 <LCD_Print_Int+0xc70>
    3dc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dca:	98 a9       	ldd	r25, Y+48	; 0x30
    3dcc:	a9 a9       	ldd	r26, Y+49	; 0x31
    3dce:	ba a9       	ldd	r27, Y+50	; 0x32
    3dd0:	82 30       	cpi	r24, 0x02	; 2
    3dd2:	91 05       	cpc	r25, r1
    3dd4:	a1 05       	cpc	r26, r1
    3dd6:	b1 05       	cpc	r27, r1
    3dd8:	09 f4       	brne	.+2      	; 0x3ddc <LCD_Print_Int+0xb9a>
    3dda:	4c c0       	rjmp	.+152    	; 0x3e74 <LCD_Print_Int+0xc32>
    3ddc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dde:	98 a9       	ldd	r25, Y+48	; 0x30
    3de0:	a9 a9       	ldd	r26, Y+49	; 0x31
    3de2:	ba a9       	ldd	r27, Y+50	; 0x32
    3de4:	83 30       	cpi	r24, 0x03	; 3
    3de6:	91 05       	cpc	r25, r1
    3de8:	a1 05       	cpc	r26, r1
    3dea:	b1 05       	cpc	r27, r1
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <LCD_Print_Int+0xbae>
    3dee:	46 c0       	rjmp	.+140    	; 0x3e7c <LCD_Print_Int+0xc3a>
    3df0:	60 c0       	rjmp	.+192    	; 0x3eb2 <LCD_Print_Int+0xc70>
    3df2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3df4:	98 a9       	ldd	r25, Y+48	; 0x30
    3df6:	a9 a9       	ldd	r26, Y+49	; 0x31
    3df8:	ba a9       	ldd	r27, Y+50	; 0x32
    3dfa:	87 30       	cpi	r24, 0x07	; 7
    3dfc:	91 05       	cpc	r25, r1
    3dfe:	a1 05       	cpc	r26, r1
    3e00:	b1 05       	cpc	r27, r1
    3e02:	09 f4       	brne	.+2      	; 0x3e06 <LCD_Print_Int+0xbc4>
    3e04:	4b c0       	rjmp	.+150    	; 0x3e9c <LCD_Print_Int+0xc5a>
    3e06:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e08:	98 a9       	ldd	r25, Y+48	; 0x30
    3e0a:	a9 a9       	ldd	r26, Y+49	; 0x31
    3e0c:	ba a9       	ldd	r27, Y+50	; 0x32
    3e0e:	88 30       	cpi	r24, 0x08	; 8
    3e10:	91 05       	cpc	r25, r1
    3e12:	a1 05       	cpc	r26, r1
    3e14:	b1 05       	cpc	r27, r1
    3e16:	9c f4       	brge	.+38     	; 0x3e3e <LCD_Print_Int+0xbfc>
    3e18:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e1a:	98 a9       	ldd	r25, Y+48	; 0x30
    3e1c:	a9 a9       	ldd	r26, Y+49	; 0x31
    3e1e:	ba a9       	ldd	r27, Y+50	; 0x32
    3e20:	85 30       	cpi	r24, 0x05	; 5
    3e22:	91 05       	cpc	r25, r1
    3e24:	a1 05       	cpc	r26, r1
    3e26:	b1 05       	cpc	r27, r1
    3e28:	89 f1       	breq	.+98     	; 0x3e8c <LCD_Print_Int+0xc4a>
    3e2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e2c:	98 a9       	ldd	r25, Y+48	; 0x30
    3e2e:	a9 a9       	ldd	r26, Y+49	; 0x31
    3e30:	ba a9       	ldd	r27, Y+50	; 0x32
    3e32:	86 30       	cpi	r24, 0x06	; 6
    3e34:	91 05       	cpc	r25, r1
    3e36:	a1 05       	cpc	r26, r1
    3e38:	b1 05       	cpc	r27, r1
    3e3a:	61 f1       	breq	.+88     	; 0x3e94 <LCD_Print_Int+0xc52>
    3e3c:	3a c0       	rjmp	.+116    	; 0x3eb2 <LCD_Print_Int+0xc70>
    3e3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e40:	98 a9       	ldd	r25, Y+48	; 0x30
    3e42:	a9 a9       	ldd	r26, Y+49	; 0x31
    3e44:	ba a9       	ldd	r27, Y+50	; 0x32
    3e46:	88 30       	cpi	r24, 0x08	; 8
    3e48:	91 05       	cpc	r25, r1
    3e4a:	a1 05       	cpc	r26, r1
    3e4c:	b1 05       	cpc	r27, r1
    3e4e:	51 f1       	breq	.+84     	; 0x3ea4 <LCD_Print_Int+0xc62>
    3e50:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e52:	98 a9       	ldd	r25, Y+48	; 0x30
    3e54:	a9 a9       	ldd	r26, Y+49	; 0x31
    3e56:	ba a9       	ldd	r27, Y+50	; 0x32
    3e58:	89 30       	cpi	r24, 0x09	; 9
    3e5a:	91 05       	cpc	r25, r1
    3e5c:	a1 05       	cpc	r26, r1
    3e5e:	b1 05       	cpc	r27, r1
    3e60:	29 f1       	breq	.+74     	; 0x3eac <LCD_Print_Int+0xc6a>
    3e62:	27 c0       	rjmp	.+78     	; 0x3eb2 <LCD_Print_Int+0xc70>
		{
		case 0:LCD_Write_Char('0');break;
    3e64:	80 e3       	ldi	r24, 0x30	; 48
    3e66:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3e6a:	23 c0       	rjmp	.+70     	; 0x3eb2 <LCD_Print_Int+0xc70>
		case 1:LCD_Write_Char('1');break;
    3e6c:	81 e3       	ldi	r24, 0x31	; 49
    3e6e:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3e72:	1f c0       	rjmp	.+62     	; 0x3eb2 <LCD_Print_Int+0xc70>
		case 2:LCD_Write_Char('2');break;
    3e74:	82 e3       	ldi	r24, 0x32	; 50
    3e76:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3e7a:	1b c0       	rjmp	.+54     	; 0x3eb2 <LCD_Print_Int+0xc70>
		case 3:LCD_Write_Char('3');break;
    3e7c:	83 e3       	ldi	r24, 0x33	; 51
    3e7e:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3e82:	17 c0       	rjmp	.+46     	; 0x3eb2 <LCD_Print_Int+0xc70>
		case 4:LCD_Write_Char('4');break;
    3e84:	84 e3       	ldi	r24, 0x34	; 52
    3e86:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3e8a:	13 c0       	rjmp	.+38     	; 0x3eb2 <LCD_Print_Int+0xc70>
		case 5:LCD_Write_Char('5');break;
    3e8c:	85 e3       	ldi	r24, 0x35	; 53
    3e8e:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3e92:	0f c0       	rjmp	.+30     	; 0x3eb2 <LCD_Print_Int+0xc70>
		case 6:LCD_Write_Char('6');break;
    3e94:	86 e3       	ldi	r24, 0x36	; 54
    3e96:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3e9a:	0b c0       	rjmp	.+22     	; 0x3eb2 <LCD_Print_Int+0xc70>
		case 7:LCD_Write_Char('7');break;
    3e9c:	87 e3       	ldi	r24, 0x37	; 55
    3e9e:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3ea2:	07 c0       	rjmp	.+14     	; 0x3eb2 <LCD_Print_Int+0xc70>
		case 8:LCD_Write_Char('8');break;
    3ea4:	88 e3       	ldi	r24, 0x38	; 56
    3ea6:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
    3eaa:	03 c0       	rjmp	.+6      	; 0x3eb2 <LCD_Print_Int+0xc70>
		case 9:LCD_Write_Char('9');break;
    3eac:	89 e3       	ldi	r24, 0x39	; 57
    3eae:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_Write_Char>
		}
		switch(fraction)
    3eb2:	ed 84       	ldd	r14, Y+13	; 0x0d
    3eb4:	fe 84       	ldd	r15, Y+14	; 0x0e
    3eb6:	0f 85       	ldd	r16, Y+15	; 0x0f
    3eb8:	18 89       	ldd	r17, Y+16	; 0x10
    3eba:	eb aa       	std	Y+51, r14	; 0x33
    3ebc:	fc aa       	std	Y+52, r15	; 0x34
    3ebe:	0d ab       	std	Y+53, r16	; 0x35
    3ec0:	1e ab       	std	Y+54, r17	; 0x36
    3ec2:	8b a9       	ldd	r24, Y+51	; 0x33
    3ec4:	9c a9       	ldd	r25, Y+52	; 0x34
    3ec6:	ad a9       	ldd	r26, Y+53	; 0x35
    3ec8:	be a9       	ldd	r27, Y+54	; 0x36
    3eca:	84 30       	cpi	r24, 0x04	; 4
    3ecc:	91 05       	cpc	r25, r1
    3ece:	a1 05       	cpc	r26, r1
    3ed0:	b1 05       	cpc	r27, r1
    3ed2:	09 f4       	brne	.+2      	; 0x3ed6 <LCD_Print_Int+0xc94>
    3ed4:	89 c0       	rjmp	.+274    	; 0x3fe8 <LCD_Print_Int+0xda6>
    3ed6:	8b a9       	ldd	r24, Y+51	; 0x33
    3ed8:	9c a9       	ldd	r25, Y+52	; 0x34
    3eda:	ad a9       	ldd	r26, Y+53	; 0x35
    3edc:	be a9       	ldd	r27, Y+54	; 0x36
    3ede:	85 30       	cpi	r24, 0x05	; 5
    3ee0:	91 05       	cpc	r25, r1
    3ee2:	a1 05       	cpc	r26, r1
    3ee4:	b1 05       	cpc	r27, r1
    3ee6:	9c f5       	brge	.+102    	; 0x3f4e <LCD_Print_Int+0xd0c>
    3ee8:	8b a9       	ldd	r24, Y+51	; 0x33
    3eea:	9c a9       	ldd	r25, Y+52	; 0x34
    3eec:	ad a9       	ldd	r26, Y+53	; 0x35
    3eee:	be a9       	ldd	r27, Y+54	; 0x36
    3ef0:	81 30       	cpi	r24, 0x01	; 1
    3ef2:	91 05       	cpc	r25, r1
    3ef4:	a1 05       	cpc	r26, r1
    3ef6:	b1 05       	cpc	r27, r1
    3ef8:	09 f4       	brne	.+2      	; 0x3efc <LCD_Print_Int+0xcba>
    3efa:	67 c0       	rjmp	.+206    	; 0x3fca <LCD_Print_Int+0xd88>
    3efc:	8b a9       	ldd	r24, Y+51	; 0x33
    3efe:	9c a9       	ldd	r25, Y+52	; 0x34
    3f00:	ad a9       	ldd	r26, Y+53	; 0x35
    3f02:	be a9       	ldd	r27, Y+54	; 0x36
    3f04:	82 30       	cpi	r24, 0x02	; 2
    3f06:	91 05       	cpc	r25, r1
    3f08:	a1 05       	cpc	r26, r1
    3f0a:	b1 05       	cpc	r27, r1
    3f0c:	5c f4       	brge	.+22     	; 0x3f24 <LCD_Print_Int+0xce2>
    3f0e:	eb a8       	ldd	r14, Y+51	; 0x33
    3f10:	fc a8       	ldd	r15, Y+52	; 0x34
    3f12:	0d a9       	ldd	r16, Y+53	; 0x35
    3f14:	1e a9       	ldd	r17, Y+54	; 0x36
    3f16:	e1 14       	cp	r14, r1
    3f18:	f1 04       	cpc	r15, r1
    3f1a:	01 05       	cpc	r16, r1
    3f1c:	11 05       	cpc	r17, r1
    3f1e:	09 f4       	brne	.+2      	; 0x3f22 <LCD_Print_Int+0xce0>
    3f20:	4f c0       	rjmp	.+158    	; 0x3fc0 <LCD_Print_Int+0xd7e>
    3f22:	7f c0       	rjmp	.+254    	; 0x4022 <LCD_Print_Int+0xde0>
    3f24:	8b a9       	ldd	r24, Y+51	; 0x33
    3f26:	9c a9       	ldd	r25, Y+52	; 0x34
    3f28:	ad a9       	ldd	r26, Y+53	; 0x35
    3f2a:	be a9       	ldd	r27, Y+54	; 0x36
    3f2c:	82 30       	cpi	r24, 0x02	; 2
    3f2e:	91 05       	cpc	r25, r1
    3f30:	a1 05       	cpc	r26, r1
    3f32:	b1 05       	cpc	r27, r1
    3f34:	09 f4       	brne	.+2      	; 0x3f38 <LCD_Print_Int+0xcf6>
    3f36:	4e c0       	rjmp	.+156    	; 0x3fd4 <LCD_Print_Int+0xd92>
    3f38:	8b a9       	ldd	r24, Y+51	; 0x33
    3f3a:	9c a9       	ldd	r25, Y+52	; 0x34
    3f3c:	ad a9       	ldd	r26, Y+53	; 0x35
    3f3e:	be a9       	ldd	r27, Y+54	; 0x36
    3f40:	83 30       	cpi	r24, 0x03	; 3
    3f42:	91 05       	cpc	r25, r1
    3f44:	a1 05       	cpc	r26, r1
    3f46:	b1 05       	cpc	r27, r1
    3f48:	09 f4       	brne	.+2      	; 0x3f4c <LCD_Print_Int+0xd0a>
    3f4a:	49 c0       	rjmp	.+146    	; 0x3fde <LCD_Print_Int+0xd9c>
    3f4c:	6a c0       	rjmp	.+212    	; 0x4022 <LCD_Print_Int+0xde0>
    3f4e:	8b a9       	ldd	r24, Y+51	; 0x33
    3f50:	9c a9       	ldd	r25, Y+52	; 0x34
    3f52:	ad a9       	ldd	r26, Y+53	; 0x35
    3f54:	be a9       	ldd	r27, Y+54	; 0x36
    3f56:	87 30       	cpi	r24, 0x07	; 7
    3f58:	91 05       	cpc	r25, r1
    3f5a:	a1 05       	cpc	r26, r1
    3f5c:	b1 05       	cpc	r27, r1
    3f5e:	09 f4       	brne	.+2      	; 0x3f62 <LCD_Print_Int+0xd20>
    3f60:	52 c0       	rjmp	.+164    	; 0x4006 <LCD_Print_Int+0xdc4>
    3f62:	8b a9       	ldd	r24, Y+51	; 0x33
    3f64:	9c a9       	ldd	r25, Y+52	; 0x34
    3f66:	ad a9       	ldd	r26, Y+53	; 0x35
    3f68:	be a9       	ldd	r27, Y+54	; 0x36
    3f6a:	88 30       	cpi	r24, 0x08	; 8
    3f6c:	91 05       	cpc	r25, r1
    3f6e:	a1 05       	cpc	r26, r1
    3f70:	b1 05       	cpc	r27, r1
    3f72:	9c f4       	brge	.+38     	; 0x3f9a <LCD_Print_Int+0xd58>
    3f74:	8b a9       	ldd	r24, Y+51	; 0x33
    3f76:	9c a9       	ldd	r25, Y+52	; 0x34
    3f78:	ad a9       	ldd	r26, Y+53	; 0x35
    3f7a:	be a9       	ldd	r27, Y+54	; 0x36
    3f7c:	85 30       	cpi	r24, 0x05	; 5
    3f7e:	91 05       	cpc	r25, r1
    3f80:	a1 05       	cpc	r26, r1
    3f82:	b1 05       	cpc	r27, r1
    3f84:	b1 f1       	breq	.+108    	; 0x3ff2 <LCD_Print_Int+0xdb0>
    3f86:	8b a9       	ldd	r24, Y+51	; 0x33
    3f88:	9c a9       	ldd	r25, Y+52	; 0x34
    3f8a:	ad a9       	ldd	r26, Y+53	; 0x35
    3f8c:	be a9       	ldd	r27, Y+54	; 0x36
    3f8e:	86 30       	cpi	r24, 0x06	; 6
    3f90:	91 05       	cpc	r25, r1
    3f92:	a1 05       	cpc	r26, r1
    3f94:	b1 05       	cpc	r27, r1
    3f96:	91 f1       	breq	.+100    	; 0x3ffc <LCD_Print_Int+0xdba>
    3f98:	44 c0       	rjmp	.+136    	; 0x4022 <LCD_Print_Int+0xde0>
    3f9a:	8b a9       	ldd	r24, Y+51	; 0x33
    3f9c:	9c a9       	ldd	r25, Y+52	; 0x34
    3f9e:	ad a9       	ldd	r26, Y+53	; 0x35
    3fa0:	be a9       	ldd	r27, Y+54	; 0x36
    3fa2:	88 30       	cpi	r24, 0x08	; 8
    3fa4:	91 05       	cpc	r25, r1
    3fa6:	a1 05       	cpc	r26, r1
    3fa8:	b1 05       	cpc	r27, r1
    3faa:	91 f1       	breq	.+100    	; 0x4010 <LCD_Print_Int+0xdce>
    3fac:	8b a9       	ldd	r24, Y+51	; 0x33
    3fae:	9c a9       	ldd	r25, Y+52	; 0x34
    3fb0:	ad a9       	ldd	r26, Y+53	; 0x35
    3fb2:	be a9       	ldd	r27, Y+54	; 0x36
    3fb4:	89 30       	cpi	r24, 0x09	; 9
    3fb6:	91 05       	cpc	r25, r1
    3fb8:	a1 05       	cpc	r26, r1
    3fba:	b1 05       	cpc	r27, r1
    3fbc:	71 f1       	breq	.+92     	; 0x401a <LCD_Print_Int+0xdd8>
    3fbe:	31 c0       	rjmp	.+98     	; 0x4022 <LCD_Print_Int+0xde0>
		{
		case 0:LCD_Write_String(".0");break;
    3fc0:	81 e7       	ldi	r24, 0x71	; 113
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3fc8:	2c c0       	rjmp	.+88     	; 0x4022 <LCD_Print_Int+0xde0>
		case 1:LCD_Write_String(".1");break;
    3fca:	84 e7       	ldi	r24, 0x74	; 116
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3fd2:	27 c0       	rjmp	.+78     	; 0x4022 <LCD_Print_Int+0xde0>
		case 2:LCD_Write_String(".2");break;
    3fd4:	87 e7       	ldi	r24, 0x77	; 119
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3fdc:	22 c0       	rjmp	.+68     	; 0x4022 <LCD_Print_Int+0xde0>
		case 3:LCD_Write_String(".3");break;
    3fde:	8a e7       	ldi	r24, 0x7A	; 122
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3fe6:	1d c0       	rjmp	.+58     	; 0x4022 <LCD_Print_Int+0xde0>
		case 4:LCD_Write_String(".4");break;
    3fe8:	8d e7       	ldi	r24, 0x7D	; 125
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3ff0:	18 c0       	rjmp	.+48     	; 0x4022 <LCD_Print_Int+0xde0>
		case 5:LCD_Write_String(".5");break;
    3ff2:	80 e8       	ldi	r24, 0x80	; 128
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    3ffa:	13 c0       	rjmp	.+38     	; 0x4022 <LCD_Print_Int+0xde0>
		case 6:LCD_Write_String(".6");break;
    3ffc:	83 e8       	ldi	r24, 0x83	; 131
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    4004:	0e c0       	rjmp	.+28     	; 0x4022 <LCD_Print_Int+0xde0>
		case 7:LCD_Write_String(".7");break;
    4006:	86 e8       	ldi	r24, 0x86	; 134
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    400e:	09 c0       	rjmp	.+18     	; 0x4022 <LCD_Print_Int+0xde0>
		case 8:LCD_Write_String(".8");break;
    4010:	89 e8       	ldi	r24, 0x89	; 137
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
    4018:	04 c0       	rjmp	.+8      	; 0x4022 <LCD_Print_Int+0xde0>
		case 9:LCD_Write_String(".9");break;
    401a:	8c e8       	ldi	r24, 0x8C	; 140
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
	else
	{

	}

}
    4022:	e6 96       	adiw	r28, 0x36	; 54
    4024:	0f b6       	in	r0, 0x3f	; 63
    4026:	f8 94       	cli
    4028:	de bf       	out	0x3e, r29	; 62
    402a:	0f be       	out	0x3f, r0	; 63
    402c:	cd bf       	out	0x3d, r28	; 61
    402e:	cf 91       	pop	r28
    4030:	df 91       	pop	r29
    4032:	1f 91       	pop	r17
    4034:	0f 91       	pop	r16
    4036:	ff 90       	pop	r15
    4038:	ef 90       	pop	r14
    403a:	08 95       	ret

0000403c <main>:
#include"KPD.h"
#include"KPD_config.h"
#include"motor.h"

void main(void)
{
    403c:	df 93       	push	r29
    403e:	cf 93       	push	r28
    4040:	00 d0       	rcall	.+0      	; 0x4042 <main+0x6>
    4042:	00 d0       	rcall	.+0      	; 0x4044 <main+0x8>
    4044:	00 d0       	rcall	.+0      	; 0x4046 <main+0xa>
    4046:	cd b7       	in	r28, 0x3d	; 61
    4048:	de b7       	in	r29, 0x3e	; 62
	u8 left_flag = 0;
    404a:	1b 82       	std	Y+3, r1	; 0x03
	u8 right_flag = 0;
    404c:	1a 82       	std	Y+2, r1	; 0x02
	//KPD Initialization
	u8 key = 0;
    404e:	19 82       	std	Y+1, r1	; 0x01
	SetPortMode(KPD_PORT,0x0F);
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	6f e0       	ldi	r22, 0x0F	; 15
    4054:	0e 94 42 09 	call	0x1284	; 0x1284 <SetPortMode>
	SetPortValue(KPD_PORT,0xF0);
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	60 ef       	ldi	r22, 0xF0	; 240
    405c:	0e 94 8f 08 	call	0x111e	; 0x111e <SetPortValue>

	/*Initialization of LCD*/
	SetPortMode(Control_Port,OUTPUT);
    4060:	83 e0       	ldi	r24, 0x03	; 3
    4062:	61 e0       	ldi	r22, 0x01	; 1
    4064:	0e 94 42 09 	call	0x1284	; 0x1284 <SetPortMode>
	SetPortMode(Data_Port,OUTPUT);
    4068:	82 e0       	ldi	r24, 0x02	; 2
    406a:	61 e0       	ldi	r22, 0x01	; 1
    406c:	0e 94 42 09 	call	0x1284	; 0x1284 <SetPortMode>
	LCD_Init();
    4070:	0e 94 c0 0a 	call	0x1580	; 0x1580 <LCD_Init>

	/*MOTOR Initialization*/
	Motor M1;
	M1.MOTOR_PORT = PORTB;
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	8c 83       	std	Y+4, r24	; 0x04
	M1.LEFT_PIN = PIN1;
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	8d 83       	std	Y+5, r24	; 0x05
	M1.RIGHT_PIN = PIN2;
    407c:	82 e0       	ldi	r24, 0x02	; 2
    407e:	8e 83       	std	Y+6, r24	; 0x06
	Motor_Init(M1);
    4080:	6c 81       	ldd	r22, Y+4	; 0x04
    4082:	7d 81       	ldd	r23, Y+5	; 0x05
    4084:	8e 81       	ldd	r24, Y+6	; 0x06
    4086:	0e 94 71 20 	call	0x40e2	; 0x40e2 <Motor_Init>
	LCD_Write_String("MOTOR DIR: ");
    408a:	8f e8       	ldi	r24, 0x8F	; 143
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>

	while(1)
	{

		key = GetPressedKey();
    4092:	0e 94 76 0a 	call	0x14ec	; 0x14ec <GetPressedKey>
    4096:	89 83       	std	Y+1, r24	; 0x01
		if(key != 0)
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	88 23       	and	r24, r24
    409c:	d1 f3       	breq	.-12     	; 0x4092 <main+0x56>
		{
			//LCD_Write_Char(key);
			if(key == '6')
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	86 33       	cpi	r24, 0x36	; 54
    40a2:	71 f4       	brne	.+28     	; 0x40c0 <main+0x84>
			{
				LCD_GoTo_XY(1,12);
    40a4:	81 e0       	ldi	r24, 0x01	; 1
    40a6:	6c e0       	ldi	r22, 0x0C	; 12
    40a8:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_GoTo_XY>
				LCD_Write_String("LEFT");
    40ac:	8b e9       	ldi	r24, 0x9B	; 155
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
				Motor_Left(M1);
    40b4:	6c 81       	ldd	r22, Y+4	; 0x04
    40b6:	7d 81       	ldd	r23, Y+5	; 0x05
    40b8:	8e 81       	ldd	r24, Y+6	; 0x06
    40ba:	0e 94 8c 20 	call	0x4118	; 0x4118 <Motor_Left>
    40be:	e9 cf       	rjmp	.-46     	; 0x4092 <main+0x56>
			}
			else if(key == '4')
    40c0:	89 81       	ldd	r24, Y+1	; 0x01
    40c2:	84 33       	cpi	r24, 0x34	; 52
    40c4:	31 f7       	brne	.-52     	; 0x4092 <main+0x56>
			{
				LCD_GoTo_XY(1,12);
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	6c e0       	ldi	r22, 0x0C	; 12
    40ca:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_GoTo_XY>
				LCD_Write_String("RIGHT");
    40ce:	80 ea       	ldi	r24, 0xA0	; 160
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_Write_String>
				Motor_Right(M1);
    40d6:	6c 81       	ldd	r22, Y+4	; 0x04
    40d8:	7d 81       	ldd	r23, Y+5	; 0x05
    40da:	8e 81       	ldd	r24, Y+6	; 0x06
    40dc:	0e 94 a7 20 	call	0x414e	; 0x414e <Motor_Right>
    40e0:	d8 cf       	rjmp	.-80     	; 0x4092 <main+0x56>

000040e2 <Motor_Init>:
#include"LIB/Types.h"
#include"DIO.h"
#include"motor.h"

void Motor_Init(Motor m)
{
    40e2:	df 93       	push	r29
    40e4:	cf 93       	push	r28
    40e6:	00 d0       	rcall	.+0      	; 0x40e8 <Motor_Init+0x6>
    40e8:	0f 92       	push	r0
    40ea:	cd b7       	in	r28, 0x3d	; 61
    40ec:	de b7       	in	r29, 0x3e	; 62
    40ee:	69 83       	std	Y+1, r22	; 0x01
    40f0:	7a 83       	std	Y+2, r23	; 0x02
    40f2:	8b 83       	std	Y+3, r24	; 0x03
	SetPinMode(m.LEFT_PIN,m.MOTOR_PORT,OUTPUT);
    40f4:	8a 81       	ldd	r24, Y+2	; 0x02
    40f6:	99 81       	ldd	r25, Y+1	; 0x01
    40f8:	69 2f       	mov	r22, r25
    40fa:	41 e0       	ldi	r20, 0x01	; 1
    40fc:	0e 94 87 07 	call	0xf0e	; 0xf0e <SetPinMode>
	SetPinMode(m.RIGHT_PIN,m.MOTOR_PORT,OUTPUT);
    4100:	8b 81       	ldd	r24, Y+3	; 0x03
    4102:	99 81       	ldd	r25, Y+1	; 0x01
    4104:	69 2f       	mov	r22, r25
    4106:	41 e0       	ldi	r20, 0x01	; 1
    4108:	0e 94 87 07 	call	0xf0e	; 0xf0e <SetPinMode>
}
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	0f 90       	pop	r0
    4112:	cf 91       	pop	r28
    4114:	df 91       	pop	r29
    4116:	08 95       	ret

00004118 <Motor_Left>:

void Motor_Left(Motor m)
{
    4118:	df 93       	push	r29
    411a:	cf 93       	push	r28
    411c:	00 d0       	rcall	.+0      	; 0x411e <Motor_Left+0x6>
    411e:	0f 92       	push	r0
    4120:	cd b7       	in	r28, 0x3d	; 61
    4122:	de b7       	in	r29, 0x3e	; 62
    4124:	69 83       	std	Y+1, r22	; 0x01
    4126:	7a 83       	std	Y+2, r23	; 0x02
    4128:	8b 83       	std	Y+3, r24	; 0x03

	SetPinValue(m.LEFT_PIN,m.MOTOR_PORT,HIGH);
    412a:	8a 81       	ldd	r24, Y+2	; 0x02
    412c:	99 81       	ldd	r25, Y+1	; 0x01
    412e:	69 2f       	mov	r22, r25
    4130:	41 e0       	ldi	r20, 0x01	; 1
    4132:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	SetPinValue(m.RIGHT_PIN,m.MOTOR_PORT,LOW);
    4136:	8b 81       	ldd	r24, Y+3	; 0x03
    4138:	99 81       	ldd	r25, Y+1	; 0x01
    413a:	69 2f       	mov	r22, r25
    413c:	40 e0       	ldi	r20, 0x00	; 0
    413e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
}
    4142:	0f 90       	pop	r0
    4144:	0f 90       	pop	r0
    4146:	0f 90       	pop	r0
    4148:	cf 91       	pop	r28
    414a:	df 91       	pop	r29
    414c:	08 95       	ret

0000414e <Motor_Right>:

void Motor_Right(Motor m)
{
    414e:	df 93       	push	r29
    4150:	cf 93       	push	r28
    4152:	00 d0       	rcall	.+0      	; 0x4154 <Motor_Right+0x6>
    4154:	0f 92       	push	r0
    4156:	cd b7       	in	r28, 0x3d	; 61
    4158:	de b7       	in	r29, 0x3e	; 62
    415a:	69 83       	std	Y+1, r22	; 0x01
    415c:	7a 83       	std	Y+2, r23	; 0x02
    415e:	8b 83       	std	Y+3, r24	; 0x03

	SetPinValue(m.LEFT_PIN,m.MOTOR_PORT,LOW);
    4160:	8a 81       	ldd	r24, Y+2	; 0x02
    4162:	99 81       	ldd	r25, Y+1	; 0x01
    4164:	69 2f       	mov	r22, r25
    4166:	40 e0       	ldi	r20, 0x00	; 0
    4168:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
	SetPinValue(m.RIGHT_PIN,m.MOTOR_PORT,HIGH);
    416c:	8b 81       	ldd	r24, Y+3	; 0x03
    416e:	99 81       	ldd	r25, Y+1	; 0x01
    4170:	69 2f       	mov	r22, r25
    4172:	41 e0       	ldi	r20, 0x01	; 1
    4174:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SetPinValue>
}
    4178:	0f 90       	pop	r0
    417a:	0f 90       	pop	r0
    417c:	0f 90       	pop	r0
    417e:	cf 91       	pop	r28
    4180:	df 91       	pop	r29
    4182:	08 95       	ret

00004184 <__divmodsi4>:
    4184:	97 fb       	bst	r25, 7
    4186:	09 2e       	mov	r0, r25
    4188:	05 26       	eor	r0, r21
    418a:	0e d0       	rcall	.+28     	; 0x41a8 <__divmodsi4_neg1>
    418c:	57 fd       	sbrc	r21, 7
    418e:	04 d0       	rcall	.+8      	; 0x4198 <__divmodsi4_neg2>
    4190:	14 d0       	rcall	.+40     	; 0x41ba <__udivmodsi4>
    4192:	0a d0       	rcall	.+20     	; 0x41a8 <__divmodsi4_neg1>
    4194:	00 1c       	adc	r0, r0
    4196:	38 f4       	brcc	.+14     	; 0x41a6 <__divmodsi4_exit>

00004198 <__divmodsi4_neg2>:
    4198:	50 95       	com	r21
    419a:	40 95       	com	r20
    419c:	30 95       	com	r19
    419e:	21 95       	neg	r18
    41a0:	3f 4f       	sbci	r19, 0xFF	; 255
    41a2:	4f 4f       	sbci	r20, 0xFF	; 255
    41a4:	5f 4f       	sbci	r21, 0xFF	; 255

000041a6 <__divmodsi4_exit>:
    41a6:	08 95       	ret

000041a8 <__divmodsi4_neg1>:
    41a8:	f6 f7       	brtc	.-4      	; 0x41a6 <__divmodsi4_exit>
    41aa:	90 95       	com	r25
    41ac:	80 95       	com	r24
    41ae:	70 95       	com	r23
    41b0:	61 95       	neg	r22
    41b2:	7f 4f       	sbci	r23, 0xFF	; 255
    41b4:	8f 4f       	sbci	r24, 0xFF	; 255
    41b6:	9f 4f       	sbci	r25, 0xFF	; 255
    41b8:	08 95       	ret

000041ba <__udivmodsi4>:
    41ba:	a1 e2       	ldi	r26, 0x21	; 33
    41bc:	1a 2e       	mov	r1, r26
    41be:	aa 1b       	sub	r26, r26
    41c0:	bb 1b       	sub	r27, r27
    41c2:	fd 01       	movw	r30, r26
    41c4:	0d c0       	rjmp	.+26     	; 0x41e0 <__udivmodsi4_ep>

000041c6 <__udivmodsi4_loop>:
    41c6:	aa 1f       	adc	r26, r26
    41c8:	bb 1f       	adc	r27, r27
    41ca:	ee 1f       	adc	r30, r30
    41cc:	ff 1f       	adc	r31, r31
    41ce:	a2 17       	cp	r26, r18
    41d0:	b3 07       	cpc	r27, r19
    41d2:	e4 07       	cpc	r30, r20
    41d4:	f5 07       	cpc	r31, r21
    41d6:	20 f0       	brcs	.+8      	; 0x41e0 <__udivmodsi4_ep>
    41d8:	a2 1b       	sub	r26, r18
    41da:	b3 0b       	sbc	r27, r19
    41dc:	e4 0b       	sbc	r30, r20
    41de:	f5 0b       	sbc	r31, r21

000041e0 <__udivmodsi4_ep>:
    41e0:	66 1f       	adc	r22, r22
    41e2:	77 1f       	adc	r23, r23
    41e4:	88 1f       	adc	r24, r24
    41e6:	99 1f       	adc	r25, r25
    41e8:	1a 94       	dec	r1
    41ea:	69 f7       	brne	.-38     	; 0x41c6 <__udivmodsi4_loop>
    41ec:	60 95       	com	r22
    41ee:	70 95       	com	r23
    41f0:	80 95       	com	r24
    41f2:	90 95       	com	r25
    41f4:	9b 01       	movw	r18, r22
    41f6:	ac 01       	movw	r20, r24
    41f8:	bd 01       	movw	r22, r26
    41fa:	cf 01       	movw	r24, r30
    41fc:	08 95       	ret

000041fe <__prologue_saves__>:
    41fe:	2f 92       	push	r2
    4200:	3f 92       	push	r3
    4202:	4f 92       	push	r4
    4204:	5f 92       	push	r5
    4206:	6f 92       	push	r6
    4208:	7f 92       	push	r7
    420a:	8f 92       	push	r8
    420c:	9f 92       	push	r9
    420e:	af 92       	push	r10
    4210:	bf 92       	push	r11
    4212:	cf 92       	push	r12
    4214:	df 92       	push	r13
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	cf 93       	push	r28
    4220:	df 93       	push	r29
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	ca 1b       	sub	r28, r26
    4228:	db 0b       	sbc	r29, r27
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	f8 94       	cli
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	cd bf       	out	0x3d, r28	; 61
    4234:	09 94       	ijmp

00004236 <__epilogue_restores__>:
    4236:	2a 88       	ldd	r2, Y+18	; 0x12
    4238:	39 88       	ldd	r3, Y+17	; 0x11
    423a:	48 88       	ldd	r4, Y+16	; 0x10
    423c:	5f 84       	ldd	r5, Y+15	; 0x0f
    423e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4240:	7d 84       	ldd	r7, Y+13	; 0x0d
    4242:	8c 84       	ldd	r8, Y+12	; 0x0c
    4244:	9b 84       	ldd	r9, Y+11	; 0x0b
    4246:	aa 84       	ldd	r10, Y+10	; 0x0a
    4248:	b9 84       	ldd	r11, Y+9	; 0x09
    424a:	c8 84       	ldd	r12, Y+8	; 0x08
    424c:	df 80       	ldd	r13, Y+7	; 0x07
    424e:	ee 80       	ldd	r14, Y+6	; 0x06
    4250:	fd 80       	ldd	r15, Y+5	; 0x05
    4252:	0c 81       	ldd	r16, Y+4	; 0x04
    4254:	1b 81       	ldd	r17, Y+3	; 0x03
    4256:	aa 81       	ldd	r26, Y+2	; 0x02
    4258:	b9 81       	ldd	r27, Y+1	; 0x01
    425a:	ce 0f       	add	r28, r30
    425c:	d1 1d       	adc	r29, r1
    425e:	0f b6       	in	r0, 0x3f	; 63
    4260:	f8 94       	cli
    4262:	de bf       	out	0x3e, r29	; 62
    4264:	0f be       	out	0x3f, r0	; 63
    4266:	cd bf       	out	0x3d, r28	; 61
    4268:	ed 01       	movw	r28, r26
    426a:	08 95       	ret

0000426c <_exit>:
    426c:	f8 94       	cli

0000426e <__stop_program>:
    426e:	ff cf       	rjmp	.-2      	; 0x426e <__stop_program>
